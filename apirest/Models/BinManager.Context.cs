//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace apirest.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BinManagerEntities1 : DbContext
    {
        public BinManagerEntities1()
            : base("name=BinManagerEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Assignment> Assignments { get; set; }
        public virtual DbSet<CartSession> CartSessions { get; set; }
        public virtual DbSet<CartSessionItem> CartSessionItems { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Classification> Classifications { get; set; }
        public virtual DbSet<CompaniesAssigned> CompaniesAssigneds { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<LoginLog> LoginLogs { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<OrdersDetail> OrdersDetails { get; set; }
        public virtual DbSet<OrdersItem> OrdersItems { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Printer> Printers { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<AuditWarehouseLocation> AuditWarehouseLocations { get; set; }
        public virtual DbSet<AuditWarehouseLocationsDetail> AuditWarehouseLocationsDetails { get; set; }
        public virtual DbSet<BinContent> BinContents { get; set; }
        public virtual DbSet<BinMovement> BinMovements { get; set; }
        public virtual DbSet<BinMovementType> BinMovementTypes { get; set; }
        public virtual DbSet<Bin> Bins { get; set; }
        public virtual DbSet<BinType> BinTypes { get; set; }
        public virtual DbSet<BulkMovement> BulkMovements { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyAssemblyDetail> CompanyAssemblyDetails { get; set; }
        public virtual DbSet<CompanyCategory> CompanyCategories { get; set; }
        public virtual DbSet<CompanyProductSKU> CompanyProductSKUs { get; set; }
        public virtual DbSet<Filter_GlobalStock> Filter_GlobalStock { get; set; }
        public virtual DbSet<GlobalTransferDetail> GlobalTransferDetails { get; set; }
        public virtual DbSet<GlobalTransferHistory> GlobalTransferHistories { get; set; }
        public virtual DbSet<GlobalTransferMovement> GlobalTransferMovements { get; set; }
        public virtual DbSet<GlobalTransfer> GlobalTransfers { get; set; }
        public virtual DbSet<GlobalTransferStatu> GlobalTransferStatus { get; set; }
        public virtual DbSet<PrintingList> PrintingLists { get; set; }
        public virtual DbSet<ProductCondition> ProductConditions { get; set; }
        public virtual DbSet<SerialNumber> SerialNumbers { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SuppliersForProductSKU> SuppliersForProductSKUs { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
        public virtual DbSet<WarehouseLocation> WarehouseLocations { get; set; }
        public virtual DbSet<WarehouseLocationsForCompany> WarehouseLocationsForCompanies { get; set; }
        public virtual DbSet<ConceptHistory> ConceptHistories { get; set; }
        public virtual DbSet<Concept> Concepts { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<eCommMarketplaceFee> eCommMarketplaceFees { get; set; }
        public virtual DbSet<eCommMarketplaceFeeHistory> eCommMarketplaceFeeHistories { get; set; }
        public virtual DbSet<ExchageRateHistory> ExchageRateHistories { get; set; }
        public virtual DbSet<ExchageRate> ExchageRates { get; set; }
        public virtual DbSet<IGI> IGIs { get; set; }
        public virtual DbSet<IGIHistory> IGIHistories { get; set; }
        public virtual DbSet<IVA> IVAs { get; set; }
        public virtual DbSet<IVAHistory> IVAHistories { get; set; }
        public virtual DbSet<ReportEmail> ReportEmails { get; set; }
        public virtual DbSet<ReportFilterEmail> ReportFilterEmails { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<Tier> Tiers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<GlobalSKUConditionHistory> GlobalSKUConditionHistories { get; set; }
        public virtual DbSet<ProductCatalogImage> ProductCatalogImages { get; set; }
       // public virtual DbSet<MarketPlaceAttribute> MarketPlaceAttributes { get; set; }
        public virtual DbSet<MarketplaceCompatibleSKU> MarketplaceCompatibleSKUs { get; set; }
        public virtual DbSet<MarketplaceListingDetail> MarketplaceListingDetails { get; set; }
        public virtual DbSet<MarketplaceManagement> MarketplaceManagements { get; set; }
        public virtual DbSet<MarketplacePrice> MarketplacePrices { get; set; }
        public virtual DbSet<Marketplace> Marketplaces { get; set; }
        public virtual DbSet<MarketplaceSKUType> MarketplaceSKUTypes { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<BrandAlia> BrandAlias { get; set; }
        public virtual DbSet<CategoryFeature> CategoryFeatures { get; set; }
        public virtual DbSet<CategoryTier> CategoryTiers { get; set; }
        public virtual DbSet<CompanyCategoryBrandModel> CompanyCategoryBrandModels { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<ModelAlia> ModelAlias { get; set; }
        public virtual DbSet<PriceCalculation> PriceCalculations { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductConditionCostRange> ProductConditionCostRanges { get; set; }
        public virtual DbSet<ProductFeatureValue> ProductFeatureValues { get; set; }
        public virtual DbSet<SKUData> SKUDatas { get; set; }
        public virtual DbSet<HistoryWorkOrder> HistoryWorkOrders { get; set; }
        public virtual DbSet<MovementDetail> MovementDetails { get; set; }
        public virtual DbSet<StatusWorkOrder> StatusWorkOrders { get; set; }
        public virtual DbSet<TypeWorkOrder> TypeWorkOrders { get; set; }
        public virtual DbSet<WorkOrderDetail> WorkOrderDetails { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<RetailPrice> RetailPrices { get; set; }
        public virtual DbSet<CartOrder> CartOrders { get; set; }
        public virtual DbSet<CartOrder_Details> CartOrder_Details { get; set; }
        public virtual DbSet<AssignedPermission> AssignedPermissions { get; set; }
        public virtual DbSet<BulkMatch> BulkMatches { get; set; }
        public virtual DbSet<BulkMovementsDetail> BulkMovementsDetails { get; set; }
        public virtual DbSet<Vw_BulkMovementsList> Vw_BulkMovementsList { get; set; }
        public virtual DbSet<vw_CompanyProductSKU> vw_CompanyProductSKU { get; set; }
        public virtual DbSet<vw_InventoryDamagedTV> vw_InventoryDamagedTV { get; set; }
        public virtual DbSet<vw_InventoryTV> vw_InventoryTV { get; set; }
    
        [DbFunction("BinManagerEntities1", "fn_RetailBalanceBin")]
        public virtual IQueryable<fn_RetailBalanceBin_Result> fn_RetailBalanceBin(Nullable<int> companyID, Nullable<int> binID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_RetailBalanceBin_Result>("[BinManagerEntities1].[fn_RetailBalanceBin](@CompanyID, @BinID)", companyIDParameter, binIDParameter);
        }
    
        [DbFunction("BinManagerEntities1", "fn_ValidateSerialNumberOrSKU")]
        public virtual IQueryable<fn_ValidateSerialNumberOrSKU_Result> fn_ValidateSerialNumberOrSKU(string search, Nullable<int> companyID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ValidateSerialNumberOrSKU_Result>("[BinManagerEntities1].[fn_ValidateSerialNumberOrSKU](@Search, @CompanyID)", searchParameter, companyIDParameter);
        }
    
        [DbFunction("BinManagerEntities1", "fn_ValidateSerialNumberOrSKUbyBinID")]
        public virtual IQueryable<fn_ValidateSerialNumberOrSKUbyBinID_Result> fn_ValidateSerialNumberOrSKUbyBinID(string scanValue, Nullable<int> companyID, Nullable<int> binID, string search, Nullable<int> typeID)
        {
            var scanValueParameter = scanValue != null ?
                new ObjectParameter("ScanValue", scanValue) :
                new ObjectParameter("ScanValue", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ValidateSerialNumberOrSKUbyBinID_Result>("[BinManagerEntities1].[fn_ValidateSerialNumberOrSKUbyBinID](@ScanValue, @CompanyID, @BinID, @Search, @TypeID)", scanValueParameter, companyIDParameter, binIDParameter, searchParameter, typeIDParameter);
        }
    
        [DbFunction("BinManagerEntities1", "fn_ValidateSerialNumberOrSKUbyBinIDandSKU")]
        public virtual IQueryable<fn_ValidateSerialNumberOrSKUbyBinIDandSKU_Result> fn_ValidateSerialNumberOrSKUbyBinIDandSKU(string search, Nullable<int> companyID, Nullable<int> binID, string sKU)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ValidateSerialNumberOrSKUbyBinIDandSKU_Result>("[BinManagerEntities1].[fn_ValidateSerialNumberOrSKUbyBinIDandSKU](@Search, @CompanyID, @BinID, @SKU)", searchParameter, companyIDParameter, binIDParameter, sKUParameter);
        }
    
        [DbFunction("BinManagerEntities1", "split_string_XML")]
        public virtual IQueryable<split_string_XML_Result> split_string_XML(string in_string, string delimeter)
        {
            var in_stringParameter = in_string != null ?
                new ObjectParameter("in_string", in_string) :
                new ObjectParameter("in_string", typeof(string));
    
            var delimeterParameter = delimeter != null ?
                new ObjectParameter("delimeter", delimeter) :
                new ObjectParameter("delimeter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<split_string_XML_Result>("[BinManagerEntities1].[split_string_XML](@in_string, @delimeter)", in_stringParameter, delimeterParameter);
        }
    
        [DbFunction("BinManagerEntities1", "fn_TGetPriceCalculationsByCategorySKU")]
        public virtual IQueryable<fn_TGetPriceCalculationsByCategorySKU_Result> fn_TGetPriceCalculationsByCategorySKU(string sKU)
        {
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_TGetPriceCalculationsByCategorySKU_Result>("[BinManagerEntities1].[fn_TGetPriceCalculationsByCategorySKU](@SKU)", sKUParameter);
        }
    
        [DbFunction("BinManagerEntities1", "fn_TGetTvCountryNameOrigin")]
        public virtual IQueryable<fn_TGetTvCountryNameOrigin_Result> fn_TGetTvCountryNameOrigin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_TGetTvCountryNameOrigin_Result>("[BinManagerEntities1].[fn_TGetTvCountryNameOrigin]()");
        }
    
        public virtual int createCategories(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createCategories", categoryNameParameter);
        }
    
        public virtual int Delete_Pallet_CartOrder(Nullable<int> p_ORDERNUMBER, Nullable<int> p_PALLETID, string p_USERNAME)
        {
            var p_ORDERNUMBERParameter = p_ORDERNUMBER.HasValue ?
                new ObjectParameter("P_ORDERNUMBER", p_ORDERNUMBER) :
                new ObjectParameter("P_ORDERNUMBER", typeof(int));
    
            var p_PALLETIDParameter = p_PALLETID.HasValue ?
                new ObjectParameter("P_PALLETID", p_PALLETID) :
                new ObjectParameter("P_PALLETID", typeof(int));
    
            var p_USERNAMEParameter = p_USERNAME != null ?
                new ObjectParameter("P_USERNAME", p_USERNAME) :
                new ObjectParameter("P_USERNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Pallet_CartOrder", p_ORDERNUMBERParameter, p_PALLETIDParameter, p_USERNAMEParameter);
        }
    
        public virtual int Insert_New_CartOrder(Nullable<int> p_PALLETID, Nullable<int> p_PALLETQTY, Nullable<decimal> p_PALLETPRICE, string p_JSONDETAILS, string p_USERNAME)
        {
            var p_PALLETIDParameter = p_PALLETID.HasValue ?
                new ObjectParameter("P_PALLETID", p_PALLETID) :
                new ObjectParameter("P_PALLETID", typeof(int));
    
            var p_PALLETQTYParameter = p_PALLETQTY.HasValue ?
                new ObjectParameter("P_PALLETQTY", p_PALLETQTY) :
                new ObjectParameter("P_PALLETQTY", typeof(int));
    
            var p_PALLETPRICEParameter = p_PALLETPRICE.HasValue ?
                new ObjectParameter("P_PALLETPRICE", p_PALLETPRICE) :
                new ObjectParameter("P_PALLETPRICE", typeof(decimal));
    
            var p_JSONDETAILSParameter = p_JSONDETAILS != null ?
                new ObjectParameter("P_JSONDETAILS", p_JSONDETAILS) :
                new ObjectParameter("P_JSONDETAILS", typeof(string));
    
            var p_USERNAMEParameter = p_USERNAME != null ?
                new ObjectParameter("P_USERNAME", p_USERNAME) :
                new ObjectParameter("P_USERNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_New_CartOrder", p_PALLETIDParameter, p_PALLETQTYParameter, p_PALLETPRICEParameter, p_JSONDETAILSParameter, p_USERNAMEParameter);
        }
    
        public virtual int insertClassifications(string category, string classCode, string desEng, string desEsp, string user)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var classCodeParameter = classCode != null ?
                new ObjectParameter("ClassCode", classCode) :
                new ObjectParameter("ClassCode", typeof(string));
    
            var desEngParameter = desEng != null ?
                new ObjectParameter("DesEng", desEng) :
                new ObjectParameter("DesEng", typeof(string));
    
            var desEspParameter = desEsp != null ?
                new ObjectParameter("DesEsp", desEsp) :
                new ObjectParameter("DesEsp", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertClassifications", categoryParameter, classCodeParameter, desEngParameter, desEspParameter, userParameter);
        }
    
        public virtual int InsertSessionCart(Nullable<int> p_BinID, Nullable<int> p_UserID, Nullable<int> p_CompanyID)
        {
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_UserIDParameter = p_UserID.HasValue ?
                new ObjectParameter("P_UserID", p_UserID) :
                new ObjectParameter("P_UserID", typeof(int));
    
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSessionCart", p_BinIDParameter, p_UserIDParameter, p_CompanyIDParameter);
        }
    
        public virtual ObjectResult<sp_FilterBinList_Result> sp_FilterBinList(Nullable<int> wId, Nullable<int> lId, Nullable<int> btId, Nullable<int> isActive)
        {
            var wIdParameter = wId.HasValue ?
                new ObjectParameter("WId", wId) :
                new ObjectParameter("WId", typeof(int));
    
            var lIdParameter = lId.HasValue ?
                new ObjectParameter("LId", lId) :
                new ObjectParameter("LId", typeof(int));
    
            var btIdParameter = btId.HasValue ?
                new ObjectParameter("BtId", btId) :
                new ObjectParameter("BtId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FilterBinList_Result>("sp_FilterBinList", wIdParameter, lIdParameter, btIdParameter, isActiveParameter);
        }
    
        public virtual int sp_FilterSkusByCompanyCategoryAndStatus(Nullable<int> companyId, Nullable<int> categoryId, Nullable<int> isActive, Nullable<int> isSynchronizable)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var isSynchronizableParameter = isSynchronizable.HasValue ?
                new ObjectParameter("IsSynchronizable", isSynchronizable) :
                new ObjectParameter("IsSynchronizable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FilterSkusByCompanyCategoryAndStatus", companyIdParameter, categoryIdParameter, isActiveParameter, isSynchronizableParameter);
        }
    
        public virtual int sp_FixSerialNumberByCompanyAndProductSKUInitials(Nullable<int> p_CompanyID, string p_ProductSKU_Initials)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_ProductSKU_InitialsParameter = p_ProductSKU_Initials != null ?
                new ObjectParameter("P_ProductSKU_Initials", p_ProductSKU_Initials) :
                new ObjectParameter("P_ProductSKU_Initials", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FixSerialNumberByCompanyAndProductSKUInitials", p_CompanyIDParameter, p_ProductSKU_InitialsParameter);
        }
    
        public virtual ObjectResult<sp_GetAllAccounts_Result> sp_GetAllAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllAccounts_Result>("sp_GetAllAccounts");
        }
    
        public virtual ObjectResult<sp_GetAllActiveLocations_Result> sp_GetAllActiveLocations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllActiveLocations_Result>("sp_GetAllActiveLocations");
        }
    
        public virtual ObjectResult<sp_GetAllActiveLocationsByWarehose_Result> sp_GetAllActiveLocationsByWarehose(Nullable<int> p_Warehouse_ID)
        {
            var p_Warehouse_IDParameter = p_Warehouse_ID.HasValue ?
                new ObjectParameter("P_Warehouse_ID", p_Warehouse_ID) :
                new ObjectParameter("P_Warehouse_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllActiveLocationsByWarehose_Result>("sp_GetAllActiveLocationsByWarehose", p_Warehouse_IDParameter);
        }
    
        public virtual ObjectResult<sp_GetAllBinMovementType_Result> sp_GetAllBinMovementType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllBinMovementType_Result>("sp_GetAllBinMovementType");
        }
    
        public virtual ObjectResult<sp_GetAllBinsRegistered_Result> sp_GetAllBinsRegistered()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllBinsRegistered_Result>("sp_GetAllBinsRegistered");
        }
    
        public virtual ObjectResult<sp_GetAllCompanies_Result> sp_GetAllCompanies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllCompanies_Result>("sp_GetAllCompanies");
        }
    
        public virtual ObjectResult<sp_GetAllLocationsByCompanyIdOrdWarehouseId_Result> sp_GetAllLocationsByCompanyIdOrdWarehouseId(Nullable<int> companyId, Nullable<int> warehouseId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllLocationsByCompanyIdOrdWarehouseId_Result>("sp_GetAllLocationsByCompanyIdOrdWarehouseId", companyIdParameter, warehouseIdParameter);
        }
    
        public virtual int sp_GetCart_Order(string p_UserID)
        {
            var p_UserIDParameter = p_UserID != null ?
                new ObjectParameter("P_UserID", p_UserID) :
                new ObjectParameter("P_UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetCart_Order", p_UserIDParameter);
        }
    
        public virtual ObjectResult<sp_InsertUpdateBIN_Result> sp_InsertUpdateBIN(Nullable<int> p_Index, string p_BinCode, string p_BinType, string p_Warehouse, string p_Location, string p_Active, string p_USER)
        {
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("P_Index", p_Index) :
                new ObjectParameter("P_Index", typeof(int));
    
            var p_BinCodeParameter = p_BinCode != null ?
                new ObjectParameter("P_BinCode", p_BinCode) :
                new ObjectParameter("P_BinCode", typeof(string));
    
            var p_BinTypeParameter = p_BinType != null ?
                new ObjectParameter("P_BinType", p_BinType) :
                new ObjectParameter("P_BinType", typeof(string));
    
            var p_WarehouseParameter = p_Warehouse != null ?
                new ObjectParameter("P_Warehouse", p_Warehouse) :
                new ObjectParameter("P_Warehouse", typeof(string));
    
            var p_LocationParameter = p_Location != null ?
                new ObjectParameter("P_Location", p_Location) :
                new ObjectParameter("P_Location", typeof(string));
    
            var p_ActiveParameter = p_Active != null ?
                new ObjectParameter("P_Active", p_Active) :
                new ObjectParameter("P_Active", typeof(string));
    
            var p_USERParameter = p_USER != null ?
                new ObjectParameter("P_USER", p_USER) :
                new ObjectParameter("P_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertUpdateBIN_Result>("sp_InsertUpdateBIN", p_IndexParameter, p_BinCodeParameter, p_BinTypeParameter, p_WarehouseParameter, p_LocationParameter, p_ActiveParameter, p_USERParameter);
        }
    
        public virtual ObjectResult<sp_InsertUpdateCategory_Result> sp_InsertUpdateCategory(Nullable<int> p_Index, string p_CompanyName, string p_CategoryName)
        {
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("P_Index", p_Index) :
                new ObjectParameter("P_Index", typeof(int));
    
            var p_CompanyNameParameter = p_CompanyName != null ?
                new ObjectParameter("P_CompanyName", p_CompanyName) :
                new ObjectParameter("P_CompanyName", typeof(string));
    
            var p_CategoryNameParameter = p_CategoryName != null ?
                new ObjectParameter("P_CategoryName", p_CategoryName) :
                new ObjectParameter("P_CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertUpdateCategory_Result>("sp_InsertUpdateCategory", p_IndexParameter, p_CompanyNameParameter, p_CategoryNameParameter);
        }
    
        public virtual ObjectResult<sp_InsertUpdateLocation_Result> sp_InsertUpdateLocation(Nullable<int> p_Index, string p_LocationName, string p_WarehouseName, string p_Active, string p_USER)
        {
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("P_Index", p_Index) :
                new ObjectParameter("P_Index", typeof(int));
    
            var p_LocationNameParameter = p_LocationName != null ?
                new ObjectParameter("P_LocationName", p_LocationName) :
                new ObjectParameter("P_LocationName", typeof(string));
    
            var p_WarehouseNameParameter = p_WarehouseName != null ?
                new ObjectParameter("P_WarehouseName", p_WarehouseName) :
                new ObjectParameter("P_WarehouseName", typeof(string));
    
            var p_ActiveParameter = p_Active != null ?
                new ObjectParameter("P_Active", p_Active) :
                new ObjectParameter("P_Active", typeof(string));
    
            var p_USERParameter = p_USER != null ?
                new ObjectParameter("P_USER", p_USER) :
                new ObjectParameter("P_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertUpdateLocation_Result>("sp_InsertUpdateLocation", p_IndexParameter, p_LocationNameParameter, p_WarehouseNameParameter, p_ActiveParameter, p_USERParameter);
        }
    
        public virtual ObjectResult<sp_InsertUpdateSKU_Result> sp_InsertUpdateSKU(Nullable<int> p_Index, string p_CompanyName, string p_ProductSKU, string p_ProductName, string p_SupplierSKU, string p_CategoryName, string p_Active, string p_USER)
        {
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("P_Index", p_Index) :
                new ObjectParameter("P_Index", typeof(int));
    
            var p_CompanyNameParameter = p_CompanyName != null ?
                new ObjectParameter("P_CompanyName", p_CompanyName) :
                new ObjectParameter("P_CompanyName", typeof(string));
    
            var p_ProductSKUParameter = p_ProductSKU != null ?
                new ObjectParameter("P_ProductSKU", p_ProductSKU) :
                new ObjectParameter("P_ProductSKU", typeof(string));
    
            var p_ProductNameParameter = p_ProductName != null ?
                new ObjectParameter("P_ProductName", p_ProductName) :
                new ObjectParameter("P_ProductName", typeof(string));
    
            var p_SupplierSKUParameter = p_SupplierSKU != null ?
                new ObjectParameter("P_SupplierSKU", p_SupplierSKU) :
                new ObjectParameter("P_SupplierSKU", typeof(string));
    
            var p_CategoryNameParameter = p_CategoryName != null ?
                new ObjectParameter("P_CategoryName", p_CategoryName) :
                new ObjectParameter("P_CategoryName", typeof(string));
    
            var p_ActiveParameter = p_Active != null ?
                new ObjectParameter("P_Active", p_Active) :
                new ObjectParameter("P_Active", typeof(string));
    
            var p_USERParameter = p_USER != null ?
                new ObjectParameter("P_USER", p_USER) :
                new ObjectParameter("P_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertUpdateSKU_Result>("sp_InsertUpdateSKU", p_IndexParameter, p_CompanyNameParameter, p_ProductSKUParameter, p_ProductNameParameter, p_SupplierSKUParameter, p_CategoryNameParameter, p_ActiveParameter, p_USERParameter);
        }
    
        public virtual ObjectResult<sp_InsertUpdateWarehouse_Result> sp_InsertUpdateWarehouse(Nullable<int> p_Index, string p_WarehouseCode, string p_WarehouseName, string p_Address, string p_Active, string p_USER)
        {
            var p_IndexParameter = p_Index.HasValue ?
                new ObjectParameter("P_Index", p_Index) :
                new ObjectParameter("P_Index", typeof(int));
    
            var p_WarehouseCodeParameter = p_WarehouseCode != null ?
                new ObjectParameter("P_WarehouseCode", p_WarehouseCode) :
                new ObjectParameter("P_WarehouseCode", typeof(string));
    
            var p_WarehouseNameParameter = p_WarehouseName != null ?
                new ObjectParameter("P_WarehouseName", p_WarehouseName) :
                new ObjectParameter("P_WarehouseName", typeof(string));
    
            var p_AddressParameter = p_Address != null ?
                new ObjectParameter("P_Address", p_Address) :
                new ObjectParameter("P_Address", typeof(string));
    
            var p_ActiveParameter = p_Active != null ?
                new ObjectParameter("P_Active", p_Active) :
                new ObjectParameter("P_Active", typeof(string));
    
            var p_USERParameter = p_USER != null ?
                new ObjectParameter("P_USER", p_USER) :
                new ObjectParameter("P_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertUpdateWarehouse_Result>("sp_InsertUpdateWarehouse", p_IndexParameter, p_WarehouseCodeParameter, p_WarehouseNameParameter, p_AddressParameter, p_ActiveParameter, p_USERParameter);
        }
    
        public virtual ObjectResult<sp_ModulesAssignedbyUserAndCompany_Result> sp_ModulesAssignedbyUserAndCompany(Nullable<int> companyID, Nullable<int> user_Id)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ModulesAssignedbyUserAndCompany_Result>("sp_ModulesAssignedbyUserAndCompany", companyIDParameter, user_IdParameter);
        }
    
        public virtual ObjectResult<sp_PA_GetLogin_Result> sp_PA_GetLogin(string email, string pasword)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var paswordParameter = pasword != null ?
                new ObjectParameter("Pasword", pasword) :
                new ObjectParameter("Pasword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PA_GetLogin_Result>("sp_PA_GetLogin", emailParameter, paswordParameter);
        }
    
        public virtual ObjectResult<sp_PA_GetPrinterInfoByCompanyWarehousePrinter_Result> sp_PA_GetPrinterInfoByCompanyWarehousePrinter(Nullable<int> companyID, Nullable<int> warehouseID, Nullable<int> printerID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var printerIDParameter = printerID.HasValue ?
                new ObjectParameter("PrinterID", printerID) :
                new ObjectParameter("PrinterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PA_GetPrinterInfoByCompanyWarehousePrinter_Result>("sp_PA_GetPrinterInfoByCompanyWarehousePrinter", companyIDParameter, warehouseIDParameter, printerIDParameter);
        }
    
        public virtual ObjectResult<sp_PA_GetPrinterListByCompanyWarehouse_Result> sp_PA_GetPrinterListByCompanyWarehouse(Nullable<int> companyID, Nullable<int> warehouseID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PA_GetPrinterListByCompanyWarehouse_Result>("sp_PA_GetPrinterListByCompanyWarehouse", companyIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<sp_PA_GetRegisteredMac_Result> sp_PA_GetRegisteredMac(string mAC)
        {
            var mACParameter = mAC != null ?
                new ObjectParameter("MAC", mAC) :
                new ObjectParameter("MAC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PA_GetRegisteredMac_Result>("sp_PA_GetRegisteredMac", mACParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_PA_UpdateMacbyCompanyWarehousePrint(Nullable<int> companyID, Nullable<int> warehouseID, Nullable<int> printerID, string mAC)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var printerIDParameter = printerID.HasValue ?
                new ObjectParameter("PrinterID", printerID) :
                new ObjectParameter("PrinterID", typeof(int));
    
            var mACParameter = mAC != null ?
                new ObjectParameter("MAC", mAC) :
                new ObjectParameter("MAC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_PA_UpdateMacbyCompanyWarehousePrint", companyIDParameter, warehouseIDParameter, printerIDParameter, mACParameter);
        }
    
        public virtual int updateClassifications(Nullable<int> classificationsID, string descriptionEng, string descriptionEsp, string user)
        {
            var classificationsIDParameter = classificationsID.HasValue ?
                new ObjectParameter("ClassificationsID", classificationsID) :
                new ObjectParameter("ClassificationsID", typeof(int));
    
            var descriptionEngParameter = descriptionEng != null ?
                new ObjectParameter("DescriptionEng", descriptionEng) :
                new ObjectParameter("DescriptionEng", typeof(string));
    
            var descriptionEspParameter = descriptionEsp != null ?
                new ObjectParameter("DescriptionEsp", descriptionEsp) :
                new ObjectParameter("DescriptionEsp", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateClassifications", classificationsIDParameter, descriptionEngParameter, descriptionEspParameter, userParameter);
        }
    
        public virtual int GetRetailPriceBalance(Nullable<int> companyID, Nullable<int> binID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRetailPriceBalance", companyIDParameter, binIDParameter);
        }
    
        public virtual ObjectResult<sp_AD_GetAuditProgressAndLatestInformation_Result> sp_AD_GetAuditProgressAndLatestInformation(Nullable<int> auditID)
        {
            var auditIDParameter = auditID.HasValue ?
                new ObjectParameter("AuditID", auditID) :
                new ObjectParameter("AuditID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AD_GetAuditProgressAndLatestInformation_Result>("sp_AD_GetAuditProgressAndLatestInformation", auditIDParameter);
        }
    
        public virtual int sp_AD_GetAuditWarehouseLocations(Nullable<int> companyID, Nullable<bool> status, string dateStart, string dateEnd)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var dateStartParameter = dateStart != null ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(string));
    
            var dateEndParameter = dateEnd != null ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AD_GetAuditWarehouseLocations", companyIDParameter, statusParameter, dateStartParameter, dateEndParameter);
        }
    
        public virtual ObjectResult<sp_AD_GetAuditWarehouseLocationsDetail_Result> sp_AD_GetAuditWarehouseLocationsDetail(Nullable<int> auditID)
        {
            var auditIDParameter = auditID.HasValue ?
                new ObjectParameter("AuditID", auditID) :
                new ObjectParameter("AuditID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AD_GetAuditWarehouseLocationsDetail_Result>("sp_AD_GetAuditWarehouseLocationsDetail", auditIDParameter);
        }
    
        public virtual int sp_AD_GetBinContentByAudit(Nullable<int> auditID)
        {
            var auditIDParameter = auditID.HasValue ?
                new ObjectParameter("AuditID", auditID) :
                new ObjectParameter("AuditID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AD_GetBinContentByAudit", auditIDParameter);
        }
    
        public virtual ObjectResult<sp_AD_InsertAuditDetail_Result> sp_AD_InsertAuditDetail(Nullable<int> auditID, Nullable<int> companyID, Nullable<int> binID, string productSKU, Nullable<int> quantityAudit, string userID)
        {
            var auditIDParameter = auditID.HasValue ?
                new ObjectParameter("AuditID", auditID) :
                new ObjectParameter("AuditID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var quantityAuditParameter = quantityAudit.HasValue ?
                new ObjectParameter("QuantityAudit", quantityAudit) :
                new ObjectParameter("QuantityAudit", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AD_InsertAuditDetail_Result>("sp_AD_InsertAuditDetail", auditIDParameter, companyIDParameter, binIDParameter, productSKUParameter, quantityAuditParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_BulkMovementsTrasnsferByCompanyBulkId_Result> sp_BulkMovementsTrasnsferByCompanyBulkId(Nullable<int> p_CompanyId, Nullable<int> p_BulkMovementsId)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_BulkMovementsIdParameter = p_BulkMovementsId.HasValue ?
                new ObjectParameter("P_BulkMovementsId", p_BulkMovementsId) :
                new ObjectParameter("P_BulkMovementsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BulkMovementsTrasnsferByCompanyBulkId_Result>("sp_BulkMovementsTrasnsferByCompanyBulkId", p_CompanyIdParameter, p_BulkMovementsIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_BulkMovementsUpdateBulkMovementsReceive(Nullable<int> p_BulkMovementsID)
        {
            var p_BulkMovementsIDParameter = p_BulkMovementsID.HasValue ?
                new ObjectParameter("P_BulkMovementsID", p_BulkMovementsID) :
                new ObjectParameter("P_BulkMovementsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_BulkMovementsUpdateBulkMovementsReceive", p_BulkMovementsIDParameter);
        }
    
        public virtual int sp_ContainNullLPNRetail(Nullable<int> p_CompanyID, Nullable<int> p_BinID)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ContainNullLPNRetail", p_CompanyIDParameter, p_BinIDParameter);
        }
    
        public virtual ObjectResult<sp_CreateGlobalTransferPO_Result> sp_CreateGlobalTransferPO(Nullable<int> fromCompnayID, Nullable<int> toCompanyID, string enteredBy)
        {
            var fromCompnayIDParameter = fromCompnayID.HasValue ?
                new ObjectParameter("FromCompnayID", fromCompnayID) :
                new ObjectParameter("FromCompnayID", typeof(int));
    
            var toCompanyIDParameter = toCompanyID.HasValue ?
                new ObjectParameter("ToCompanyID", toCompanyID) :
                new ObjectParameter("ToCompanyID", typeof(int));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CreateGlobalTransferPO_Result>("sp_CreateGlobalTransferPO", fromCompnayIDParameter, toCompanyIDParameter, enteredByParameter);
        }
    
        public virtual ObjectResult<sp_Delete_BulkMatchByID_Result> sp_Delete_BulkMatchByID(Nullable<int> p_BulkID)
        {
            var p_BulkIDParameter = p_BulkID.HasValue ?
                new ObjectParameter("P_BulkID", p_BulkID) :
                new ObjectParameter("P_BulkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Delete_BulkMatchByID_Result>("sp_Delete_BulkMatchByID", p_BulkIDParameter);
        }
    
        public virtual ObjectResult<sp_Delete_Filter_Globalstock_Result> sp_Delete_Filter_Globalstock(Nullable<int> p_CompanyID, Nullable<int> p_Id)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_IdParameter = p_Id.HasValue ?
                new ObjectParameter("P_Id", p_Id) :
                new ObjectParameter("P_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Delete_Filter_Globalstock_Result>("sp_Delete_Filter_Globalstock", p_CompanyIDParameter, p_IdParameter);
        }
    
        public virtual ObjectResult<sp_FilterSupplierByCompanyOrAvailability_Result> sp_FilterSupplierByCompanyOrAvailability(Nullable<int> companyId, Nullable<int> isActive)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FilterSupplierByCompanyOrAvailability_Result>("sp_FilterSupplierByCompanyOrAvailability", companyIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_Get_BulkMatch_Result> sp_Get_BulkMatch(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_BulkMatch_Result>("sp_Get_BulkMatch", locationIDParameter);
        }
    
        public virtual int sp_Get_BulkMatchByCompanyAndLocation(Nullable<int> p_CompanyId, Nullable<int> p_LocationId)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_LocationIdParameter = p_LocationId.HasValue ?
                new ObjectParameter("P_LocationId", p_LocationId) :
                new ObjectParameter("P_LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_BulkMatchByCompanyAndLocation", p_CompanyIdParameter, p_LocationIdParameter);
        }
    
        public virtual int sp_Get_BulkMatchByCompanyAndLocationV_1(Nullable<int> p_CompanyId, Nullable<int> p_LocationId)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_LocationIdParameter = p_LocationId.HasValue ?
                new ObjectParameter("P_LocationId", p_LocationId) :
                new ObjectParameter("P_LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_BulkMatchByCompanyAndLocationV_1", p_CompanyIdParameter, p_LocationIdParameter);
        }
    
        public virtual int sp_Get_Global_Stock_InventoryPalletByCompany(Nullable<int> p_CompanyID, string p_Search, string p_Condition, string p_Category, Nullable<int> p_WithPallets)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_CategoryParameter = p_Category != null ?
                new ObjectParameter("P_Category", p_Category) :
                new ObjectParameter("P_Category", typeof(string));
    
            var p_WithPalletsParameter = p_WithPallets.HasValue ?
                new ObjectParameter("P_WithPallets", p_WithPallets) :
                new ObjectParameter("P_WithPallets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_Global_Stock_InventoryPalletByCompany", p_CompanyIDParameter, p_SearchParameter, p_ConditionParameter, p_CategoryParameter, p_WithPalletsParameter);
        }
    
        public virtual int sp_Get_Global_Stock_InventoryPalletByCompany_Detail(Nullable<int> p_CompanyID, Nullable<int> p_LocationID, Nullable<int> p_BinID, string p_Condition, string p_Category)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_CategoryParameter = p_Category != null ?
                new ObjectParameter("P_Category", p_Category) :
                new ObjectParameter("P_Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_Global_Stock_InventoryPalletByCompany_Detail", p_CompanyIDParameter, p_LocationIDParameter, p_BinIDParameter, p_ConditionParameter, p_CategoryParameter);
        }
    
        public virtual ObjectResult<sp_Get_GlobalstocBySelect2_Result> sp_Get_GlobalstocBySelect2(Nullable<int> p_CompanyId, string p_UserID)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_UserIDParameter = p_UserID != null ?
                new ObjectParameter("P_UserID", p_UserID) :
                new ObjectParameter("P_UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_GlobalstocBySelect2_Result>("sp_Get_GlobalstocBySelect2", p_CompanyIdParameter, p_UserIDParameter);
        }
    
        public virtual int sp_Get_GlobalStock_InventoryBySKU(Nullable<int> p_CompanyId, string p_CategoryId, Nullable<int> p_WarehouseID, Nullable<int> p_LocationID, Nullable<int> p_BinID, string p_Search, string p_Condition, Nullable<int> p_ForInventory, string p_Brand, string p_Model, string p_Size, string p_LPN, Nullable<int> p_ConceptID, string p_OpenCell)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_CategoryIdParameter = p_CategoryId != null ?
                new ObjectParameter("P_CategoryId", p_CategoryId) :
                new ObjectParameter("P_CategoryId", typeof(string));
    
            var p_WarehouseIDParameter = p_WarehouseID.HasValue ?
                new ObjectParameter("P_WarehouseID", p_WarehouseID) :
                new ObjectParameter("P_WarehouseID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_ForInventoryParameter = p_ForInventory.HasValue ?
                new ObjectParameter("P_ForInventory", p_ForInventory) :
                new ObjectParameter("P_ForInventory", typeof(int));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            var p_SizeParameter = p_Size != null ?
                new ObjectParameter("P_Size", p_Size) :
                new ObjectParameter("P_Size", typeof(string));
    
            var p_LPNParameter = p_LPN != null ?
                new ObjectParameter("P_LPN", p_LPN) :
                new ObjectParameter("P_LPN", typeof(string));
    
            var p_ConceptIDParameter = p_ConceptID.HasValue ?
                new ObjectParameter("P_ConceptID", p_ConceptID) :
                new ObjectParameter("P_ConceptID", typeof(int));
    
            var p_OpenCellParameter = p_OpenCell != null ?
                new ObjectParameter("P_OpenCell", p_OpenCell) :
                new ObjectParameter("P_OpenCell", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_GlobalStock_InventoryBySKU", p_CompanyIdParameter, p_CategoryIdParameter, p_WarehouseIDParameter, p_LocationIDParameter, p_BinIDParameter, p_SearchParameter, p_ConditionParameter, p_ForInventoryParameter, p_BrandParameter, p_ModelParameter, p_SizeParameter, p_LPNParameter, p_ConceptIDParameter, p_OpenCellParameter);
        }
    
        public virtual int sp_Get_GlobalStock_InventoryBySKU_al(Nullable<int> p_CompanyId, string p_CategoryId, Nullable<int> p_WarehouseID, Nullable<int> p_LocationID, Nullable<int> p_BinID, string p_Search, string p_Condition, Nullable<int> p_ForInventory, string p_Brand, string p_Model, string p_Size, string p_LPN, Nullable<int> p_QtyFrom, Nullable<int> p_QtyTo)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_CategoryIdParameter = p_CategoryId != null ?
                new ObjectParameter("P_CategoryId", p_CategoryId) :
                new ObjectParameter("P_CategoryId", typeof(string));
    
            var p_WarehouseIDParameter = p_WarehouseID.HasValue ?
                new ObjectParameter("P_WarehouseID", p_WarehouseID) :
                new ObjectParameter("P_WarehouseID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_ForInventoryParameter = p_ForInventory.HasValue ?
                new ObjectParameter("P_ForInventory", p_ForInventory) :
                new ObjectParameter("P_ForInventory", typeof(int));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            var p_SizeParameter = p_Size != null ?
                new ObjectParameter("P_Size", p_Size) :
                new ObjectParameter("P_Size", typeof(string));
    
            var p_LPNParameter = p_LPN != null ?
                new ObjectParameter("P_LPN", p_LPN) :
                new ObjectParameter("P_LPN", typeof(string));
    
            var p_QtyFromParameter = p_QtyFrom.HasValue ?
                new ObjectParameter("P_QtyFrom", p_QtyFrom) :
                new ObjectParameter("P_QtyFrom", typeof(int));
    
            var p_QtyToParameter = p_QtyTo.HasValue ?
                new ObjectParameter("P_QtyTo", p_QtyTo) :
                new ObjectParameter("P_QtyTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_GlobalStock_InventoryBySKU_al", p_CompanyIdParameter, p_CategoryIdParameter, p_WarehouseIDParameter, p_LocationIDParameter, p_BinIDParameter, p_SearchParameter, p_ConditionParameter, p_ForInventoryParameter, p_BrandParameter, p_ModelParameter, p_SizeParameter, p_LPNParameter, p_QtyFromParameter, p_QtyToParameter);
        }
    
        public virtual ObjectResult<sp_Get_GlobalStock_InventoryBySKU_Condition_Result> sp_Get_GlobalStock_InventoryBySKU_Condition(Nullable<int> p_CompanyId, string p_SKU, Nullable<int> p_WarehouseID, Nullable<int> p_LocationID, Nullable<int> p_BinID, string p_Condition, Nullable<int> p_ForInventory)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            var p_WarehouseIDParameter = p_WarehouseID.HasValue ?
                new ObjectParameter("P_WarehouseID", p_WarehouseID) :
                new ObjectParameter("P_WarehouseID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_ForInventoryParameter = p_ForInventory.HasValue ?
                new ObjectParameter("P_ForInventory", p_ForInventory) :
                new ObjectParameter("P_ForInventory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_GlobalStock_InventoryBySKU_Condition_Result>("sp_Get_GlobalStock_InventoryBySKU_Condition", p_CompanyIdParameter, p_SKUParameter, p_WarehouseIDParameter, p_LocationIDParameter, p_BinIDParameter, p_ConditionParameter, p_ForInventoryParameter);
        }
    
        public virtual int sp_Get_GlobalStock_InventoryBySKU_ExcelByLicenseplate(Nullable<int> p_CompanyId, string p_CategoryId, Nullable<int> p_WarehouseID, Nullable<int> p_LocationID, Nullable<int> p_BinID, string p_Search, string p_Condition, Nullable<int> p_ForInventory, string p_Brand, string p_Model, string p_Size, string p_LPN, Nullable<int> p_QtyFrom, Nullable<int> p_QtyTo)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_CategoryIdParameter = p_CategoryId != null ?
                new ObjectParameter("P_CategoryId", p_CategoryId) :
                new ObjectParameter("P_CategoryId", typeof(string));
    
            var p_WarehouseIDParameter = p_WarehouseID.HasValue ?
                new ObjectParameter("P_WarehouseID", p_WarehouseID) :
                new ObjectParameter("P_WarehouseID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_ForInventoryParameter = p_ForInventory.HasValue ?
                new ObjectParameter("P_ForInventory", p_ForInventory) :
                new ObjectParameter("P_ForInventory", typeof(int));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            var p_SizeParameter = p_Size != null ?
                new ObjectParameter("P_Size", p_Size) :
                new ObjectParameter("P_Size", typeof(string));
    
            var p_LPNParameter = p_LPN != null ?
                new ObjectParameter("P_LPN", p_LPN) :
                new ObjectParameter("P_LPN", typeof(string));
    
            var p_QtyFromParameter = p_QtyFrom.HasValue ?
                new ObjectParameter("P_QtyFrom", p_QtyFrom) :
                new ObjectParameter("P_QtyFrom", typeof(int));
    
            var p_QtyToParameter = p_QtyTo.HasValue ?
                new ObjectParameter("P_QtyTo", p_QtyTo) :
                new ObjectParameter("P_QtyTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_GlobalStock_InventoryBySKU_ExcelByLicenseplate", p_CompanyIdParameter, p_CategoryIdParameter, p_WarehouseIDParameter, p_LocationIDParameter, p_BinIDParameter, p_SearchParameter, p_ConditionParameter, p_ForInventoryParameter, p_BrandParameter, p_ModelParameter, p_SizeParameter, p_LPNParameter, p_QtyFromParameter, p_QtyToParameter);
        }
    
        public virtual int sp_Get_GlobalStock_InventoryBySKU_ExcelByLicenseplateV_2(Nullable<int> p_CompanyId, string p_CategoryId, Nullable<int> p_WarehouseID, Nullable<int> p_LocationID, Nullable<int> p_BinID, string p_Search, string p_Condition, Nullable<int> p_ForInventory, string p_Brand, string p_Model, string p_Size, string p_LPN, Nullable<int> p_QtyFrom, Nullable<int> p_QtyTo)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_CategoryIdParameter = p_CategoryId != null ?
                new ObjectParameter("P_CategoryId", p_CategoryId) :
                new ObjectParameter("P_CategoryId", typeof(string));
    
            var p_WarehouseIDParameter = p_WarehouseID.HasValue ?
                new ObjectParameter("P_WarehouseID", p_WarehouseID) :
                new ObjectParameter("P_WarehouseID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_ForInventoryParameter = p_ForInventory.HasValue ?
                new ObjectParameter("P_ForInventory", p_ForInventory) :
                new ObjectParameter("P_ForInventory", typeof(int));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            var p_SizeParameter = p_Size != null ?
                new ObjectParameter("P_Size", p_Size) :
                new ObjectParameter("P_Size", typeof(string));
    
            var p_LPNParameter = p_LPN != null ?
                new ObjectParameter("P_LPN", p_LPN) :
                new ObjectParameter("P_LPN", typeof(string));
    
            var p_QtyFromParameter = p_QtyFrom.HasValue ?
                new ObjectParameter("P_QtyFrom", p_QtyFrom) :
                new ObjectParameter("P_QtyFrom", typeof(int));
    
            var p_QtyToParameter = p_QtyTo.HasValue ?
                new ObjectParameter("P_QtyTo", p_QtyTo) :
                new ObjectParameter("P_QtyTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_GlobalStock_InventoryBySKU_ExcelByLicenseplateV_2", p_CompanyIdParameter, p_CategoryIdParameter, p_WarehouseIDParameter, p_LocationIDParameter, p_BinIDParameter, p_SearchParameter, p_ConditionParameter, p_ForInventoryParameter, p_BrandParameter, p_ModelParameter, p_SizeParameter, p_LPNParameter, p_QtyFromParameter, p_QtyToParameter);
        }
    
        public virtual int sp_Get_GlobalStock_InventoryBySKU_InsertHistory_MI()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_GlobalStock_InventoryBySKU_InsertHistory_MI");
        }
    
        public virtual ObjectResult<sp_Get_GlobalStock_InventoryBySKU_PriceStores_Result> sp_Get_GlobalStock_InventoryBySKU_PriceStores(string p_SKU, string p_DateStart, string p_DateEnd)
        {
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_GlobalStock_InventoryBySKU_PriceStores_Result>("sp_Get_GlobalStock_InventoryBySKU_PriceStores", p_SKUParameter, p_DateStartParameter, p_DateEndParameter);
        }
    
        public virtual int sp_Get_GlobalStock_InventoryBySKU_Type(Nullable<int> p_CompanyId)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_GlobalStock_InventoryBySKU_Type", p_CompanyIdParameter);
        }
    
        public virtual ObjectResult<sp_Get_GlobalStock_InventoryBySKU_v2_FPT_Result> sp_Get_GlobalStock_InventoryBySKU_v2_FPT(Nullable<int> p_CompanyId, string p_CategoryId, Nullable<int> p_WarehouseID, Nullable<int> p_LocationID, Nullable<int> p_BinID, string p_Search, string p_Condition, Nullable<int> p_ForInventory, string p_Brand, string p_Model, string p_Size, string p_LPN, Nullable<int> p_QtyFrom, Nullable<int> p_QtyTo)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_CategoryIdParameter = p_CategoryId != null ?
                new ObjectParameter("P_CategoryId", p_CategoryId) :
                new ObjectParameter("P_CategoryId", typeof(string));
    
            var p_WarehouseIDParameter = p_WarehouseID.HasValue ?
                new ObjectParameter("P_WarehouseID", p_WarehouseID) :
                new ObjectParameter("P_WarehouseID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_ForInventoryParameter = p_ForInventory.HasValue ?
                new ObjectParameter("P_ForInventory", p_ForInventory) :
                new ObjectParameter("P_ForInventory", typeof(int));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            var p_SizeParameter = p_Size != null ?
                new ObjectParameter("P_Size", p_Size) :
                new ObjectParameter("P_Size", typeof(string));
    
            var p_LPNParameter = p_LPN != null ?
                new ObjectParameter("P_LPN", p_LPN) :
                new ObjectParameter("P_LPN", typeof(string));
    
            var p_QtyFromParameter = p_QtyFrom.HasValue ?
                new ObjectParameter("P_QtyFrom", p_QtyFrom) :
                new ObjectParameter("P_QtyFrom", typeof(int));
    
            var p_QtyToParameter = p_QtyTo.HasValue ?
                new ObjectParameter("P_QtyTo", p_QtyTo) :
                new ObjectParameter("P_QtyTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_GlobalStock_InventoryBySKU_v2_FPT_Result>("sp_Get_GlobalStock_InventoryBySKU_v2_FPT", p_CompanyIdParameter, p_CategoryIdParameter, p_WarehouseIDParameter, p_LocationIDParameter, p_BinIDParameter, p_SearchParameter, p_ConditionParameter, p_ForInventoryParameter, p_BrandParameter, p_ModelParameter, p_SizeParameter, p_LPNParameter, p_QtyFromParameter, p_QtyToParameter);
        }
    
        public virtual int sp_Get_GlobalStock_InventoryBySKU_Warehouse(Nullable<int> p_CompanyId, string p_SKU, Nullable<int> p_WarehouseID, Nullable<int> p_LocationID, Nullable<int> p_BinID, string p_Condition, Nullable<int> p_ForInventory)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            var p_WarehouseIDParameter = p_WarehouseID.HasValue ?
                new ObjectParameter("P_WarehouseID", p_WarehouseID) :
                new ObjectParameter("P_WarehouseID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_ForInventoryParameter = p_ForInventory.HasValue ?
                new ObjectParameter("P_ForInventory", p_ForInventory) :
                new ObjectParameter("P_ForInventory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_GlobalStock_InventoryBySKU_Warehouse", p_CompanyIdParameter, p_SKUParameter, p_WarehouseIDParameter, p_LocationIDParameter, p_BinIDParameter, p_ConditionParameter, p_ForInventoryParameter);
        }
    
        public virtual ObjectResult<sp_Get_GlobalStock_InventoryBySKUAndCondicion_Quantity_Result> sp_Get_GlobalStock_InventoryBySKUAndCondicion_Quantity(Nullable<int> companyID, Nullable<int> typeInventory, Nullable<int> warehouseID, Nullable<int> locationID, Nullable<int> bINID, string productSKU, string condition)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var typeInventoryParameter = typeInventory.HasValue ?
                new ObjectParameter("TypeInventory", typeInventory) :
                new ObjectParameter("TypeInventory", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var bINIDParameter = bINID.HasValue ?
                new ObjectParameter("BINID", bINID) :
                new ObjectParameter("BINID", typeof(int));
    
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_GlobalStock_InventoryBySKUAndCondicion_Quantity_Result>("sp_Get_GlobalStock_InventoryBySKUAndCondicion_Quantity", companyIDParameter, typeInventoryParameter, warehouseIDParameter, locationIDParameter, bINIDParameter, productSKUParameter, conditionParameter);
        }
    
        public virtual int sp_Get_GlobalStock_InventoryBySKUAndCondicion_QuantityVirtual(Nullable<int> companyID, Nullable<int> typeInventory, Nullable<int> warehouseID, Nullable<int> locationID, Nullable<int> bINID, string productSKU, string condition)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var typeInventoryParameter = typeInventory.HasValue ?
                new ObjectParameter("TypeInventory", typeInventory) :
                new ObjectParameter("TypeInventory", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var bINIDParameter = bINID.HasValue ?
                new ObjectParameter("BINID", bINID) :
                new ObjectParameter("BINID", typeof(int));
    
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_GlobalStock_InventoryBySKUAndCondicion_QuantityVirtual", companyIDParameter, typeInventoryParameter, warehouseIDParameter, locationIDParameter, bINIDParameter, productSKUParameter, conditionParameter);
        }
    
        public virtual int sp_Get_GlobalStock_InventoryBySKUCondition(Nullable<int> p_CompanyId, Nullable<int> p_CategoryId, Nullable<int> p_WarehouseID, Nullable<int> p_LocationID, Nullable<int> p_BinID, string p_Search, string p_Condition, Nullable<int> p_ForInventory, string p_Brand, string p_Model, Nullable<int> p_QtyFrom, Nullable<int> p_QtyTo)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_CategoryIdParameter = p_CategoryId.HasValue ?
                new ObjectParameter("P_CategoryId", p_CategoryId) :
                new ObjectParameter("P_CategoryId", typeof(int));
    
            var p_WarehouseIDParameter = p_WarehouseID.HasValue ?
                new ObjectParameter("P_WarehouseID", p_WarehouseID) :
                new ObjectParameter("P_WarehouseID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_ForInventoryParameter = p_ForInventory.HasValue ?
                new ObjectParameter("P_ForInventory", p_ForInventory) :
                new ObjectParameter("P_ForInventory", typeof(int));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            var p_QtyFromParameter = p_QtyFrom.HasValue ?
                new ObjectParameter("P_QtyFrom", p_QtyFrom) :
                new ObjectParameter("P_QtyFrom", typeof(int));
    
            var p_QtyToParameter = p_QtyTo.HasValue ?
                new ObjectParameter("P_QtyTo", p_QtyTo) :
                new ObjectParameter("P_QtyTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_GlobalStock_InventoryBySKUCondition", p_CompanyIdParameter, p_CategoryIdParameter, p_WarehouseIDParameter, p_LocationIDParameter, p_BinIDParameter, p_SearchParameter, p_ConditionParameter, p_ForInventoryParameter, p_BrandParameter, p_ModelParameter, p_QtyFromParameter, p_QtyToParameter);
        }
    
        public virtual int sp_Get_GlobalStockBy_BinsCode(Nullable<int> p_CompanyId, string p_Bins)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_BinsParameter = p_Bins != null ?
                new ObjectParameter("P_Bins", p_Bins) :
                new ObjectParameter("P_Bins", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Get_GlobalStockBy_BinsCode", p_CompanyIdParameter, p_BinsParameter);
        }
    
        public virtual ObjectResult<sp_Get_GlobalstockByFilters_Result> sp_Get_GlobalstockByFilters(Nullable<int> p_CompanyID, string p_UserName)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_UserNameParameter = p_UserName != null ?
                new ObjectParameter("P_UserName", p_UserName) :
                new ObjectParameter("P_UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_GlobalstockByFilters_Result>("sp_Get_GlobalstockByFilters", p_CompanyIDParameter, p_UserNameParameter);
        }
    
        public virtual ObjectResult<sp_Get_VirtualQty_BySKUCondition_Result> sp_Get_VirtualQty_BySKUCondition(Nullable<int> companyID, string productSKU, string condition, Nullable<int> typeInventory, Nullable<int> p_WarehouseID, Nullable<int> p_LocationID, Nullable<int> p_BinID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(string));
    
            var typeInventoryParameter = typeInventory.HasValue ?
                new ObjectParameter("TypeInventory", typeInventory) :
                new ObjectParameter("TypeInventory", typeof(int));
    
            var p_WarehouseIDParameter = p_WarehouseID.HasValue ?
                new ObjectParameter("P_WarehouseID", p_WarehouseID) :
                new ObjectParameter("P_WarehouseID", typeof(int));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_VirtualQty_BySKUCondition_Result>("sp_Get_VirtualQty_BySKUCondition", companyIDParameter, productSKUParameter, conditionParameter, typeInventoryParameter, p_WarehouseIDParameter, p_LocationIDParameter, p_BinIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAllCategories_Result> sp_GetAllCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllCategories_Result>("sp_GetAllCategories");
        }
    
        public virtual ObjectResult<sp_GetAllCategoriesByCompany_Result> sp_GetAllCategoriesByCompany(Nullable<int> p_CompanyID)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllCategoriesByCompany_Result>("sp_GetAllCategoriesByCompany", p_CompanyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAllSKUAllBINBySKU_Result> sp_GetAllSKUAllBINBySKU(Nullable<int> p_CompanyID, string p_ProductSKU)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_ProductSKUParameter = p_ProductSKU != null ?
                new ObjectParameter("P_ProductSKU", p_ProductSKU) :
                new ObjectParameter("P_ProductSKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllSKUAllBINBySKU_Result>("sp_GetAllSKUAllBINBySKU", p_CompanyIDParameter, p_ProductSKUParameter);
        }
    
        public virtual ObjectResult<sp_GetAllSKUGlobalStockByCompany_Result> sp_GetAllSKUGlobalStockByCompany(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllSKUGlobalStockByCompany_Result>("sp_GetAllSKUGlobalStockByCompany", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetBinInventoryReport_Result> sp_GetBinInventoryReport(Nullable<int> p_CompanyID)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBinInventoryReport_Result>("sp_GetBinInventoryReport", p_CompanyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetBinInventoryReportBySearch_Result> sp_GetBinInventoryReportBySearch(Nullable<int> p_CompanyID, string p_SEARCH)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_SEARCHParameter = p_SEARCH != null ?
                new ObjectParameter("P_SEARCH", p_SEARCH) :
                new ObjectParameter("P_SEARCH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBinInventoryReportBySearch_Result>("sp_GetBinInventoryReportBySearch", p_CompanyIDParameter, p_SEARCHParameter);
        }
    
        public virtual int sp_GetBinMovementsInQuickOutput(Nullable<int> companyID, Nullable<int> locationID, Nullable<int> binMovementTypeID, string movementBy, Nullable<int> binMovementID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var binMovementTypeIDParameter = binMovementTypeID.HasValue ?
                new ObjectParameter("BinMovementTypeID", binMovementTypeID) :
                new ObjectParameter("BinMovementTypeID", typeof(int));
    
            var movementByParameter = movementBy != null ?
                new ObjectParameter("MovementBy", movementBy) :
                new ObjectParameter("MovementBy", typeof(string));
    
            var binMovementIDParameter = binMovementID.HasValue ?
                new ObjectParameter("BinMovementID", binMovementID) :
                new ObjectParameter("BinMovementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetBinMovementsInQuickOutput", companyIDParameter, locationIDParameter, binMovementTypeIDParameter, movementByParameter, binMovementIDParameter);
        }
    
        public virtual ObjectResult<sp_GetBinMovementTypesByAction_Result> sp_GetBinMovementTypesByAction(Nullable<int> action, Nullable<bool> isTransfer, Nullable<int> companyID)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var isTransferParameter = isTransfer.HasValue ?
                new ObjectParameter("IsTransfer", isTransfer) :
                new ObjectParameter("IsTransfer", typeof(bool));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBinMovementTypesByAction_Result>("sp_GetBinMovementTypesByAction", actionParameter, isTransferParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GetBinQtyBySKU(string sKU, Nullable<int> companyID, Nullable<int> binID)
        {
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetBinQtyBySKU", sKUParameter, companyIDParameter, binIDParameter);
        }
    
        public virtual int sp_GetBinsFromWarehouseLocationByCompany(string search, Nullable<int> companyID, Nullable<int> locationID, Nullable<int> action)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetBinsFromWarehouseLocationByCompany", searchParameter, companyIDParameter, locationIDParameter, actionParameter);
        }
    
        public virtual int sp_GetBinsFromWarehouseLocationByCompany_V2(string search, Nullable<int> companyID, Nullable<int> locationID, Nullable<int> action)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetBinsFromWarehouseLocationByCompany_V2", searchParameter, companyIDParameter, locationIDParameter, actionParameter);
        }
    
        public virtual int sp_GetBinsFromWLByCompanyBaseOnSearch(string search, Nullable<int> companyID, Nullable<int> locationID, Nullable<int> action)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetBinsFromWLByCompanyBaseOnSearch", searchParameter, companyIDParameter, locationIDParameter, actionParameter);
        }
    
        public virtual int sp_GetBinsFromWLByCompanyBaseOnSearch_V2(string search, Nullable<int> companyID, Nullable<int> locationID, Nullable<int> action)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetBinsFromWLByCompanyBaseOnSearch_V2", searchParameter, companyIDParameter, locationIDParameter, actionParameter);
        }
    
        public virtual ObjectResult<sp_GetBulkMovementsDetailsByBulkMovementsID_Result> sp_GetBulkMovementsDetailsByBulkMovementsID(Nullable<int> p_BulkMovementsID)
        {
            var p_BulkMovementsIDParameter = p_BulkMovementsID.HasValue ?
                new ObjectParameter("P_BulkMovementsID", p_BulkMovementsID) :
                new ObjectParameter("P_BulkMovementsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBulkMovementsDetailsByBulkMovementsID_Result>("sp_GetBulkMovementsDetailsByBulkMovementsID", p_BulkMovementsIDParameter);
        }
    
        public virtual ObjectResult<sp_GetBulkMovementsHeader_Result> sp_GetBulkMovementsHeader(Nullable<int> p_ComapnyID, string p_StartDate, string p_EndDate)
        {
            var p_ComapnyIDParameter = p_ComapnyID.HasValue ?
                new ObjectParameter("P_ComapnyID", p_ComapnyID) :
                new ObjectParameter("P_ComapnyID", typeof(int));
    
            var p_StartDateParameter = p_StartDate != null ?
                new ObjectParameter("P_StartDate", p_StartDate) :
                new ObjectParameter("P_StartDate", typeof(string));
    
            var p_EndDateParameter = p_EndDate != null ?
                new ObjectParameter("P_EndDate", p_EndDate) :
                new ObjectParameter("P_EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBulkMovementsHeader_Result>("sp_GetBulkMovementsHeader", p_ComapnyIDParameter, p_StartDateParameter, p_EndDateParameter);
        }
    
        public virtual int SP_GetCategoryBrandModel(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetCategoryBrandModel", companyIDParameter);
        }
    
        public virtual int sp_GetDisplayInformationByBin(string binCode, Nullable<int> companyID)
        {
            var binCodeParameter = binCode != null ?
                new ObjectParameter("BinCode", binCode) :
                new ObjectParameter("BinCode", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetDisplayInformationByBin", binCodeParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDisplayInformationBySerialNumber_Result> sp_GetDisplayInformationBySerialNumber(string serialNumber, Nullable<int> companyID)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDisplayInformationBySerialNumber_Result>("sp_GetDisplayInformationBySerialNumber", serialNumberParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDisplayInformationBySKU_Result> sp_GetDisplayInformationBySKU(string sKU, Nullable<int> companyID, Nullable<int> binID)
        {
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDisplayInformationBySKU_Result>("sp_GetDisplayInformationBySKU", sKUParameter, companyIDParameter, binIDParameter);
        }
    
        public virtual int sp_GetInfoAutoCompleteBySearch(string search, Nullable<int> company, Nullable<bool> haveInventory)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyParameter = company.HasValue ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(int));
    
            var haveInventoryParameter = haveInventory.HasValue ?
                new ObjectParameter("HaveInventory", haveInventory) :
                new ObjectParameter("HaveInventory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetInfoAutoCompleteBySearch", searchParameter, companyParameter, haveInventoryParameter);
        }
    
        public virtual ObjectResult<sp_GetInformationTotalBySKU_Result> sp_GetInformationTotalBySKU(string sKU, Nullable<int> companyID)
        {
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInformationTotalBySKU_Result>("sp_GetInformationTotalBySKU", sKUParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetInfoSKUs_Result> sp_GetInfoSKUs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInfoSKUs_Result>("sp_GetInfoSKUs");
        }
    
        public virtual ObjectResult<sp_GetInventoryReportBySearchBin_Result> sp_GetInventoryReportBySearchBin(Nullable<int> p_CompanyID, string p_SEARCH)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_SEARCHParameter = p_SEARCH != null ?
                new ObjectParameter("P_SEARCH", p_SEARCH) :
                new ObjectParameter("P_SEARCH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInventoryReportBySearchBin_Result>("sp_GetInventoryReportBySearchBin", p_CompanyIDParameter, p_SEARCHParameter);
        }
    
        public virtual ObjectResult<string> SP_GetJasonforLPN()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetJasonforLPN");
        }
    
        public virtual int SP_GetJasonforLPNv2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetJasonforLPNv2");
        }
    
        public virtual int sp_GetLast100EntrancesSavedInQuickInput(Nullable<int> companyID, string userEmail, Nullable<int> locationID, Nullable<int> movementId)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var movementIdParameter = movementId.HasValue ?
                new ObjectParameter("MovementId", movementId) :
                new ObjectParameter("MovementId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetLast100EntrancesSavedInQuickInput", companyIDParameter, userEmailParameter, locationIDParameter, movementIdParameter);
        }
    
        public virtual ObjectResult<sp_GetLicenseplate_ByBinContent_Result> sp_GetLicenseplate_ByBinContent(Nullable<int> companyID, string lCN, Nullable<int> p_LocationID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var lCNParameter = lCN != null ?
                new ObjectParameter("LCN", lCN) :
                new ObjectParameter("LCN", typeof(string));
    
            var p_LocationIDParameter = p_LocationID.HasValue ?
                new ObjectParameter("P_LocationID", p_LocationID) :
                new ObjectParameter("P_LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLicenseplate_ByBinContent_Result>("sp_GetLicenseplate_ByBinContent", companyIDParameter, lCNParameter, p_LocationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetLicenseplate_ByBulkMovement_Result> sp_GetLicenseplate_ByBulkMovement(Nullable<int> p_BulkMovementsID)
        {
            var p_BulkMovementsIDParameter = p_BulkMovementsID.HasValue ?
                new ObjectParameter("P_BulkMovementsID", p_BulkMovementsID) :
                new ObjectParameter("P_BulkMovementsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLicenseplate_ByBulkMovement_Result>("sp_GetLicenseplate_ByBulkMovement", p_BulkMovementsIDParameter);
        }
    
        public virtual ObjectResult<SP_GetLocationsByCompanyAndUser_Result> SP_GetLocationsByCompanyAndUser(Nullable<int> companyId, string userEmail)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetLocationsByCompanyAndUser_Result>("SP_GetLocationsByCompanyAndUser", companyIdParameter, userEmailParameter);
        }
    
        public virtual int sp_GetMovementHistoryByBinCode(string binCode, Nullable<int> companyId)
        {
            var binCodeParameter = binCode != null ?
                new ObjectParameter("BinCode", binCode) :
                new ObjectParameter("BinCode", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetMovementHistoryByBinCode", binCodeParameter, companyIdParameter);
        }
    
        public virtual int sp_GetMovementHistoryBySerialNumber(string serialNumber, Nullable<int> companyId)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetMovementHistoryBySerialNumber", serialNumberParameter, companyIdParameter);
        }
    
        public virtual int sp_GetMovementHistoryBySku(string productSku, Nullable<int> companyId)
        {
            var productSkuParameter = productSku != null ?
                new ObjectParameter("ProductSku", productSku) :
                new ObjectParameter("ProductSku", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetMovementHistoryBySku", productSkuParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<sp_GetMovementHistoryBySku_Condition_Result> sp_GetMovementHistoryBySku_Condition(Nullable<int> companyId, string productSku)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var productSkuParameter = productSku != null ?
                new ObjectParameter("ProductSku", productSku) :
                new ObjectParameter("ProductSku", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMovementHistoryBySku_Condition_Result>("sp_GetMovementHistoryBySku_Condition", companyIdParameter, productSkuParameter);
        }
    
        public virtual ObjectResult<sp_GetProductSKUListbyBinID_Result> sp_GetProductSKUListbyBinID(Nullable<int> binID, Nullable<int> companyID)
        {
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProductSKUListbyBinID_Result>("sp_GetProductSKUListbyBinID", binIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetsDetailInformationByBulkMovementId_Result> sp_GetsDetailInformationByBulkMovementId(Nullable<int> bulkMvmtId)
        {
            var bulkMvmtIdParameter = bulkMvmtId.HasValue ?
                new ObjectParameter("BulkMvmtId", bulkMvmtId) :
                new ObjectParameter("BulkMvmtId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetsDetailInformationByBulkMovementId_Result>("sp_GetsDetailInformationByBulkMovementId", bulkMvmtIdParameter);
        }
    
        public virtual int sp_GetSKUBySerialNumber(Nullable<int> companyID, string serialNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetSKUBySerialNumber", companyIDParameter, serialNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetSKUsCostsReport_Result> sp_GetSKUsCostsReport(Nullable<int> p_CompanyID)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSKUsCostsReport_Result>("sp_GetSKUsCostsReport", p_CompanyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSuggestedWarehouseLocation_Result> sp_GetSuggestedWarehouseLocation(string brand, string model)
        {
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSuggestedWarehouseLocation_Result>("sp_GetSuggestedWarehouseLocation", brandParameter, modelParameter);
        }
    
        public virtual ObjectResult<sp_GetTypeOfMovementDetailsBySearch_Result> sp_GetTypeOfMovementDetailsBySearch(string search, Nullable<int> companyID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTypeOfMovementDetailsBySearch_Result>("sp_GetTypeOfMovementDetailsBySearch", searchParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetWarehouseLocationByCompany_Result> sp_GetWarehouseLocationByCompany(string search, Nullable<int> companyID, Nullable<int> action, string userID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWarehouseLocationByCompany_Result>("sp_GetWarehouseLocationByCompany", searchParameter, companyIDParameter, actionParameter, userIDParameter);
        }
    
        public virtual int SP_GT_GetGlobalTransferStatusForHistoryOrCreatedView(Nullable<int> isForHistory)
        {
            var isForHistoryParameter = isForHistory.HasValue ?
                new ObjectParameter("IsForHistory", isForHistory) :
                new ObjectParameter("IsForHistory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GT_GetGlobalTransferStatusForHistoryOrCreatedView", isForHistoryParameter);
        }
    
        public virtual ObjectResult<SP_GT_GetInformationByPOIDForReports_Result> SP_GT_GetInformationByPOIDForReports(Nullable<int> pOID, Nullable<int> companyID)
        {
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GT_GetInformationByPOIDForReports_Result>("SP_GT_GetInformationByPOIDForReports", pOIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<SP_GT_GetMovementsByPOAndActionForReports_Result> SP_GT_GetMovementsByPOAndActionForReports(Nullable<int> pOID, Nullable<int> action)
        {
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GT_GetMovementsByPOAndActionForReports_Result>("SP_GT_GetMovementsByPOAndActionForReports", pOIDParameter, actionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Insert_BulkMatachbyBox(Nullable<int> p_Company_Id, Nullable<int> p_Box_Id, string p_User_Id)
        {
            var p_Company_IdParameter = p_Company_Id.HasValue ?
                new ObjectParameter("P_Company_Id", p_Company_Id) :
                new ObjectParameter("P_Company_Id", typeof(int));
    
            var p_Box_IdParameter = p_Box_Id.HasValue ?
                new ObjectParameter("P_Box_Id", p_Box_Id) :
                new ObjectParameter("P_Box_Id", typeof(int));
    
            var p_User_IdParameter = p_User_Id != null ?
                new ObjectParameter("P_User_Id", p_User_Id) :
                new ObjectParameter("P_User_Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Insert_BulkMatachbyBox", p_Company_IdParameter, p_Box_IdParameter, p_User_IdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Insert_BulkMatachbyBox_V1(Nullable<int> p_Company_Id, Nullable<int> p_Box_Id, string p_User_Id)
        {
            var p_Company_IdParameter = p_Company_Id.HasValue ?
                new ObjectParameter("P_Company_Id", p_Company_Id) :
                new ObjectParameter("P_Company_Id", typeof(int));
    
            var p_Box_IdParameter = p_Box_Id.HasValue ?
                new ObjectParameter("P_Box_Id", p_Box_Id) :
                new ObjectParameter("P_Box_Id", typeof(int));
    
            var p_User_IdParameter = p_User_Id != null ?
                new ObjectParameter("P_User_Id", p_User_Id) :
                new ObjectParameter("P_User_Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Insert_BulkMatachbyBox_V1", p_Company_IdParameter, p_Box_IdParameter, p_User_IdParameter);
        }
    
        public virtual ObjectResult<sp_Insert_BulkMatch_Result> sp_Insert_BulkMatch(Nullable<int> p_BulkID, string p_BulkLPN, Nullable<int> p_Company, Nullable<int> p_Location, string p_EnteredBy, Nullable<int> p_BinID, string p_BinCode, string p_ProductSKU, Nullable<int> p_Qty)
        {
            var p_BulkIDParameter = p_BulkID.HasValue ?
                new ObjectParameter("P_BulkID", p_BulkID) :
                new ObjectParameter("P_BulkID", typeof(int));
    
            var p_BulkLPNParameter = p_BulkLPN != null ?
                new ObjectParameter("P_BulkLPN", p_BulkLPN) :
                new ObjectParameter("P_BulkLPN", typeof(string));
    
            var p_CompanyParameter = p_Company.HasValue ?
                new ObjectParameter("P_Company", p_Company) :
                new ObjectParameter("P_Company", typeof(int));
    
            var p_LocationParameter = p_Location.HasValue ?
                new ObjectParameter("P_Location", p_Location) :
                new ObjectParameter("P_Location", typeof(int));
    
            var p_EnteredByParameter = p_EnteredBy != null ?
                new ObjectParameter("P_EnteredBy", p_EnteredBy) :
                new ObjectParameter("P_EnteredBy", typeof(string));
    
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_BinCodeParameter = p_BinCode != null ?
                new ObjectParameter("P_BinCode", p_BinCode) :
                new ObjectParameter("P_BinCode", typeof(string));
    
            var p_ProductSKUParameter = p_ProductSKU != null ?
                new ObjectParameter("P_ProductSKU", p_ProductSKU) :
                new ObjectParameter("P_ProductSKU", typeof(string));
    
            var p_QtyParameter = p_Qty.HasValue ?
                new ObjectParameter("P_Qty", p_Qty) :
                new ObjectParameter("P_Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Insert_BulkMatch_Result>("sp_Insert_BulkMatch", p_BulkIDParameter, p_BulkLPNParameter, p_CompanyParameter, p_LocationParameter, p_EnteredByParameter, p_BinIDParameter, p_BinCodeParameter, p_ProductSKUParameter, p_QtyParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_Insert_Filter_Globalstock(Nullable<int> p_CompanyID, string p_NameReport, Nullable<int> p_Inventory, Nullable<int> p_Warehouse, Nullable<int> p_Location, Nullable<int> p_Binid, string p_Search, string p_Condition, string p_Brand, string p_Model, string p_Size, string p_Category, string p_UserName)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_NameReportParameter = p_NameReport != null ?
                new ObjectParameter("P_NameReport", p_NameReport) :
                new ObjectParameter("P_NameReport", typeof(string));
    
            var p_InventoryParameter = p_Inventory.HasValue ?
                new ObjectParameter("P_Inventory", p_Inventory) :
                new ObjectParameter("P_Inventory", typeof(int));
    
            var p_WarehouseParameter = p_Warehouse.HasValue ?
                new ObjectParameter("P_Warehouse", p_Warehouse) :
                new ObjectParameter("P_Warehouse", typeof(int));
    
            var p_LocationParameter = p_Location.HasValue ?
                new ObjectParameter("P_Location", p_Location) :
                new ObjectParameter("P_Location", typeof(int));
    
            var p_BinidParameter = p_Binid.HasValue ?
                new ObjectParameter("P_Binid", p_Binid) :
                new ObjectParameter("P_Binid", typeof(int));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            var p_SizeParameter = p_Size != null ?
                new ObjectParameter("P_Size", p_Size) :
                new ObjectParameter("P_Size", typeof(string));
    
            var p_CategoryParameter = p_Category != null ?
                new ObjectParameter("P_Category", p_Category) :
                new ObjectParameter("P_Category", typeof(string));
    
            var p_UserNameParameter = p_UserName != null ?
                new ObjectParameter("P_UserName", p_UserName) :
                new ObjectParameter("P_UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_Insert_Filter_Globalstock", p_CompanyIDParameter, p_NameReportParameter, p_InventoryParameter, p_WarehouseParameter, p_LocationParameter, p_BinidParameter, p_SearchParameter, p_ConditionParameter, p_BrandParameter, p_ModelParameter, p_SizeParameter, p_CategoryParameter, p_UserNameParameter);
        }
    
        public virtual ObjectResult<sp_InsertBinInputOutputStock_Result> sp_InsertBinInputOutputStock(Nullable<int> companyID, Nullable<int> binID, string productSKU, Nullable<int> qty, string serialNumber, Nullable<int> binMTypeID, string comments, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var binMTypeIDParameter = binMTypeID.HasValue ?
                new ObjectParameter("BinMTypeID", binMTypeID) :
                new ObjectParameter("BinMTypeID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertBinInputOutputStock_Result>("sp_InsertBinInputOutputStock", companyIDParameter, binIDParameter, productSKUParameter, qtyParameter, serialNumberParameter, binMTypeIDParameter, commentsParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_InsertGlobalTransferDetailPO(Nullable<int> globalTransferID, Nullable<int> fromCompanyID, string productSKU, Nullable<int> quantity)
        {
            var globalTransferIDParameter = globalTransferID.HasValue ?
                new ObjectParameter("GlobalTransferID", globalTransferID) :
                new ObjectParameter("GlobalTransferID", typeof(int));
    
            var fromCompanyIDParameter = fromCompanyID.HasValue ?
                new ObjectParameter("FromCompanyID", fromCompanyID) :
                new ObjectParameter("FromCompanyID", typeof(int));
    
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_InsertGlobalTransferDetailPO", globalTransferIDParameter, fromCompanyIDParameter, productSKUParameter, quantityParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_InsertPrintingListbyMovementID(Nullable<int> binMovementID, Nullable<int> printerID)
        {
            var binMovementIDParameter = binMovementID.HasValue ?
                new ObjectParameter("BinMovementID", binMovementID) :
                new ObjectParameter("BinMovementID", typeof(int));
    
            var printerIDParameter = printerID.HasValue ?
                new ObjectParameter("PrinterID", printerID) :
                new ObjectParameter("PrinterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_InsertPrintingListbyMovementID", binMovementIDParameter, printerIDParameter);
        }
    
        public virtual int sp_MergeBoughtsGmbHSKUDataToBinManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MergeBoughtsGmbHSKUDataToBinManager");
        }
    
        public virtual int sp_MergeBoughtsSKUDataToBinManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MergeBoughtsSKUDataToBinManager");
        }
    
        public virtual int sp_MergeMiTechSKUDataToBinManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MergeMiTechSKUDataToBinManager");
        }
    
        public virtual int sp_MergePulseSKUDataToBinManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MergePulseSKUDataToBinManager");
        }
    
        public virtual int sp_MergeSohnenSKUDataToBinManager(string sKU)
        {
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MergeSohnenSKUDataToBinManager", sKUParameter);
        }
    
        public virtual ObjectResult<SP_MR_GetAllActionTypes_Result> SP_MR_GetAllActionTypes(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MR_GetAllActionTypes_Result>("SP_MR_GetAllActionTypes", companyIdParameter);
        }
    
        public virtual ObjectResult<SP_MR_GetLast1000MovementsHistoryBySkuOrBinCodeAndCompanyId_Result> SP_MR_GetLast1000MovementsHistoryBySkuOrBinCodeAndCompanyId(string skuOrBIn, Nullable<int> companyId)
        {
            var skuOrBInParameter = skuOrBIn != null ?
                new ObjectParameter("SkuOrBIn", skuOrBIn) :
                new ObjectParameter("SkuOrBIn", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MR_GetLast1000MovementsHistoryBySkuOrBinCodeAndCompanyId_Result>("SP_MR_GetLast1000MovementsHistoryBySkuOrBinCodeAndCompanyId", skuOrBInParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<SP_MR_GetLast500MovementsByCompanyId_Result> SP_MR_GetLast500MovementsByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MR_GetLast500MovementsByCompanyId_Result>("SP_MR_GetLast500MovementsByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<SP_MR_GetLocationsByCompanyID_Result> SP_MR_GetLocationsByCompanyID(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MR_GetLocationsByCompanyID_Result>("SP_MR_GetLocationsByCompanyID", companyIdParameter);
        }
    
        public virtual ObjectResult<SP_MR_GetMovementsHistoryByCompanyIdAndDateRanges_Result> SP_MR_GetMovementsHistoryByCompanyIdAndDateRanges(Nullable<int> companyId, string startDate, string endDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MR_GetMovementsHistoryByCompanyIdAndDateRanges_Result>("SP_MR_GetMovementsHistoryByCompanyIdAndDateRanges", companyIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_MR_GetMovementsHIstoryBySkuOrBinByDateRanges_Result> SP_MR_GetMovementsHIstoryBySkuOrBinByDateRanges(string skuOrBin, Nullable<int> companyId, string startDate, string endDate)
        {
            var skuOrBinParameter = skuOrBin != null ?
                new ObjectParameter("SkuOrBin", skuOrBin) :
                new ObjectParameter("SkuOrBin", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MR_GetMovementsHIstoryBySkuOrBinByDateRanges_Result>("SP_MR_GetMovementsHIstoryBySkuOrBinByDateRanges", skuOrBinParameter, companyIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_PA_GetCompanyListByUser_Result> sp_PA_GetCompanyListByUser(Nullable<int> users_Id)
        {
            var users_IdParameter = users_Id.HasValue ?
                new ObjectParameter("Users_Id", users_Id) :
                new ObjectParameter("Users_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PA_GetCompanyListByUser_Result>("sp_PA_GetCompanyListByUser", users_IdParameter);
        }
    
        public virtual ObjectResult<sp_PA_GetCompanyProductSKUList_Result> sp_PA_GetCompanyProductSKUList(Nullable<int> companyID, string categoryID, string search)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PA_GetCompanyProductSKUList_Result>("sp_PA_GetCompanyProductSKUList", companyIDParameter, categoryIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<sp_PA_GetPrintingListByPrinterID_Result> sp_PA_GetPrintingListByPrinterID(Nullable<int> printerID, Nullable<bool> isPrinted)
        {
            var printerIDParameter = printerID.HasValue ?
                new ObjectParameter("PrinterID", printerID) :
                new ObjectParameter("PrinterID", typeof(int));
    
            var isPrintedParameter = isPrinted.HasValue ?
                new ObjectParameter("isPrinted", isPrinted) :
                new ObjectParameter("isPrinted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PA_GetPrintingListByPrinterID_Result>("sp_PA_GetPrintingListByPrinterID", printerIDParameter, isPrintedParameter);
        }
    
        public virtual ObjectResult<sp_PA_GetWarehouseListByCompany_Result> sp_PA_GetWarehouseListByCompany(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PA_GetWarehouseListByCompany_Result>("sp_PA_GetWarehouseListByCompany", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_PA_UpdatePrintingListbyList(Nullable<int> listID, Nullable<int> companyID)
        {
            var listIDParameter = listID.HasValue ?
                new ObjectParameter("ListID", listID) :
                new ObjectParameter("ListID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_PA_UpdatePrintingListbyList", listIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<string> SP_SynchronizeGlobalStockByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_SynchronizeGlobalStockByCompanyId", companyIdParameter);
        }
    
        public virtual int sp_SyncupSkusList(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SyncupSkusList", companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_TransferStockFromSKUorBin(Nullable<int> companyID, string fromBinID, string toBinID, string productSKU, Nullable<int> qty, string serialNumber, Nullable<int> binMTypeID, string comments, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromBinIDParameter = fromBinID != null ?
                new ObjectParameter("FromBinID", fromBinID) :
                new ObjectParameter("FromBinID", typeof(string));
    
            var toBinIDParameter = toBinID != null ?
                new ObjectParameter("ToBinID", toBinID) :
                new ObjectParameter("ToBinID", typeof(string));
    
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var binMTypeIDParameter = binMTypeID.HasValue ?
                new ObjectParameter("BinMTypeID", binMTypeID) :
                new ObjectParameter("BinMTypeID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_TransferStockFromSKUorBin", companyIDParameter, fromBinIDParameter, toBinIDParameter, productSKUParameter, qtyParameter, serialNumberParameter, binMTypeIDParameter, commentsParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_Update_BulkMatchByID_Result> sp_Update_BulkMatchByID(Nullable<int> p_BulkID, string p_UserName)
        {
            var p_BulkIDParameter = p_BulkID.HasValue ?
                new ObjectParameter("P_BulkID", p_BulkID) :
                new ObjectParameter("P_BulkID", typeof(int));
    
            var p_UserNameParameter = p_UserName != null ?
                new ObjectParameter("P_UserName", p_UserName) :
                new ObjectParameter("P_UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Update_BulkMatchByID_Result>("sp_Update_BulkMatchByID", p_BulkIDParameter, p_UserNameParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_UpdateFilter_Globalstock(Nullable<int> p_CompanyId, string p_UserId, Nullable<int> p_Id, Nullable<bool> p_Isactive, Nullable<bool> p_IsDefault)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_UserIdParameter = p_UserId != null ?
                new ObjectParameter("P_UserId", p_UserId) :
                new ObjectParameter("P_UserId", typeof(string));
    
            var p_IdParameter = p_Id.HasValue ?
                new ObjectParameter("P_Id", p_Id) :
                new ObjectParameter("P_Id", typeof(int));
    
            var p_IsactiveParameter = p_Isactive.HasValue ?
                new ObjectParameter("P_Isactive", p_Isactive) :
                new ObjectParameter("P_Isactive", typeof(bool));
    
            var p_IsDefaultParameter = p_IsDefault.HasValue ?
                new ObjectParameter("P_IsDefault", p_IsDefault) :
                new ObjectParameter("P_IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_UpdateFilter_Globalstock", p_CompanyIdParameter, p_UserIdParameter, p_IdParameter, p_IsactiveParameter, p_IsDefaultParameter);
        }
    
        public virtual ObjectResult<sp_ConceptsSelectAddUpdateDelete_Result> sp_ConceptsSelectAddUpdateDelete(Nullable<int> action, Nullable<int> conceptID, string type, Nullable<int> countryID, Nullable<bool> apply_IGI, Nullable<bool> apply_IVA, Nullable<bool> apply_eComMarketplaceFee, string uSER)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var conceptIDParameter = conceptID.HasValue ?
                new ObjectParameter("ConceptID", conceptID) :
                new ObjectParameter("ConceptID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var apply_IGIParameter = apply_IGI.HasValue ?
                new ObjectParameter("Apply_IGI", apply_IGI) :
                new ObjectParameter("Apply_IGI", typeof(bool));
    
            var apply_IVAParameter = apply_IVA.HasValue ?
                new ObjectParameter("Apply_IVA", apply_IVA) :
                new ObjectParameter("Apply_IVA", typeof(bool));
    
            var apply_eComMarketplaceFeeParameter = apply_eComMarketplaceFee.HasValue ?
                new ObjectParameter("Apply_eComMarketplaceFee", apply_eComMarketplaceFee) :
                new ObjectParameter("Apply_eComMarketplaceFee", typeof(bool));
    
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ConceptsSelectAddUpdateDelete_Result>("sp_ConceptsSelectAddUpdateDelete", actionParameter, conceptIDParameter, typeParameter, countryIDParameter, apply_IGIParameter, apply_IVAParameter, apply_eComMarketplaceFeeParameter, uSERParameter);
        }
    
        public virtual ObjectResult<sp_CountriesSelectAddUpdateDelete_Result> sp_CountriesSelectAddUpdateDelete(Nullable<int> action, Nullable<int> countryID, string name, string code, string uSER)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CountriesSelectAddUpdateDelete_Result>("sp_CountriesSelectAddUpdateDelete", actionParameter, countryIDParameter, nameParameter, codeParameter, uSERParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_Delete_Report_Email(string p_ID)
        {
            var p_IDParameter = p_ID != null ?
                new ObjectParameter("P_ID", p_ID) :
                new ObjectParameter("P_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_Delete_Report_Email", p_IDParameter);
        }
    
        public virtual ObjectResult<sp_eCommMarketplaceFeeSelectAddUpdateDelete_Result> sp_eCommMarketplaceFeeSelectAddUpdateDelete(Nullable<int> action, Nullable<int> eCommMarketplaceFeeID, Nullable<int> conceptID, Nullable<int> percentage, string uSER)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var eCommMarketplaceFeeIDParameter = eCommMarketplaceFeeID.HasValue ?
                new ObjectParameter("eCommMarketplaceFeeID", eCommMarketplaceFeeID) :
                new ObjectParameter("eCommMarketplaceFeeID", typeof(int));
    
            var conceptIDParameter = conceptID.HasValue ?
                new ObjectParameter("ConceptID", conceptID) :
                new ObjectParameter("ConceptID", typeof(int));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(int));
    
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_eCommMarketplaceFeeSelectAddUpdateDelete_Result>("sp_eCommMarketplaceFeeSelectAddUpdateDelete", actionParameter, eCommMarketplaceFeeIDParameter, conceptIDParameter, percentageParameter, uSERParameter);
        }
    
        public virtual ObjectResult<sp_ExchageRatesSelectAddUpdateDelete_Result> sp_ExchageRatesSelectAddUpdateDelete(Nullable<int> action, Nullable<int> exchangeRateID, string currency, Nullable<decimal> rate, Nullable<bool> isFirst, string uSER)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var exchangeRateIDParameter = exchangeRateID.HasValue ?
                new ObjectParameter("ExchangeRateID", exchangeRateID) :
                new ObjectParameter("ExchangeRateID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var isFirstParameter = isFirst.HasValue ?
                new ObjectParameter("isFirst", isFirst) :
                new ObjectParameter("isFirst", typeof(bool));
    
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ExchageRatesSelectAddUpdateDelete_Result>("sp_ExchageRatesSelectAddUpdateDelete", actionParameter, exchangeRateIDParameter, currencyParameter, rateParameter, isFirstParameter, uSERParameter);
        }
    
        public virtual ObjectResult<sp_GetReport_Email_Result> sp_GetReport_Email(string p_UserID, Nullable<int> p_ReportType)
        {
            var p_UserIDParameter = p_UserID != null ?
                new ObjectParameter("P_UserID", p_UserID) :
                new ObjectParameter("P_UserID", typeof(string));
    
            var p_ReportTypeParameter = p_ReportType.HasValue ?
                new ObjectParameter("P_ReportType", p_ReportType) :
                new ObjectParameter("P_ReportType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReport_Email_Result>("sp_GetReport_Email", p_UserIDParameter, p_ReportTypeParameter);
        }
    
        public virtual ObjectResult<sp_IGISelectAddUpdateDelete_Result> sp_IGISelectAddUpdateDelete(Nullable<int> action, Nullable<int> iGIID, Nullable<int> companyID, Nullable<int> categoryID, string origin, Nullable<int> percentage, string uSER)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var iGIIDParameter = iGIID.HasValue ?
                new ObjectParameter("IGIID", iGIID) :
                new ObjectParameter("IGIID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var originParameter = origin != null ?
                new ObjectParameter("Origin", origin) :
                new ObjectParameter("Origin", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(int));
    
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IGISelectAddUpdateDelete_Result>("sp_IGISelectAddUpdateDelete", actionParameter, iGIIDParameter, companyIDParameter, categoryIDParameter, originParameter, percentageParameter, uSERParameter);
        }
    
        public virtual int sp_InsertUpdate_NewEmailReportfile(Nullable<int> p_ID, Nullable<int> p_FilterID, Nullable<int> p_TriggerID, Nullable<int> p_FileTypeID, string p_Subject, string p_EnteredBy, string p_JSONEMAILS)
        {
            var p_IDParameter = p_ID.HasValue ?
                new ObjectParameter("P_ID", p_ID) :
                new ObjectParameter("P_ID", typeof(int));
    
            var p_FilterIDParameter = p_FilterID.HasValue ?
                new ObjectParameter("P_FilterID", p_FilterID) :
                new ObjectParameter("P_FilterID", typeof(int));
    
            var p_TriggerIDParameter = p_TriggerID.HasValue ?
                new ObjectParameter("P_TriggerID", p_TriggerID) :
                new ObjectParameter("P_TriggerID", typeof(int));
    
            var p_FileTypeIDParameter = p_FileTypeID.HasValue ?
                new ObjectParameter("P_FileTypeID", p_FileTypeID) :
                new ObjectParameter("P_FileTypeID", typeof(int));
    
            var p_SubjectParameter = p_Subject != null ?
                new ObjectParameter("P_Subject", p_Subject) :
                new ObjectParameter("P_Subject", typeof(string));
    
            var p_EnteredByParameter = p_EnteredBy != null ?
                new ObjectParameter("P_EnteredBy", p_EnteredBy) :
                new ObjectParameter("P_EnteredBy", typeof(string));
    
            var p_JSONEMAILSParameter = p_JSONEMAILS != null ?
                new ObjectParameter("P_JSONEMAILS", p_JSONEMAILS) :
                new ObjectParameter("P_JSONEMAILS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdate_NewEmailReportfile", p_IDParameter, p_FilterIDParameter, p_TriggerIDParameter, p_FileTypeIDParameter, p_SubjectParameter, p_EnteredByParameter, p_JSONEMAILSParameter);
        }
    
        public virtual ObjectResult<sp_IVASelectAddUpdateDelete_Result> sp_IVASelectAddUpdateDelete(Nullable<int> action, Nullable<int> iVAID, Nullable<int> percentage, Nullable<int> companyID, string uSER)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var iVAIDParameter = iVAID.HasValue ?
                new ObjectParameter("IVAID", iVAID) :
                new ObjectParameter("IVAID", typeof(int));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IVASelectAddUpdateDelete_Result>("sp_IVASelectAddUpdateDelete", actionParameter, iVAIDParameter, percentageParameter, companyIDParameter, uSERParameter);
        }
    
        public virtual ObjectResult<sp_TierSelectAddUpdateDelete_Result> sp_TierSelectAddUpdateDelete(Nullable<int> action, Nullable<int> pID, Nullable<int> pTierID, string pCategory, string pTierName, string pTierDescription, string pUser)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));
    
            var pTierIDParameter = pTierID.HasValue ?
                new ObjectParameter("PTierID", pTierID) :
                new ObjectParameter("PTierID", typeof(int));
    
            var pCategoryParameter = pCategory != null ?
                new ObjectParameter("PCategory", pCategory) :
                new ObjectParameter("PCategory", typeof(string));
    
            var pTierNameParameter = pTierName != null ?
                new ObjectParameter("PTierName", pTierName) :
                new ObjectParameter("PTierName", typeof(string));
    
            var pTierDescriptionParameter = pTierDescription != null ?
                new ObjectParameter("PTierDescription", pTierDescription) :
                new ObjectParameter("PTierDescription", typeof(string));
    
            var pUserParameter = pUser != null ?
                new ObjectParameter("PUser", pUser) :
                new ObjectParameter("PUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TierSelectAddUpdateDelete_Result>("sp_TierSelectAddUpdateDelete", actionParameter, pIDParameter, pTierIDParameter, pCategoryParameter, pTierNameParameter, pTierDescriptionParameter, pUserParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_Get_GlobalStock_InventoryBySKU_PriceStores1_Result> sp_Get_GlobalStock_InventoryBySKU_PriceStores1(string p_SKU, string p_DateStart, string p_DateEnd)
        {
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_GlobalStock_InventoryBySKU_PriceStores1_Result>("sp_Get_GlobalStock_InventoryBySKU_PriceStores1", p_SKUParameter, p_DateStartParameter, p_DateEndParameter);
        }
    
        public virtual ObjectResult<sp_Get_GlobalStock_InventoryBySKU_PriceStores_v2_Result> sp_Get_GlobalStock_InventoryBySKU_PriceStores_v2(string p_SKU, string p_DateStart, string p_DateEnd)
        {
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_GlobalStock_InventoryBySKU_PriceStores_v2_Result>("sp_Get_GlobalStock_InventoryBySKU_PriceStores_v2", p_SKUParameter, p_DateStartParameter, p_DateEndParameter);
        }
    
        public virtual ObjectResult<sp_Get_GlobalStock_InventoryBySKU_PriceStores_v3_Result> sp_Get_GlobalStock_InventoryBySKU_PriceStores_v3(string p_SKU, string p_DateStart, string p_DateEnd)
        {
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_GlobalStock_InventoryBySKU_PriceStores_v3_Result>("sp_Get_GlobalStock_InventoryBySKU_PriceStores_v3", p_SKUParameter, p_DateStartParameter, p_DateEndParameter);
        }
    
        public virtual ObjectResult<sp_GetGlobalSKUConditionHistoryID_Result> sp_GetGlobalSKUConditionHistoryID(string p_SKU, string p_DateStart, string p_DateEnd, string p_Condition)
        {
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGlobalSKUConditionHistoryID_Result>("sp_GetGlobalSKUConditionHistoryID", p_SKUParameter, p_DateStartParameter, p_DateEndParameter, p_ConditionParameter);
        }
    
        public virtual int sp_GetProductCatalogImages(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetProductCatalogImages", companyIDParameter);
        }
    
        public virtual int sp_GetProductCatalogImagesBySKU(Nullable<int> companyID, string p_SKU)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetProductCatalogImagesBySKU", companyIDParameter, p_SKUParameter);
        }
    
        public virtual int sp_GetProductFeatures()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetProductFeatures");
        }
    
        public virtual int spGlobalStockGetBinRetailPriceHistory(Nullable<int> p_BinID, string p_DateStart, string p_DateEnd)
        {
            var p_BinIDParameter = p_BinID.HasValue ?
                new ObjectParameter("P_BinID", p_BinID) :
                new ObjectParameter("P_BinID", typeof(int));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGlobalStockGetBinRetailPriceHistory", p_BinIDParameter, p_DateStartParameter, p_DateEndParameter);
        }
    
        public virtual ObjectResult<sp_MarketplaceManagement_InsertUpdate_Result> sp_MarketplaceManagement_InsertUpdate(Nullable<int> p_MarketplaceItemID, Nullable<int> p_MarketplaceID, string p_MarketplaceListingID, Nullable<int> p_CategoryID, Nullable<int> p_MarketplaceSKUTypeID, string p_MarketpalceSKU, string p_Condition, string p_ListingURL, Nullable<bool> p_IsListingOwner, Nullable<bool> p_IsActive, Nullable<int> p_Priority, string p_MITSKU1, Nullable<int> p_Qty1, string p_MITSKU2, Nullable<int> p_Qty2, string p_MITSKU3, Nullable<int> p_Qty3, string p_Notes)
        {
            var p_MarketplaceItemIDParameter = p_MarketplaceItemID.HasValue ?
                new ObjectParameter("P_MarketplaceItemID", p_MarketplaceItemID) :
                new ObjectParameter("P_MarketplaceItemID", typeof(int));
    
            var p_MarketplaceIDParameter = p_MarketplaceID.HasValue ?
                new ObjectParameter("P_MarketplaceID", p_MarketplaceID) :
                new ObjectParameter("P_MarketplaceID", typeof(int));
    
            var p_MarketplaceListingIDParameter = p_MarketplaceListingID != null ?
                new ObjectParameter("P_MarketplaceListingID", p_MarketplaceListingID) :
                new ObjectParameter("P_MarketplaceListingID", typeof(string));
    
            var p_CategoryIDParameter = p_CategoryID.HasValue ?
                new ObjectParameter("P_CategoryID", p_CategoryID) :
                new ObjectParameter("P_CategoryID", typeof(int));
    
            var p_MarketplaceSKUTypeIDParameter = p_MarketplaceSKUTypeID.HasValue ?
                new ObjectParameter("P_MarketplaceSKUTypeID", p_MarketplaceSKUTypeID) :
                new ObjectParameter("P_MarketplaceSKUTypeID", typeof(int));
    
            var p_MarketpalceSKUParameter = p_MarketpalceSKU != null ?
                new ObjectParameter("P_MarketpalceSKU", p_MarketpalceSKU) :
                new ObjectParameter("P_MarketpalceSKU", typeof(string));
    
            var p_ConditionParameter = p_Condition != null ?
                new ObjectParameter("P_Condition", p_Condition) :
                new ObjectParameter("P_Condition", typeof(string));
    
            var p_ListingURLParameter = p_ListingURL != null ?
                new ObjectParameter("P_ListingURL", p_ListingURL) :
                new ObjectParameter("P_ListingURL", typeof(string));
    
            var p_IsListingOwnerParameter = p_IsListingOwner.HasValue ?
                new ObjectParameter("P_IsListingOwner", p_IsListingOwner) :
                new ObjectParameter("P_IsListingOwner", typeof(bool));
    
            var p_IsActiveParameter = p_IsActive.HasValue ?
                new ObjectParameter("P_IsActive", p_IsActive) :
                new ObjectParameter("P_IsActive", typeof(bool));
    
            var p_PriorityParameter = p_Priority.HasValue ?
                new ObjectParameter("P_Priority", p_Priority) :
                new ObjectParameter("P_Priority", typeof(int));
    
            var p_MITSKU1Parameter = p_MITSKU1 != null ?
                new ObjectParameter("P_MITSKU1", p_MITSKU1) :
                new ObjectParameter("P_MITSKU1", typeof(string));
    
            var p_Qty1Parameter = p_Qty1.HasValue ?
                new ObjectParameter("P_Qty1", p_Qty1) :
                new ObjectParameter("P_Qty1", typeof(int));
    
            var p_MITSKU2Parameter = p_MITSKU2 != null ?
                new ObjectParameter("P_MITSKU2", p_MITSKU2) :
                new ObjectParameter("P_MITSKU2", typeof(string));
    
            var p_Qty2Parameter = p_Qty2.HasValue ?
                new ObjectParameter("P_Qty2", p_Qty2) :
                new ObjectParameter("P_Qty2", typeof(int));
    
            var p_MITSKU3Parameter = p_MITSKU3 != null ?
                new ObjectParameter("P_MITSKU3", p_MITSKU3) :
                new ObjectParameter("P_MITSKU3", typeof(string));
    
            var p_Qty3Parameter = p_Qty3.HasValue ?
                new ObjectParameter("P_Qty3", p_Qty3) :
                new ObjectParameter("P_Qty3", typeof(int));
    
            var p_NotesParameter = p_Notes != null ?
                new ObjectParameter("P_Notes", p_Notes) :
                new ObjectParameter("P_Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MarketplaceManagement_InsertUpdate_Result>("sp_MarketplaceManagement_InsertUpdate", p_MarketplaceItemIDParameter, p_MarketplaceIDParameter, p_MarketplaceListingIDParameter, p_CategoryIDParameter, p_MarketplaceSKUTypeIDParameter, p_MarketpalceSKUParameter, p_ConditionParameter, p_ListingURLParameter, p_IsListingOwnerParameter, p_IsActiveParameter, p_PriorityParameter, p_MITSKU1Parameter, p_Qty1Parameter, p_MITSKU2Parameter, p_Qty2Parameter, p_MITSKU3Parameter, p_Qty3Parameter, p_NotesParameter);
        }
    
        public virtual ObjectResult<sp_PriceCalculationSelectAddUpdateDelete_Result> sp_PriceCalculationSelectAddUpdateDelete(Nullable<int> action, string sKU, Nullable<int> companyID, string priceCalculationJSON)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var priceCalculationJSONParameter = priceCalculationJSON != null ?
                new ObjectParameter("PriceCalculationJSON", priceCalculationJSON) :
                new ObjectParameter("PriceCalculationJSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PriceCalculationSelectAddUpdateDelete_Result>("sp_PriceCalculationSelectAddUpdateDelete", actionParameter, sKUParameter, companyIDParameter, priceCalculationJSONParameter);
        }
    
        public virtual int sp_PriceCalculationSelectAddUpdateDelete_V2(Nullable<int> action, string sKU, Nullable<int> companyID, string priceCalculationJSON)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var priceCalculationJSONParameter = priceCalculationJSON != null ?
                new ObjectParameter("PriceCalculationJSON", priceCalculationJSON) :
                new ObjectParameter("PriceCalculationJSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PriceCalculationSelectAddUpdateDelete_V2", actionParameter, sKUParameter, companyIDParameter, priceCalculationJSONParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_CreateWorkOrderByCompany(Nullable<int> wOTypeID, Nullable<int> isPriority, string comments, Nullable<int> companyID, string userID)
        {
            var wOTypeIDParameter = wOTypeID.HasValue ?
                new ObjectParameter("WOTypeID", wOTypeID) :
                new ObjectParameter("WOTypeID", typeof(int));
    
            var isPriorityParameter = isPriority.HasValue ?
                new ObjectParameter("isPriority", isPriority) :
                new ObjectParameter("isPriority", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CreateWorkOrderByCompany", wOTypeIDParameter, isPriorityParameter, commentsParameter, companyIDParameter, userIDParameter);
        }
    
        public virtual int sp_GetAssemblyDetailsBinByProductSKU(string productSKU, Nullable<int> company)
        {
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var companyParameter = company.HasValue ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAssemblyDetailsBinByProductSKU", productSKUParameter, companyParameter);
        }
    
        public virtual int sp_GetAssemblyDetailsByProductSKU(string productSKU, Nullable<int> company)
        {
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var companyParameter = company.HasValue ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAssemblyDetailsByProductSKU", productSKUParameter, companyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GetNextStatus(Nullable<int> statusID)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetNextStatus", statusIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPlanningProductSKUbyCompany_Result> sp_GetPlanningProductSKUbyCompany(Nullable<int> companyID, string search)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPlanningProductSKUbyCompany_Result>("sp_GetPlanningProductSKUbyCompany", companyIDParameter, searchParameter);
        }
    
        public virtual int sp_GetPlanningWOsStep(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetPlanningWOsStep", companyIDParameter);
        }
    
        public virtual int sp_GetProductionWOsStep(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetProductionWOsStep", companyIDParameter);
        }
    
        public virtual int sp_GetWarehouseWOsStep(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetWarehouseWOsStep", companyIDParameter);
        }
    
        public virtual int sp_InsertHistoryWorkOrder(Nullable<int> workOrderID, Nullable<int> statusID, string comment, string userID)
        {
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertHistoryWorkOrder", workOrderIDParameter, statusIDParameter, commentParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_InsertWorkOrderDetail(Nullable<int> workOrderID, string productSKU, Nullable<int> qty, string userID, Nullable<int> companyID)
        {
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_InsertWorkOrderDetail", workOrderIDParameter, productSKUParameter, qtyParameter, userIDParameter, companyIDParameter);
        }
    
        public virtual int sp_SupplyStockforWorkOrder(Nullable<int> companyID, Nullable<int> workOrder, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workOrderParameter = workOrder.HasValue ?
                new ObjectParameter("WorkOrder", workOrder) :
                new ObjectParameter("WorkOrder", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SupplyStockforWorkOrder", companyIDParameter, workOrderParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_UpdateStatusWorkOrder(Nullable<int> companyID, Nullable<int> workOrderID, Nullable<int> statusID, string comments, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_UpdateStatusWorkOrder", companyIDParameter, workOrderIDParameter, statusIDParameter, commentsParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateWorkOrder_Result> sp_UpdateWorkOrder(Nullable<int> workOrderID, Nullable<int> companyID, Nullable<int> wOTypeID, Nullable<int> isPriority, string comments, string userID)
        {
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var wOTypeIDParameter = wOTypeID.HasValue ?
                new ObjectParameter("WOTypeID", wOTypeID) :
                new ObjectParameter("WOTypeID", typeof(int));
    
            var isPriorityParameter = isPriority.HasValue ?
                new ObjectParameter("isPriority", isPriority) :
                new ObjectParameter("isPriority", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateWorkOrder_Result>("sp_UpdateWorkOrder", workOrderIDParameter, companyIDParameter, wOTypeIDParameter, isPriorityParameter, commentsParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_UpdateWorkOrderDetail(Nullable<int> workOrderID, Nullable<int> companyID, string productSKU, Nullable<int> qty, Nullable<bool> isActive, string userID)
        {
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var productSKUParameter = productSKU != null ?
                new ObjectParameter("ProductSKU", productSKU) :
                new ObjectParameter("ProductSKU", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_UpdateWorkOrderDetail", workOrderIDParameter, companyIDParameter, productSKUParameter, qtyParameter, isActiveParameter, userIDParameter);
        }
    
        public virtual ObjectResult<spr_CartOrder_Confirm_Result> spr_CartOrder_Confirm(Nullable<int> p_ORDERNUMBER, string p_USERNAME, string p_COMMENT)
        {
            var p_ORDERNUMBERParameter = p_ORDERNUMBER.HasValue ?
                new ObjectParameter("P_ORDERNUMBER", p_ORDERNUMBER) :
                new ObjectParameter("P_ORDERNUMBER", typeof(int));
    
            var p_USERNAMEParameter = p_USERNAME != null ?
                new ObjectParameter("P_USERNAME", p_USERNAME) :
                new ObjectParameter("P_USERNAME", typeof(string));
    
            var p_COMMENTParameter = p_COMMENT != null ?
                new ObjectParameter("P_COMMENT", p_COMMENT) :
                new ObjectParameter("P_COMMENT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_CartOrder_Confirm_Result>("spr_CartOrder_Confirm", p_ORDERNUMBERParameter, p_USERNAMEParameter, p_COMMENTParameter);
        }
    
        public virtual ObjectResult<spr_CartOrder_Delete_BinOrPallet_Result> spr_CartOrder_Delete_BinOrPallet(Nullable<int> p_ORDERNUMBER, Nullable<int> p_BIN, Nullable<int> p_PALLET, Nullable<int> p_DELETEBIN)
        {
            var p_ORDERNUMBERParameter = p_ORDERNUMBER.HasValue ?
                new ObjectParameter("P_ORDERNUMBER", p_ORDERNUMBER) :
                new ObjectParameter("P_ORDERNUMBER", typeof(int));
    
            var p_BINParameter = p_BIN.HasValue ?
                new ObjectParameter("P_BIN", p_BIN) :
                new ObjectParameter("P_BIN", typeof(int));
    
            var p_PALLETParameter = p_PALLET.HasValue ?
                new ObjectParameter("P_PALLET", p_PALLET) :
                new ObjectParameter("P_PALLET", typeof(int));
    
            var p_DELETEBINParameter = p_DELETEBIN.HasValue ?
                new ObjectParameter("P_DELETEBIN", p_DELETEBIN) :
                new ObjectParameter("P_DELETEBIN", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_CartOrder_Delete_BinOrPallet_Result>("spr_CartOrder_Delete_BinOrPallet", p_ORDERNUMBERParameter, p_BINParameter, p_PALLETParameter, p_DELETEBINParameter);
        }
    
        public virtual int spr_CartOrder_GetByOrderNumber(Nullable<int> p_OrderNumber)
        {
            var p_OrderNumberParameter = p_OrderNumber.HasValue ?
                new ObjectParameter("P_OrderNumber", p_OrderNumber) :
                new ObjectParameter("P_OrderNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_CartOrder_GetByOrderNumber", p_OrderNumberParameter);
        }
    
        public virtual int spr_CartOrder_GetByUser(string p_UserID)
        {
            var p_UserIDParameter = p_UserID != null ?
                new ObjectParameter("P_UserID", p_UserID) :
                new ObjectParameter("P_UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_CartOrder_GetByUser", p_UserIDParameter);
        }
    
        public virtual int spr_CartOrder_GetCartList_FinishByUser(string p_UserID)
        {
            var p_UserIDParameter = p_UserID != null ?
                new ObjectParameter("P_UserID", p_UserID) :
                new ObjectParameter("P_UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_CartOrder_GetCartList_FinishByUser", p_UserIDParameter);
        }
    
        public virtual int spr_CartOrder_GetOtherUsers(string p_UserID)
        {
            var p_UserIDParameter = p_UserID != null ?
                new ObjectParameter("P_UserID", p_UserID) :
                new ObjectParameter("P_UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_CartOrder_GetOtherUsers", p_UserIDParameter);
        }
    
        public virtual int spr_CartOrder_Insert(Nullable<int> p_BINID, Nullable<int> p_BINQTY, Nullable<decimal> p_BINPRICE, string p_JSONDETAILS, string p_USERNAME)
        {
            var p_BINIDParameter = p_BINID.HasValue ?
                new ObjectParameter("P_BINID", p_BINID) :
                new ObjectParameter("P_BINID", typeof(int));
    
            var p_BINQTYParameter = p_BINQTY.HasValue ?
                new ObjectParameter("P_BINQTY", p_BINQTY) :
                new ObjectParameter("P_BINQTY", typeof(int));
    
            var p_BINPRICEParameter = p_BINPRICE.HasValue ?
                new ObjectParameter("P_BINPRICE", p_BINPRICE) :
                new ObjectParameter("P_BINPRICE", typeof(decimal));
    
            var p_JSONDETAILSParameter = p_JSONDETAILS != null ?
                new ObjectParameter("P_JSONDETAILS", p_JSONDETAILS) :
                new ObjectParameter("P_JSONDETAILS", typeof(string));
    
            var p_USERNAMEParameter = p_USERNAME != null ?
                new ObjectParameter("P_USERNAME", p_USERNAME) :
                new ObjectParameter("P_USERNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_CartOrder_Insert", p_BINIDParameter, p_BINQTYParameter, p_BINPRICEParameter, p_JSONDETAILSParameter, p_USERNAMEParameter);
        }
    }
}
