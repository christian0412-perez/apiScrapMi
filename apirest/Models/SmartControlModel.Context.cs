//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace apirest.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SmartControlEntities1 : DbContext
    {
        public SmartControlEntities1()
            : base("name=SmartControlEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AssignmentPage> AssignmentPages { get; set; }
        public virtual DbSet<Assignment> Assignments { get; set; }
        public virtual DbSet<CompaniesUserAssigned> CompaniesUserAssigneds { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<LogPageHit> LogPageHits { get; set; }
        public virtual DbSet<LogSession> LogSessions { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<UserArea> UserAreas { get; set; }
        public virtual DbSet<UserAssignment> UserAssignments { get; set; }
        public virtual DbSet<UserConfiguration> UserConfigurations { get; set; }
        public virtual DbSet<UserRol> UserRols { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsersLogin> UsersLogins { get; set; }
        public virtual DbSet<UsersSupplier> UsersSuppliers { get; set; }
        public virtual DbSet<CategoryComment> CategoryComments { get; set; }
        public virtual DbSet<Customer_CategorybyModel> Customer_CategorybyModel { get; set; }
        public virtual DbSet<Customer_Classification> Customer_Classification { get; set; }
        public virtual DbSet<Customer_History> Customer_History { get; set; }
        public virtual DbSet<CustomerMessage> CustomerMessages { get; set; }
        public virtual DbSet<CustomerMessagesHit> CustomerMessagesHits { get; set; }
        public virtual DbSet<CustomerMessagesInternalNote> CustomerMessagesInternalNotes { get; set; }
        public virtual DbSet<CustomerMessagesMovement> CustomerMessagesMovements { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<ItemType> ItemTypes { get; set; }
        public virtual DbSet<OpenCellPart> OpenCellParts { get; set; }
        public virtual DbSet<PackagingType> PackagingTypes { get; set; }
        public virtual DbSet<PrintingList> PrintingLists { get; set; }
        public virtual DbSet<PrintingListDetail> PrintingListDetails { get; set; }
        public virtual DbSet<PurchaseSite> PurchaseSites { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<SKUData> SKUDatas { get; set; }
        public virtual DbSet<SKUModel> SKUModels { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<CountryCode> CountryCodes { get; set; }
        public virtual DbSet<DescriptionData> DescriptionDatas { get; set; }
        public virtual DbSet<InventoryNumber> InventoryNumbers { get; set; }
        public virtual DbSet<LanguageCode> LanguageCodes { get; set; }
        public virtual DbSet<MarketplaceAccount> MarketplaceAccounts { get; set; }
        public virtual DbSet<MarketplaceAttribute> MarketplaceAttributes { get; set; }
        public virtual DbSet<MarketplaceCountry> MarketplaceCountries { get; set; }
        public virtual DbSet<MarketplaceMapping> MarketplaceMappings { get; set; }
        public virtual DbSet<MarketplaceMerchantSKU> MarketplaceMerchantSKUs { get; set; }
        public virtual DbSet<SKUData1> SKUData1 { get; set; }
        public virtual DbSet<SKUImagesType> SKUImagesTypes { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyCategory> CompanyCategories { get; set; }
        public virtual DbSet<LicensePlateNumber> LicensePlateNumbers { get; set; }
        public virtual DbSet<OpenCellChange> OpenCellChanges { get; set; }
        public virtual DbSet<OpenCellData> OpenCellDatas { get; set; }
        public virtual DbSet<OpenCellDataImage> OpenCellDataImages { get; set; }
        public virtual DbSet<OpencellDefect> OpencellDefects { get; set; }
        public virtual DbSet<OpenCellDetail> OpenCellDetails { get; set; }
        public virtual DbSet<OpenCellDetailImage> OpenCellDetailImages { get; set; }
        public virtual DbSet<OpenCellPartsData> OpenCellPartsDatas { get; set; }
        public virtual DbSet<OpenCellPartsDataDetail> OpenCellPartsDataDetails { get; set; }
        public virtual DbSet<upcData> upcDatas { get; set; }
        public virtual DbSet<ValidSerialnumber> ValidSerialnumbers { get; set; }
        public virtual DbSet<WorkCenterRouting> WorkCenterRoutings { get; set; }
        public virtual DbSet<WorkCenter> WorkCenters { get; set; }
        public virtual DbSet<WorkOrderDetail> WorkOrderDetails { get; set; }
        public virtual DbSet<WorkOrderHistory> WorkOrderHistories { get; set; }
        public virtual DbSet<WorkOrderInspection> WorkOrderInspections { get; set; }
        public virtual DbSet<WorkOrderInspectionArea> WorkOrderInspectionAreas { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<WorkOrderStatu> WorkOrderStatus { get; set; }
        public virtual DbSet<WorkPlan> WorkPlans { get; set; }
        public virtual DbSet<WorkPlanAccessoriesClassification> WorkPlanAccessoriesClassifications { get; set; }
        public virtual DbSet<WorkPlanInspection> WorkPlanInspections { get; set; }
        public virtual DbSet<WorkPlanItemAccessory> WorkPlanItemAccessories { get; set; }
        public virtual DbSet<WorkPlanItemAccessoriesCheckList> WorkPlanItemAccessoriesCheckLists { get; set; }
        public virtual DbSet<WorkPlanItemClassification> WorkPlanItemClassifications { get; set; }
        public virtual DbSet<WorkPlanItemPackage> WorkPlanItemPackages { get; set; }
        public virtual DbSet<WorkPlanItemPackageCondition> WorkPlanItemPackageConditions { get; set; }
        public virtual DbSet<WorkPlanItemPacking> WorkPlanItemPackings { get; set; }
        public virtual DbSet<WorkPlanItemPhoto> WorkPlanItemPhotoes { get; set; }
        public virtual DbSet<WorkPlanItemPhotoKey> WorkPlanItemPhotoKeys { get; set; }
        public virtual DbSet<WorkPlanPackaging> WorkPlanPackagings { get; set; }
        public virtual DbSet<WorkPlanPackagingClassification> WorkPlanPackagingClassifications { get; set; }
        public virtual DbSet<WorkPlanPackagingDetail> WorkPlanPackagingDetails { get; set; }
        public virtual DbSet<WorkPlanRepairApplied> WorkPlanRepairApplieds { get; set; }
        public virtual DbSet<WorkPlanRepairAwaiting> WorkPlanRepairAwaitings { get; set; }
        public virtual DbSet<WorkPlanRepairFailure> WorkPlanRepairFailures { get; set; }
        public virtual DbSet<WorkPlanRepairHistory> WorkPlanRepairHistories { get; set; }
        public virtual DbSet<WorkPlanRepair> WorkPlanRepairs { get; set; }
        public virtual DbSet<WorkPlanRepairStatu> WorkPlanRepairStatus { get; set; }
        public virtual DbSet<WorkPlanRepairTechnician> WorkPlanRepairTechnicians { get; set; }
        public virtual DbSet<WorkPlanTRGID> WorkPlanTRGIDs { get; set; }
        public virtual DbSet<CostHistory> CostHistories { get; set; }
        public virtual DbSet<PurchaseDetail> PurchaseDetails { get; set; }
        public virtual DbSet<PurchasePalletDetail> PurchasePalletDetails { get; set; }
        public virtual DbSet<PurchasePallet> PurchasePallets { get; set; }
        public virtual DbSet<Purchases1> Purchases1 { get; set; }
        public virtual DbSet<SupplierCode> SupplierCodes { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SKURetailLink> SKURetailLinks { get; set; }
        public virtual DbSet<SKURetailLinksDetail> SKURetailLinksDetails { get; set; }
        public virtual DbSet<SKURetailLinksDetailHistory> SKURetailLinksDetailHistories { get; set; }
        public virtual DbSet<MessageDetail> MessageDetails { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<MessagesDepartment> MessagesDepartments { get; set; }
        public virtual DbSet<MessagesEmail> MessagesEmails { get; set; }
        public virtual DbSet<AssignedUser> AssignedUsers { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<StatusChanx> StatusChanges { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<TagByTicket> TagByTickets { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<Exchange_rate> Exchange_rate { get; set; }
        public virtual DbSet<Exchange_rate_history> Exchange_rate_history { get; set; }
        public virtual DbSet<SKUImage> SKUImages { get; set; }
        public virtual DbSet<History_TrgidByModel> History_TrgidByModel { get; set; }
        public virtual DbSet<vw_ChannelAdvisor_Autobot_MX_CL_TV_NEW_GRB> vw_ChannelAdvisor_Autobot_MX_CL_TV_NEW_GRB { get; set; }
        public virtual DbSet<vw_OpenCellChangeIncompatible> vw_OpenCellChangeIncompatible { get; set; }
        public virtual DbSet<vw_WorkCenters> vw_WorkCenters { get; set; }
        public virtual DbSet<vw_WorkCentersReport> vw_WorkCentersReport { get; set; }
        public virtual DbSet<vw_WorkPlanItemClassifications> vw_WorkPlanItemClassifications { get; set; }
        public virtual DbSet<POWorkOrder> POWorkOrders { get; set; }
        public virtual DbSet<vw_Purchases> vw_Purchases { get; set; }
        public virtual DbSet<vw_Suppliers> vw_Suppliers { get; set; }
        public virtual DbSet<vw_UrlByStores> vw_UrlByStores { get; set; }
        public virtual DbSet<vw_UrlByStores_v2> vw_UrlByStores_v2 { get; set; }
    
        [DbFunction("SmartControlEntities1", "fnSplit")]
        public virtual IQueryable<fnSplit_Result> fnSplit(string list, string delimiter)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplit_Result>("[SmartControlEntities1].[fnSplit](@List, @Delimiter)", listParameter, delimiterParameter);
        }
    
        [DbFunction("SmartControlEntities1", "fn_GetClassificationsSteps")]
        public virtual IQueryable<fn_GetClassificationsSteps_Result> fn_GetClassificationsSteps(Nullable<bool> needAccessories, Nullable<bool> needComment, Nullable<bool> needPhoto, Nullable<int> steps)
        {
            var needAccessoriesParameter = needAccessories.HasValue ?
                new ObjectParameter("NeedAccessories", needAccessories) :
                new ObjectParameter("NeedAccessories", typeof(bool));
    
            var needCommentParameter = needComment.HasValue ?
                new ObjectParameter("NeedComment", needComment) :
                new ObjectParameter("NeedComment", typeof(bool));
    
            var needPhotoParameter = needPhoto.HasValue ?
                new ObjectParameter("NeedPhoto", needPhoto) :
                new ObjectParameter("NeedPhoto", typeof(bool));
    
            var stepsParameter = steps.HasValue ?
                new ObjectParameter("Steps", steps) :
                new ObjectParameter("Steps", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetClassificationsSteps_Result>("[SmartControlEntities1].[fn_GetClassificationsSteps](@NeedAccessories, @NeedComment, @NeedPhoto, @Steps)", needAccessoriesParameter, needCommentParameter, needPhotoParameter, stepsParameter);
        }
    
        [DbFunction("SmartControlEntities1", "fn_GetOpenCellDefectiveCodes")]
        public virtual IQueryable<fn_GetOpenCellDefectiveCodes_Result> fn_GetOpenCellDefectiveCodes(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetOpenCellDefectiveCodes_Result>("[SmartControlEntities1].[fn_GetOpenCellDefectiveCodes](@CompanyID)", companyIDParameter);
        }
    
        [DbFunction("SmartControlEntities1", "fn_GetOpenCellOriginCountry")]
        public virtual IQueryable<fn_GetOpenCellOriginCountry_Result> fn_GetOpenCellOriginCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetOpenCellOriginCountry_Result>("[SmartControlEntities1].[fn_GetOpenCellOriginCountry]()");
        }
    
        [DbFunction("SmartControlEntities1", "fn_GetValidSerialNumberOrModelbyPO")]
        public virtual IQueryable<fn_GetValidSerialNumberOrModelbyPO_Result> fn_GetValidSerialNumberOrModelbyPO(Nullable<int> companyID, Nullable<int> purchaseID, string tRGID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetValidSerialNumberOrModelbyPO_Result>("[SmartControlEntities1].[fn_GetValidSerialNumberOrModelbyPO](@CompanyID, @PurchaseID, @TRGID)", companyIDParameter, purchaseIDParameter, tRGIDParameter);
        }
    
        [DbFunction("SmartControlEntities1", "fn_GetPriorityName")]
        public virtual IQueryable<fn_GetPriorityName_Result> fn_GetPriorityName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetPriorityName_Result>("[SmartControlEntities1].[fn_GetPriorityName]()");
        }
    
        [DbFunction("SmartControlEntities1", "fn_GetStatusName")]
        public virtual IQueryable<fn_GetStatusName_Result> fn_GetStatusName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetStatusName_Result>("[SmartControlEntities1].[fn_GetStatusName]()");
        }
    
        [DbFunction("SmartControlEntities1", "fn_GetStatusTicketName")]
        public virtual IQueryable<fn_GetStatusTicketName_Result> fn_GetStatusTicketName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetStatusTicketName_Result>("[SmartControlEntities1].[fn_GetStatusTicketName]()");
        }
    
        public virtual ObjectResult<sp_deleteUserLogin_Result> sp_deleteUserLogin(Nullable<int> userID, string userName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_deleteUserLogin_Result>("sp_deleteUserLogin", userIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<sp_GetCompanyMenuStructure_Result> sp_GetCompanyMenuStructure(Nullable<int> companyID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompanyMenuStructure_Result>("sp_GetCompanyMenuStructure", companyIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetLoginUserValidation_Result> sp_GetLoginUserValidation(string user, string pass, string ipAddress, string systemType, string loginType)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var systemTypeParameter = systemType != null ?
                new ObjectParameter("SystemType", systemType) :
                new ObjectParameter("SystemType", typeof(string));
    
            var loginTypeParameter = loginType != null ?
                new ObjectParameter("LoginType", loginType) :
                new ObjectParameter("LoginType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLoginUserValidation_Result>("sp_GetLoginUserValidation", userParameter, passParameter, ipAddressParameter, systemTypeParameter, loginTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetUserLogin_Result> sp_GetUserLogin(Nullable<int> departamentID, Nullable<int> rolId, Nullable<bool> active)
        {
            var departamentIDParameter = departamentID.HasValue ?
                new ObjectParameter("DepartamentID", departamentID) :
                new ObjectParameter("DepartamentID", typeof(int));
    
            var rolIdParameter = rolId.HasValue ?
                new ObjectParameter("RolId", rolId) :
                new ObjectParameter("RolId", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserLogin_Result>("sp_GetUserLogin", departamentIDParameter, rolIdParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_GetUserSupervisorValidation_Result> sp_GetUserSupervisorValidation(string uSER, string pASSWORD)
        {
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            var pASSWORDParameter = pASSWORD != null ?
                new ObjectParameter("PASSWORD", pASSWORD) :
                new ObjectParameter("PASSWORD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserSupervisorValidation_Result>("sp_GetUserSupervisorValidation", uSERParameter, pASSWORDParameter);
        }
    
        public virtual ObjectResult<sp_InsertUsers_Result> sp_InsertUsers(string createUser, string name, string lastName, string userName, string password, Nullable<int> rolId, Nullable<int> departamentId, Nullable<int> areaId, string qrCode, Nullable<int> workID)
        {
            var createUserParameter = createUser != null ?
                new ObjectParameter("CreateUser", createUser) :
                new ObjectParameter("CreateUser", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var rolIdParameter = rolId.HasValue ?
                new ObjectParameter("RolId", rolId) :
                new ObjectParameter("RolId", typeof(int));
    
            var departamentIdParameter = departamentId.HasValue ?
                new ObjectParameter("DepartamentId", departamentId) :
                new ObjectParameter("DepartamentId", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(int));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("QrCode", qrCode) :
                new ObjectParameter("QrCode", typeof(string));
    
            var workIDParameter = workID.HasValue ?
                new ObjectParameter("workID", workID) :
                new ObjectParameter("workID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertUsers_Result>("sp_InsertUsers", createUserParameter, nameParameter, lastNameParameter, userNameParameter, passwordParameter, rolIdParameter, departamentIdParameter, areaIdParameter, qrCodeParameter, workIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdatePasswordByUser_Result> sp_UpdatePasswordByUser(string userID, string password, string newPassword)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdatePasswordByUser_Result>("sp_UpdatePasswordByUser", userIDParameter, passwordParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<sp_UpdatePassWordGeneralUser_Result> sp_UpdatePassWordGeneralUser(string userName, string newPassword, string qrCode)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("QrCode", qrCode) :
                new ObjectParameter("QrCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdatePassWordGeneralUser_Result>("sp_UpdatePassWordGeneralUser", userNameParameter, newPasswordParameter, qrCodeParameter);
        }
    
        public virtual ObjectResult<sp_UpdateUser_Result> sp_UpdateUser(Nullable<int> userID, string newPassword, Nullable<bool> isActive, string qrCode, string userEdit, Nullable<int> workID, Nullable<int> deptoID, Nullable<int> areaID, Nullable<int> rolID, string name, string lastName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("QrCode", qrCode) :
                new ObjectParameter("QrCode", typeof(string));
    
            var userEditParameter = userEdit != null ?
                new ObjectParameter("UserEdit", userEdit) :
                new ObjectParameter("UserEdit", typeof(string));
    
            var workIDParameter = workID.HasValue ?
                new ObjectParameter("WorkID", workID) :
                new ObjectParameter("WorkID", typeof(int));
    
            var deptoIDParameter = deptoID.HasValue ?
                new ObjectParameter("deptoID", deptoID) :
                new ObjectParameter("deptoID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateUser_Result>("sp_UpdateUser", userIDParameter, newPasswordParameter, isActiveParameter, qrCodeParameter, userEditParameter, workIDParameter, deptoIDParameter, areaIDParameter, rolIDParameter, nameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<sp_UploadUserByExcel_Result> sp_UploadUserByExcel(Nullable<int> companyID, string usersDetail, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var usersDetailParameter = usersDetail != null ?
                new ObjectParameter("UsersDetail", usersDetail) :
                new ObjectParameter("UsersDetail", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UploadUserByExcel_Result>("sp_UploadUserByExcel", companyIDParameter, usersDetailParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_ValidationUserLogin_Result> sp_ValidationUserLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ValidationUserLogin_Result>("sp_ValidationUserLogin", userNameParameter, passwordParameter);
        }
    
        public virtual int Get_ValidNoLinkBySKUS(Nullable<int> companyID, string sKUS, string store)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUSParameter = sKUS != null ?
                new ObjectParameter("SKUS", sKUS) :
                new ObjectParameter("SKUS", typeof(string));
    
            var storeParameter = store != null ?
                new ObjectParameter("Store", store) :
                new ObjectParameter("Store", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_ValidNoLinkBySKUS", companyIDParameter, sKUSParameter, storeParameter);
        }
    
        public virtual ObjectResult<InsertAndUpdate_LinkBySKU_Result> InsertAndUpdate_LinkBySKU(Nullable<int> companyID, string sKU, string link, string store, string user)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var storeParameter = store != null ?
                new ObjectParameter("Store", store) :
                new ObjectParameter("Store", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertAndUpdate_LinkBySKU_Result>("InsertAndUpdate_LinkBySKU", companyIDParameter, sKUParameter, linkParameter, storeParameter, userParameter);
        }
    
        public virtual int sp_InsertPackagingBinInputStock(Nullable<int> companyID, Nullable<int> binID, Nullable<int> binMTypeID, string comments, Nullable<int> packagingID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            var binMTypeIDParameter = binMTypeID.HasValue ?
                new ObjectParameter("BinMTypeID", binMTypeID) :
                new ObjectParameter("BinMTypeID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var packagingIDParameter = packagingID.HasValue ?
                new ObjectParameter("PackagingID", packagingID) :
                new ObjectParameter("PackagingID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertPackagingBinInputStock", companyIDParameter, binIDParameter, binMTypeIDParameter, commentsParameter, packagingIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_InsertPackagingBinInputStock2_Result> sp_InsertPackagingBinInputStock2(Nullable<int> companyID, Nullable<int> binID, Nullable<int> binMTypeID, string comments, Nullable<int> packagingID, string workCenterID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            var binMTypeIDParameter = binMTypeID.HasValue ?
                new ObjectParameter("BinMTypeID", binMTypeID) :
                new ObjectParameter("BinMTypeID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var packagingIDParameter = packagingID.HasValue ?
                new ObjectParameter("PackagingID", packagingID) :
                new ObjectParameter("PackagingID", typeof(int));
    
            var workCenterIDParameter = workCenterID != null ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertPackagingBinInputStock2_Result>("sp_InsertPackagingBinInputStock2", companyIDParameter, binIDParameter, binMTypeIDParameter, commentsParameter, packagingIDParameter, workCenterIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_ChannelAdvisor_CL_Autobot_Result> sp_ChannelAdvisor_CL_Autobot()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChannelAdvisor_CL_Autobot_Result>("sp_ChannelAdvisor_CL_Autobot");
        }
    
        public virtual ObjectResult<sp_Delete_Customer_CategorybyModel_Result> sp_Delete_Customer_CategorybyModel(Nullable<int> customer_Id, string modelo, Nullable<int> id, string userId)
        {
            var customer_IdParameter = customer_Id.HasValue ?
                new ObjectParameter("Customer_Id", customer_Id) :
                new ObjectParameter("Customer_Id", typeof(int));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("Modelo", modelo) :
                new ObjectParameter("Modelo", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Delete_Customer_CategorybyModel_Result>("sp_Delete_Customer_CategorybyModel", customer_IdParameter, modeloParameter, idParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_Delete_Customer_Classification_Result> sp_Delete_Customer_Classification(Nullable<int> customer_Id, string classification_Id, Nullable<int> id, string userId)
        {
            var customer_IdParameter = customer_Id.HasValue ?
                new ObjectParameter("Customer_Id", customer_Id) :
                new ObjectParameter("Customer_Id", typeof(int));
    
            var classification_IdParameter = classification_Id != null ?
                new ObjectParameter("Classification_Id", classification_Id) :
                new ObjectParameter("Classification_Id", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Delete_Customer_Classification_Result>("sp_Delete_Customer_Classification", customer_IdParameter, classification_IdParameter, idParameter, userIdParameter);
        }
    
        public virtual int sp_DeleteCustomers(Nullable<int> customerId, string userId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteCustomers", customerIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_GetAvailableCategoriesOrders_Result> sp_GetAvailableCategoriesOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAvailableCategoriesOrders_Result>("sp_GetAvailableCategoriesOrders");
        }
    
        public virtual ObjectResult<sp_GetCategoriesComments_Result> sp_GetCategoriesComments(Nullable<int> companyID, Nullable<int> categoryID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCategoriesComments_Result>("sp_GetCategoriesComments", companyIDParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCategoryComments_Result> sp_GetCategoryComments(Nullable<int> companyID, Nullable<int> categoryID, Nullable<int> classificationID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCategoryComments_Result>("sp_GetCategoryComments", companyIDParameter, categoryIDParameter, classificationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetClosedCustomerMessagedByDateRanges_Result> sp_GetClosedCustomerMessagedByDateRanges(string userId, string startDate, string endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetClosedCustomerMessagedByDateRanges_Result>("sp_GetClosedCustomerMessagedByDateRanges", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int sp_GetCustomerMessagesByStatus(string userId, Nullable<bool> isOpen)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var isOpenParameter = isOpen.HasValue ?
                new ObjectParameter("IsOpen", isOpen) :
                new ObjectParameter("IsOpen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetCustomerMessagesByStatus", userIdParameter, isOpenParameter);
        }
    
        public virtual ObjectResult<sp_GetCustomers__Result> sp_GetCustomers_()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCustomers__Result>("sp_GetCustomers_");
        }
    
        public virtual ObjectResult<sp_GetItemTypes_Result> sp_GetItemTypes(Nullable<int> companyID, Nullable<bool> isActive)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItemTypes_Result>("sp_GetItemTypes", companyIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_GetOpenCellPartsList_Result> sp_GetOpenCellPartsList(Nullable<int> companyID, Nullable<int> categoryID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOpenCellPartsList_Result>("sp_GetOpenCellPartsList", companyIDParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPackagingTypes_Result> sp_GetPackagingTypes(Nullable<int> companyID, Nullable<bool> isActive)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPackagingTypes_Result>("sp_GetPackagingTypes", companyIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_Insert_Customer_CategorybyModel_Result> sp_Insert_Customer_CategorybyModel(Nullable<int> companyID, Nullable<int> customer_Id, string userId, Nullable<int> category_Id, string modelo)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var customer_IdParameter = customer_Id.HasValue ?
                new ObjectParameter("Customer_Id", customer_Id) :
                new ObjectParameter("Customer_Id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var category_IdParameter = category_Id.HasValue ?
                new ObjectParameter("Category_Id", category_Id) :
                new ObjectParameter("Category_Id", typeof(int));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("Modelo", modelo) :
                new ObjectParameter("Modelo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Insert_Customer_CategorybyModel_Result>("sp_Insert_Customer_CategorybyModel", companyIDParameter, customer_IdParameter, userIdParameter, category_IdParameter, modeloParameter);
        }
    
        public virtual ObjectResult<sp_Insert_Customer_Classification_Result> sp_Insert_Customer_Classification(Nullable<int> companyID, Nullable<int> customer_Id, string userId, Nullable<int> classificationId)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var customer_IdParameter = customer_Id.HasValue ?
                new ObjectParameter("Customer_Id", customer_Id) :
                new ObjectParameter("Customer_Id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var classificationIdParameter = classificationId.HasValue ?
                new ObjectParameter("ClassificationId", classificationId) :
                new ObjectParameter("ClassificationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Insert_Customer_Classification_Result>("sp_Insert_Customer_Classification", companyIDParameter, customer_IdParameter, userIdParameter, classificationIdParameter);
        }
    
        public virtual ObjectResult<sp_InsertCustomers_Result> sp_InsertCustomers(Nullable<int> companyID, string customers_Name, string customers_Code, string userId, string customerClassification, string customerCategorybyModel)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var customers_NameParameter = customers_Name != null ?
                new ObjectParameter("Customers_Name", customers_Name) :
                new ObjectParameter("Customers_Name", typeof(string));
    
            var customers_CodeParameter = customers_Code != null ?
                new ObjectParameter("Customers_Code", customers_Code) :
                new ObjectParameter("Customers_Code", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var customerClassificationParameter = customerClassification != null ?
                new ObjectParameter("CustomerClassification", customerClassification) :
                new ObjectParameter("CustomerClassification", typeof(string));
    
            var customerCategorybyModelParameter = customerCategorybyModel != null ?
                new ObjectParameter("CustomerCategorybyModel", customerCategorybyModel) :
                new ObjectParameter("CustomerCategorybyModel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertCustomers_Result>("sp_InsertCustomers", companyIDParameter, customers_NameParameter, customers_CodeParameter, userIdParameter, customerClassificationParameter, customerCategorybyModelParameter);
        }
    
        public virtual ObjectResult<sp_SaveCategoryComments_Result> sp_SaveCategoryComments(string errorCode, Nullable<int> companyID, Nullable<int> categoryID, string labelValue, Nullable<bool> isActive, string userID, Nullable<int> commentID, Nullable<int> classificationID)
        {
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("ErrorCode", errorCode) :
                new ObjectParameter("ErrorCode", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var labelValueParameter = labelValue != null ?
                new ObjectParameter("LabelValue", labelValue) :
                new ObjectParameter("LabelValue", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaveCategoryComments_Result>("sp_SaveCategoryComments", errorCodeParameter, companyIDParameter, categoryIDParameter, labelValueParameter, isActiveParameter, userIDParameter, commentIDParameter, classificationIDParameter);
        }
    
        public virtual ObjectResult<sp_SaveItemTypes_Result> sp_SaveItemTypes(Nullable<int> companyID, string typeName, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaveItemTypes_Result>("sp_SaveItemTypes", companyIDParameter, typeNameParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_SavePackagingTypes_Result> sp_SavePackagingTypes(Nullable<int> companyID, string typeName, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SavePackagingTypes_Result>("sp_SavePackagingTypes", companyIDParameter, typeNameParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_SendEmailNewModelRequest_Result> sp_SendEmailNewModelRequest(Nullable<int> companyID, Nullable<int> purchaseID, string tRGID, string model, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SendEmailNewModelRequest_Result>("sp_SendEmailNewModelRequest", companyIDParameter, purchaseIDParameter, tRGIDParameter, modelParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_SendEmailNewModelRequest2_Result> sp_SendEmailNewModelRequest2(Nullable<int> companyID, Nullable<int> purchaseID, string tRGID, string model, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SendEmailNewModelRequest2_Result>("sp_SendEmailNewModelRequest2", companyIDParameter, purchaseIDParameter, tRGIDParameter, modelParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateActiveItemType_Result> sp_UpdateActiveItemType(Nullable<int> companyID, Nullable<int> typeID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateActiveItemType_Result>("sp_UpdateActiveItemType", companyIDParameter, typeIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateActivePackagingType_Result> sp_UpdateActivePackagingType(Nullable<int> companyID, Nullable<int> typeID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateActivePackagingType_Result>("sp_UpdateActivePackagingType", companyIDParameter, typeIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateCustomer_Result> sp_UpdateCustomer(string userID, Nullable<int> customerId, string customerName, string customerCode, Nullable<bool> active)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateCustomer_Result>("sp_UpdateCustomer", userIDParameter, customerIdParameter, customerNameParameter, customerCodeParameter, activeParameter);
        }
    
        public virtual int sp_GetDataAnalyticsExcel(Nullable<int> companyID, Nullable<int> categoryID, string pO, Nullable<int> screenSize, string brand, string model, string sKU)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var pOParameter = pO != null ?
                new ObjectParameter("PO", pO) :
                new ObjectParameter("PO", typeof(string));
    
            var screenSizeParameter = screenSize.HasValue ?
                new ObjectParameter("ScreenSize", screenSize) :
                new ObjectParameter("ScreenSize", typeof(int));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetDataAnalyticsExcel", companyIDParameter, categoryIDParameter, pOParameter, screenSizeParameter, brandParameter, modelParameter, sKUParameter);
        }
    
        public virtual int sp_GetKPIDataAnalyticsReport(Nullable<int> companyID, Nullable<int> categoryID, string dateStart, string dateEnd, string pO, Nullable<int> screenSize, string brand, string model, string sKU)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var dateStartParameter = dateStart != null ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(string));
    
            var dateEndParameter = dateEnd != null ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(string));
    
            var pOParameter = pO != null ?
                new ObjectParameter("PO", pO) :
                new ObjectParameter("PO", typeof(string));
    
            var screenSizeParameter = screenSize.HasValue ?
                new ObjectParameter("ScreenSize", screenSize) :
                new ObjectParameter("ScreenSize", typeof(int));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetKPIDataAnalyticsReport", companyIDParameter, categoryIDParameter, dateStartParameter, dateEndParameter, pOParameter, screenSizeParameter, brandParameter, modelParameter, sKUParameter);
        }
    
        public virtual ObjectResult<string> sp_GetPOBrand(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetPOBrand", companyIDParameter);
        }
    
        public virtual ObjectResult<string> sp_GetPOModel(Nullable<int> companyID, string brand)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetPOModel", companyIDParameter, brandParameter);
        }
    
        public virtual int sp_GetProductCatalog(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetProductCatalog", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPurchaseHistory_Result> sp_GetPurchaseHistory(Nullable<int> companyID, string loadDateStart, string loadDateEnd)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var loadDateStartParameter = loadDateStart != null ?
                new ObjectParameter("LoadDateStart", loadDateStart) :
                new ObjectParameter("LoadDateStart", typeof(string));
    
            var loadDateEndParameter = loadDateEnd != null ?
                new ObjectParameter("LoadDateEnd", loadDateEnd) :
                new ObjectParameter("LoadDateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPurchaseHistory_Result>("sp_GetPurchaseHistory", companyIDParameter, loadDateStartParameter, loadDateEndParameter);
        }
    
        public virtual ObjectResult<sp_GetPurchases_Result> sp_GetPurchases(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPurchases_Result>("sp_GetPurchases", companyIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int ValidateUPC(string uPC, ObjectParameter isValid)
        {
            var uPCParameter = uPC != null ?
                new ObjectParameter("UPC", uPC) :
                new ObjectParameter("UPC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidateUPC", uPCParameter, isValid);
        }
    
        public virtual ObjectResult<sp_GetActiveWorkOrders_Result> sp_GetActiveWorkOrders(Nullable<int> companyID, string wOType, Nullable<int> userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetActiveWorkOrders_Result>("sp_GetActiveWorkOrders", companyIDParameter, wOTypeParameter, userIDParameter);
        }
    
        public virtual int sp_GetOrdersDashboard(string categoryID, string search)
        {
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetOrdersDashboard", categoryIDParameter, searchParameter);
        }
    
        public virtual int sp_GetOrdersDashboardBySKU(string categoryID, Nullable<int> shipType, Nullable<int> sKU, Nullable<bool> orderType, string search)
        {
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var shipTypeParameter = shipType.HasValue ?
                new ObjectParameter("ShipType", shipType) :
                new ObjectParameter("ShipType", typeof(int));
    
            var sKUParameter = sKU.HasValue ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(int));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(bool));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetOrdersDashboardBySKU", categoryIDParameter, shipTypeParameter, sKUParameter, orderTypeParameter, searchParameter);
        }
    
        public virtual int sp_GetProductionWorkOrderPlanDashboard(Nullable<int> companyID, Nullable<int> workOrderID, string wOType, Nullable<int> userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetProductionWorkOrderPlanDashboard", companyIDParameter, workOrderIDParameter, wOTypeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_ActiveDeleteMerchantSKU_Result> sp_ActiveDeleteMerchantSKU(Nullable<int> companyID, Nullable<int> merchantID, string merchantSKU, string aSIN, Nullable<int> accountID, Nullable<bool> isDelete, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var merchantIDParameter = merchantID.HasValue ?
                new ObjectParameter("MerchantID", merchantID) :
                new ObjectParameter("MerchantID", typeof(int));
    
            var merchantSKUParameter = merchantSKU != null ?
                new ObjectParameter("MerchantSKU", merchantSKU) :
                new ObjectParameter("MerchantSKU", typeof(string));
    
            var aSINParameter = aSIN != null ?
                new ObjectParameter("ASIN", aSIN) :
                new ObjectParameter("ASIN", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ActiveDeleteMerchantSKU_Result>("sp_ActiveDeleteMerchantSKU", companyIDParameter, merchantIDParameter, merchantSKUParameter, aSINParameter, accountIDParameter, isDeleteParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_ActiveDeleteSKUImages_Result> sp_ActiveDeleteSKUImages(Nullable<int> companyID, string sKU, Nullable<int> imageID, Nullable<bool> isDelete)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ActiveDeleteSKUImages_Result>("sp_ActiveDeleteSKUImages", companyIDParameter, sKUParameter, imageIDParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<sp_DeleteMarketplaceASIN_Result> sp_DeleteMarketplaceASIN(Nullable<int> companyID, Nullable<int> marketPlaceID, string sKU, string aSIN, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var marketPlaceIDParameter = marketPlaceID.HasValue ?
                new ObjectParameter("MarketPlaceID", marketPlaceID) :
                new ObjectParameter("MarketPlaceID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var aSINParameter = aSIN != null ?
                new ObjectParameter("ASIN", aSIN) :
                new ObjectParameter("ASIN", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeleteMarketplaceASIN_Result>("sp_DeleteMarketplaceASIN", companyIDParameter, marketPlaceIDParameter, sKUParameter, aSINParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCountryCodes_Result> sp_GetCountryCodes(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCountryCodes_Result>("sp_GetCountryCodes", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetLanguageCodes_Result> sp_GetLanguageCodes(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLanguageCodes_Result>("sp_GetLanguageCodes", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetMarketplaceAccounts_Result> sp_GetMarketplaceAccounts(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMarketplaceAccounts_Result>("sp_GetMarketplaceAccounts", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetMarketplaceMapping_Result> sp_GetMarketplaceMapping(Nullable<int> companyID, string sKU)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMarketplaceMapping_Result>("sp_GetMarketplaceMapping", companyIDParameter, sKUParameter);
        }
    
        public virtual int sp_GetSKUData(Nullable<int> companyID, Nullable<int> categoryID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetSKUData", companyIDParameter, categoryIDParameter);
        }
    
        public virtual int sp_GetSKUDataChart(Nullable<int> companyID, Nullable<int> categoryID, Nullable<bool> hasInventory)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var hasInventoryParameter = hasInventory.HasValue ?
                new ObjectParameter("hasInventory", hasInventory) :
                new ObjectParameter("hasInventory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetSKUDataChart", companyIDParameter, categoryIDParameter, hasInventoryParameter);
        }
    
        public virtual int sp_GetSKUDescription(Nullable<int> companyID, string sKU)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetSKUDescription", companyIDParameter, sKUParameter);
        }
    
        public virtual ObjectResult<sp_GetSkuDetails_Result> sp_GetSkuDetails(string p_SKU)
        {
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSkuDetails_Result>("sp_GetSkuDetails", p_SKUParameter);
        }
    
        public virtual ObjectResult<sp_GetTypeImages_Result> sp_GetTypeImages(Nullable<int> companyID, Nullable<bool> isAttach)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isAttachParameter = isAttach.HasValue ?
                new ObjectParameter("isAttach", isAttach) :
                new ObjectParameter("isAttach", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTypeImages_Result>("sp_GetTypeImages", companyIDParameter, isAttachParameter);
        }
    
        public virtual ObjectResult<sp_SaveMarketplaceASIN_Result> sp_SaveMarketplaceASIN(Nullable<int> companyID, string sKU, string aSIN, Nullable<bool> isRenewed, string countries, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var aSINParameter = aSIN != null ?
                new ObjectParameter("ASIN", aSIN) :
                new ObjectParameter("ASIN", typeof(string));
    
            var isRenewedParameter = isRenewed.HasValue ?
                new ObjectParameter("IsRenewed", isRenewed) :
                new ObjectParameter("IsRenewed", typeof(bool));
    
            var countriesParameter = countries != null ?
                new ObjectParameter("Countries", countries) :
                new ObjectParameter("Countries", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaveMarketplaceASIN_Result>("sp_SaveMarketplaceASIN", companyIDParameter, sKUParameter, aSINParameter, isRenewedParameter, countriesParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_SaveMarketplaceMerchantSKU_Result> sp_SaveMarketplaceMerchantSKU(Nullable<int> companyID, string aSIN, string merchantSKU, Nullable<int> accountID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var aSINParameter = aSIN != null ?
                new ObjectParameter("ASIN", aSIN) :
                new ObjectParameter("ASIN", typeof(string));
    
            var merchantSKUParameter = merchantSKU != null ?
                new ObjectParameter("MerchantSKU", merchantSKU) :
                new ObjectParameter("MerchantSKU", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaveMarketplaceMerchantSKU_Result>("sp_SaveMarketplaceMerchantSKU", companyIDParameter, aSINParameter, merchantSKUParameter, accountIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_SaveSKUData_Result> sp_SaveSKUData(Nullable<int> companyID, string sKU, string brand, string uPC, Nullable<decimal> unitWeight, Nullable<decimal> unitLength, Nullable<decimal> unitWidth, Nullable<decimal> unitHeight, string manufacturerPN, Nullable<int> screenSize, string userID, Nullable<int> dataID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var uPCParameter = uPC != null ?
                new ObjectParameter("UPC", uPC) :
                new ObjectParameter("UPC", typeof(string));
    
            var unitWeightParameter = unitWeight.HasValue ?
                new ObjectParameter("UnitWeight", unitWeight) :
                new ObjectParameter("UnitWeight", typeof(decimal));
    
            var unitLengthParameter = unitLength.HasValue ?
                new ObjectParameter("UnitLength", unitLength) :
                new ObjectParameter("UnitLength", typeof(decimal));
    
            var unitWidthParameter = unitWidth.HasValue ?
                new ObjectParameter("UnitWidth", unitWidth) :
                new ObjectParameter("UnitWidth", typeof(decimal));
    
            var unitHeightParameter = unitHeight.HasValue ?
                new ObjectParameter("UnitHeight", unitHeight) :
                new ObjectParameter("UnitHeight", typeof(decimal));
    
            var manufacturerPNParameter = manufacturerPN != null ?
                new ObjectParameter("ManufacturerPN", manufacturerPN) :
                new ObjectParameter("ManufacturerPN", typeof(string));
    
            var screenSizeParameter = screenSize.HasValue ?
                new ObjectParameter("ScreenSize", screenSize) :
                new ObjectParameter("ScreenSize", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var dataIDParameter = dataID.HasValue ?
                new ObjectParameter("DataID", dataID) :
                new ObjectParameter("DataID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaveSKUData_Result>("sp_SaveSKUData", companyIDParameter, sKUParameter, brandParameter, uPCParameter, unitWeightParameter, unitLengthParameter, unitWidthParameter, unitHeightParameter, manufacturerPNParameter, screenSizeParameter, userIDParameter, dataIDParameter);
        }
    
        public virtual ObjectResult<sp_SaveSKUDescriptionData_Result> sp_SaveSKUDescriptionData(Nullable<int> companyID, string sKU, Nullable<int> languageID, string title60, string title80, string title200, string bullet1, string bullet2, string bullet3, string bullet4, string bullet5, string shortDescription, string description, string searchTerms, string userID, Nullable<int> descriptionID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var title60Parameter = title60 != null ?
                new ObjectParameter("Title60", title60) :
                new ObjectParameter("Title60", typeof(string));
    
            var title80Parameter = title80 != null ?
                new ObjectParameter("Title80", title80) :
                new ObjectParameter("Title80", typeof(string));
    
            var title200Parameter = title200 != null ?
                new ObjectParameter("Title200", title200) :
                new ObjectParameter("Title200", typeof(string));
    
            var bullet1Parameter = bullet1 != null ?
                new ObjectParameter("Bullet1", bullet1) :
                new ObjectParameter("Bullet1", typeof(string));
    
            var bullet2Parameter = bullet2 != null ?
                new ObjectParameter("Bullet2", bullet2) :
                new ObjectParameter("Bullet2", typeof(string));
    
            var bullet3Parameter = bullet3 != null ?
                new ObjectParameter("Bullet3", bullet3) :
                new ObjectParameter("Bullet3", typeof(string));
    
            var bullet4Parameter = bullet4 != null ?
                new ObjectParameter("Bullet4", bullet4) :
                new ObjectParameter("Bullet4", typeof(string));
    
            var bullet5Parameter = bullet5 != null ?
                new ObjectParameter("Bullet5", bullet5) :
                new ObjectParameter("Bullet5", typeof(string));
    
            var shortDescriptionParameter = shortDescription != null ?
                new ObjectParameter("ShortDescription", shortDescription) :
                new ObjectParameter("ShortDescription", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var searchTermsParameter = searchTerms != null ?
                new ObjectParameter("SearchTerms", searchTerms) :
                new ObjectParameter("SearchTerms", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var descriptionIDParameter = descriptionID.HasValue ?
                new ObjectParameter("DescriptionID", descriptionID) :
                new ObjectParameter("DescriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaveSKUDescriptionData_Result>("sp_SaveSKUDescriptionData", companyIDParameter, sKUParameter, languageIDParameter, title60Parameter, title80Parameter, title200Parameter, bullet1Parameter, bullet2Parameter, bullet3Parameter, bullet4Parameter, bullet5Parameter, shortDescriptionParameter, descriptionParameter, searchTermsParameter, userIDParameter, descriptionIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateASINCountries_Result> sp_UpdateASINCountries(Nullable<int> companyID, Nullable<int> codeID, string aSIN, Nullable<bool> isSelected, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var codeIDParameter = codeID.HasValue ?
                new ObjectParameter("CodeID", codeID) :
                new ObjectParameter("CodeID", typeof(int));
    
            var aSINParameter = aSIN != null ?
                new ObjectParameter("ASIN", aSIN) :
                new ObjectParameter("ASIN", typeof(string));
    
            var isSelectedParameter = isSelected.HasValue ?
                new ObjectParameter("IsSelected", isSelected) :
                new ObjectParameter("IsSelected", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateASINCountries_Result>("sp_UpdateASINCountries", companyIDParameter, codeIDParameter, aSINParameter, isSelectedParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateASINIsRenewed_Result> sp_UpdateASINIsRenewed(Nullable<int> companyID, Nullable<int> marketPlaceID, string aSIN, Nullable<bool> isRenewed, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var marketPlaceIDParameter = marketPlaceID.HasValue ?
                new ObjectParameter("MarketPlaceID", marketPlaceID) :
                new ObjectParameter("MarketPlaceID", typeof(int));
    
            var aSINParameter = aSIN != null ?
                new ObjectParameter("ASIN", aSIN) :
                new ObjectParameter("ASIN", typeof(string));
    
            var isRenewedParameter = isRenewed.HasValue ?
                new ObjectParameter("IsRenewed", isRenewed) :
                new ObjectParameter("IsRenewed", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateASINIsRenewed_Result>("sp_UpdateASINIsRenewed", companyIDParameter, marketPlaceIDParameter, aSINParameter, isRenewedParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UploadImages_Result> sp_UploadImages(Nullable<int> companyID, string sKU, Nullable<int> typeID, string photoName, Nullable<byte> photoNumber, string photoWebURL, string photoLocalRoot, string originalPhotoName, string photoExtension, string userID, Nullable<bool> isUpdate, Nullable<int> imageID, Nullable<bool> isAttach)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var photoNameParameter = photoName != null ?
                new ObjectParameter("PhotoName", photoName) :
                new ObjectParameter("PhotoName", typeof(string));
    
            var photoNumberParameter = photoNumber.HasValue ?
                new ObjectParameter("PhotoNumber", photoNumber) :
                new ObjectParameter("PhotoNumber", typeof(byte));
    
            var photoWebURLParameter = photoWebURL != null ?
                new ObjectParameter("PhotoWebURL", photoWebURL) :
                new ObjectParameter("PhotoWebURL", typeof(string));
    
            var photoLocalRootParameter = photoLocalRoot != null ?
                new ObjectParameter("PhotoLocalRoot", photoLocalRoot) :
                new ObjectParameter("PhotoLocalRoot", typeof(string));
    
            var originalPhotoNameParameter = originalPhotoName != null ?
                new ObjectParameter("OriginalPhotoName", originalPhotoName) :
                new ObjectParameter("OriginalPhotoName", typeof(string));
    
            var photoExtensionParameter = photoExtension != null ?
                new ObjectParameter("PhotoExtension", photoExtension) :
                new ObjectParameter("PhotoExtension", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var isUpdateParameter = isUpdate.HasValue ?
                new ObjectParameter("isUpdate", isUpdate) :
                new ObjectParameter("isUpdate", typeof(bool));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var isAttachParameter = isAttach.HasValue ?
                new ObjectParameter("isAttach", isAttach) :
                new ObjectParameter("isAttach", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UploadImages_Result>("sp_UploadImages", companyIDParameter, sKUParameter, typeIDParameter, photoNameParameter, photoNumberParameter, photoWebURLParameter, photoLocalRootParameter, originalPhotoNameParameter, photoExtensionParameter, userIDParameter, isUpdateParameter, imageIDParameter, isAttachParameter);
        }
    
        public virtual int GetFirstClassificationInserted(Nullable<int> p_WorkOrderID, string p_Model)
        {
            var p_WorkOrderIDParameter = p_WorkOrderID.HasValue ?
                new ObjectParameter("P_WorkOrderID", p_WorkOrderID) :
                new ObjectParameter("P_WorkOrderID", typeof(int));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFirstClassificationInserted", p_WorkOrderIDParameter, p_ModelParameter);
        }
    
        public virtual ObjectResult<sp_AddSerialNumberWorkOrderDetail_Result> sp_AddSerialNumberWorkOrderDetail(Nullable<int> companyID, string tRGID, Nullable<int> purchaseID, string mFGSKU, string brand, Nullable<int> screenSize, string itemDescription, Nullable<decimal> estimatedRetail, Nullable<decimal> price, string bTSSKU, Nullable<int> bTSCategoryID, string userID, Nullable<bool> withoutSN)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var mFGSKUParameter = mFGSKU != null ?
                new ObjectParameter("MFGSKU", mFGSKU) :
                new ObjectParameter("MFGSKU", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var screenSizeParameter = screenSize.HasValue ?
                new ObjectParameter("ScreenSize", screenSize) :
                new ObjectParameter("ScreenSize", typeof(int));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var estimatedRetailParameter = estimatedRetail.HasValue ?
                new ObjectParameter("EstimatedRetail", estimatedRetail) :
                new ObjectParameter("EstimatedRetail", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var bTSSKUParameter = bTSSKU != null ?
                new ObjectParameter("BTSSKU", bTSSKU) :
                new ObjectParameter("BTSSKU", typeof(string));
    
            var bTSCategoryIDParameter = bTSCategoryID.HasValue ?
                new ObjectParameter("BTSCategoryID", bTSCategoryID) :
                new ObjectParameter("BTSCategoryID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var withoutSNParameter = withoutSN.HasValue ?
                new ObjectParameter("withoutSN", withoutSN) :
                new ObjectParameter("withoutSN", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddSerialNumberWorkOrderDetail_Result>("sp_AddSerialNumberWorkOrderDetail", companyIDParameter, tRGIDParameter, purchaseIDParameter, mFGSKUParameter, brandParameter, screenSizeParameter, itemDescriptionParameter, estimatedRetailParameter, priceParameter, bTSSKUParameter, bTSCategoryIDParameter, userIDParameter, withoutSNParameter);
        }
    
        public virtual ObjectResult<sp_ChangeStatusWorkPlanRepairs_Result> sp_ChangeStatusWorkPlanRepairs(Nullable<int> companyID, string licensePlateNumber, Nullable<int> newStatusID, Nullable<int> repairID, string note, string pFailures, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var newStatusIDParameter = newStatusID.HasValue ?
                new ObjectParameter("NewStatusID", newStatusID) :
                new ObjectParameter("NewStatusID", typeof(int));
    
            var repairIDParameter = repairID.HasValue ?
                new ObjectParameter("RepairID", repairID) :
                new ObjectParameter("RepairID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var pFailuresParameter = pFailures != null ?
                new ObjectParameter("PFailures", pFailures) :
                new ObjectParameter("PFailures", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChangeStatusWorkPlanRepairs_Result>("sp_ChangeStatusWorkPlanRepairs", companyIDParameter, licensePlateNumberParameter, newStatusIDParameter, repairIDParameter, noteParameter, pFailuresParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ClosedWorkOrders(Nullable<int> p_CompanyID, Nullable<int> p_WorkOrderID, string p_WOType, string p_Comment, string p_User)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_WorkOrderIDParameter = p_WorkOrderID.HasValue ?
                new ObjectParameter("P_WorkOrderID", p_WorkOrderID) :
                new ObjectParameter("P_WorkOrderID", typeof(int));
    
            var p_WOTypeParameter = p_WOType != null ?
                new ObjectParameter("P_WOType", p_WOType) :
                new ObjectParameter("P_WOType", typeof(string));
    
            var p_CommentParameter = p_Comment != null ?
                new ObjectParameter("P_Comment", p_Comment) :
                new ObjectParameter("P_Comment", typeof(string));
    
            var p_UserParameter = p_User != null ?
                new ObjectParameter("P_User", p_User) :
                new ObjectParameter("P_User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ClosedWorkOrders", p_CompanyIDParameter, p_WorkOrderIDParameter, p_WOTypeParameter, p_CommentParameter, p_UserParameter);
        }
    
        public virtual ObjectResult<sp_CreateWorkPlanRepairFailure_Result> sp_CreateWorkPlanRepairFailure(Nullable<int> companyID, Nullable<int> statusID, string failureName, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var failureNameParameter = failureName != null ?
                new ObjectParameter("FailureName", failureName) :
                new ObjectParameter("FailureName", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CreateWorkPlanRepairFailure_Result>("sp_CreateWorkPlanRepairFailure", companyIDParameter, statusIDParameter, failureNameParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_DeleteLicensePlateNumberPackedlist_Result> sp_DeleteLicensePlateNumberPackedlist(Nullable<int> companyID, Nullable<int> packagingDetialID, Nullable<int> packagingID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var packagingDetialIDParameter = packagingDetialID.HasValue ?
                new ObjectParameter("PackagingDetialID", packagingDetialID) :
                new ObjectParameter("PackagingDetialID", typeof(int));
    
            var packagingIDParameter = packagingID.HasValue ?
                new ObjectParameter("PackagingID", packagingID) :
                new ObjectParameter("PackagingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeleteLicensePlateNumberPackedlist_Result>("sp_DeleteLicensePlateNumberPackedlist", companyIDParameter, packagingDetialIDParameter, packagingIDParameter);
        }
    
        public virtual ObjectResult<sp_DeleteOpenCellChange_Result> sp_DeleteOpenCellChange(Nullable<int> companyID, Nullable<int> openCellChangeID, string licensePlateNumber, string openCellPartNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var openCellChangeIDParameter = openCellChangeID.HasValue ?
                new ObjectParameter("OpenCellChangeID", openCellChangeID) :
                new ObjectParameter("OpenCellChangeID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var openCellPartNumberParameter = openCellPartNumber != null ?
                new ObjectParameter("OpenCellPartNumber", openCellPartNumber) :
                new ObjectParameter("OpenCellPartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeleteOpenCellChange_Result>("sp_DeleteOpenCellChange", companyIDParameter, openCellChangeIDParameter, licensePlateNumberParameter, openCellPartNumberParameter);
        }
    
        public virtual ObjectResult<sp_DeleteOpenCellData_Result> sp_DeleteOpenCellData(Nullable<int> companyID, Nullable<int> openCellID, string licensePlateNumber, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var openCellIDParameter = openCellID.HasValue ?
                new ObjectParameter("OpenCellID", openCellID) :
                new ObjectParameter("OpenCellID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeleteOpenCellData_Result>("sp_DeleteOpenCellData", companyIDParameter, openCellIDParameter, licensePlateNumberParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_DeleteOpenChangeReport_Result> sp_DeleteOpenChangeReport(Nullable<int> companyID, Nullable<int> openCellChangeID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var openCellChangeIDParameter = openCellChangeID.HasValue ?
                new ObjectParameter("OpenCellChangeID", openCellChangeID) :
                new ObjectParameter("OpenCellChangeID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeleteOpenChangeReport_Result>("sp_DeleteOpenChangeReport", companyIDParameter, openCellChangeIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_DeletePalletNumberByPO_Result> sp_DeletePalletNumberByPO(Nullable<int> p_PurchasePalletID)
        {
            var p_PurchasePalletIDParameter = p_PurchasePalletID.HasValue ?
                new ObjectParameter("P_PurchasePalletID", p_PurchasePalletID) :
                new ObjectParameter("P_PurchasePalletID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeletePalletNumberByPO_Result>("sp_DeletePalletNumberByPO", p_PurchasePalletIDParameter);
        }
    
        public virtual ObjectResult<sp_DeleteWorkPlanPackagingDetail_Result> sp_DeleteWorkPlanPackagingDetail(Nullable<int> companyID, Nullable<int> packagingID, Nullable<int> packagingDetialID, string licensePlateNumber, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var packagingIDParameter = packagingID.HasValue ?
                new ObjectParameter("PackagingID", packagingID) :
                new ObjectParameter("PackagingID", typeof(int));
    
            var packagingDetialIDParameter = packagingDetialID.HasValue ?
                new ObjectParameter("PackagingDetialID", packagingDetialID) :
                new ObjectParameter("PackagingDetialID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeleteWorkPlanPackagingDetail_Result>("sp_DeleteWorkPlanPackagingDetail", companyIDParameter, packagingIDParameter, packagingDetialIDParameter, licensePlateNumberParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_EnablesOrDisabledPackageById_Result> sp_EnablesOrDisabledPackageById(Nullable<int> pACKAGEID, string userID)
        {
            var pACKAGEIDParameter = pACKAGEID.HasValue ?
                new ObjectParameter("PACKAGEID", pACKAGEID) :
                new ObjectParameter("PACKAGEID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EnablesOrDisabledPackageById_Result>("sp_EnablesOrDisabledPackageById", pACKAGEIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAccessoriesAndComments_Result> sp_GetAccessoriesAndComments(Nullable<int> companyID, Nullable<int> categoryID, Nullable<int> classificationID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAccessoriesAndComments_Result>("sp_GetAccessoriesAndComments", companyIDParameter, categoryIDParameter, classificationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAccessoriesListClassifications_Result> sp_GetAccessoriesListClassifications(Nullable<int> companyID, Nullable<int> categoryID, Nullable<int> classificationID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAccessoriesListClassifications_Result>("sp_GetAccessoriesListClassifications", companyIDParameter, categoryIDParameter, classificationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetActiveWorkOrders1_Result> sp_GetActiveWorkOrders1(Nullable<int> companyID, string wOType, Nullable<int> statusID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetActiveWorkOrders1_Result>("sp_GetActiveWorkOrders1", companyIDParameter, wOTypeParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCompanyCategories_Result> sp_GetCompanyCategories(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompanyCategories_Result>("sp_GetCompanyCategories", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCompatibility_OpencellByModel_Result> sp_GetCompatibility_OpencellByModel(string p_Model)
        {
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompatibility_OpencellByModel_Result>("sp_GetCompatibility_OpencellByModel", p_ModelParameter);
        }
    
        public virtual ObjectResult<sp_GetCompatibilityOC_ByModel_Result> sp_GetCompatibilityOC_ByModel(string p_Model)
        {
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCompatibilityOC_ByModel_Result>("sp_GetCompatibilityOC_ByModel", p_ModelParameter);
        }
    
        public virtual ObjectResult<sp_GetDataInfo_PurchaseReceived_Result> sp_GetDataInfo_PurchaseReceived(Nullable<int> p_CompanyID, Nullable<int> p_PurchaseID)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_PurchaseIDParameter = p_PurchaseID.HasValue ?
                new ObjectParameter("P_PurchaseID", p_PurchaseID) :
                new ObjectParameter("P_PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataInfo_PurchaseReceived_Result>("sp_GetDataInfo_PurchaseReceived", p_CompanyIDParameter, p_PurchaseIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDataLicensePlateNumber_Result> sp_GetDataLicensePlateNumber(Nullable<int> companyID, Nullable<int> workCenterID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataLicensePlateNumber_Result>("sp_GetDataLicensePlateNumber", companyIDParameter, workCenterIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetItemClassifications_Result> sp_GetItemClassifications(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItemClassifications_Result>("sp_GetItemClassifications", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetItemPackage_Result> sp_GetItemPackage(Nullable<int> companyID, Nullable<bool> isFoam)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isFoamParameter = isFoam.HasValue ?
                new ObjectParameter("isFoam", isFoam) :
                new ObjectParameter("isFoam", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItemPackage_Result>("sp_GetItemPackage", companyIDParameter, isFoamParameter);
        }
    
        public virtual ObjectResult<sp_GetItemPackageConditions_Result> sp_GetItemPackageConditions(Nullable<int> companyID, Nullable<bool> isFoam)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isFoamParameter = isFoam.HasValue ?
                new ObjectParameter("isFoam", isFoam) :
                new ObjectParameter("isFoam", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItemPackageConditions_Result>("sp_GetItemPackageConditions", companyIDParameter, isFoamParameter);
        }
    
        public virtual ObjectResult<sp_GetLicensePlateHistory_Result> sp_GetLicensePlateHistory(Nullable<int> companyID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLicensePlateHistory_Result>("sp_GetLicensePlateHistory", companyIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetLicensePlateNumberDataForClient_Result> sp_GetLicensePlateNumberDataForClient(Nullable<int> companyID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLicensePlateNumberDataForClient_Result>("sp_GetLicensePlateNumberDataForClient", companyIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetLicensePlateNumberDataOpenCell_Result> sp_GetLicensePlateNumberDataOpenCell(Nullable<int> p_CompanyID, string p_LicensePlateNumber)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_LicensePlateNumberParameter = p_LicensePlateNumber != null ?
                new ObjectParameter("P_LicensePlateNumber", p_LicensePlateNumber) :
                new ObjectParameter("P_LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLicensePlateNumberDataOpenCell_Result>("sp_GetLicensePlateNumberDataOpenCell", p_CompanyIDParameter, p_LicensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetModel_BySearch_Result> sp_GetModel_BySearch(Nullable<int> companyID, Nullable<int> purchaseID, string p_SEARCH)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var p_SEARCHParameter = p_SEARCH != null ?
                new ObjectParameter("P_SEARCH", p_SEARCH) :
                new ObjectParameter("P_SEARCH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetModel_BySearch_Result>("sp_GetModel_BySearch", companyIDParameter, purchaseIDParameter, p_SEARCHParameter);
        }
    
        public virtual int sp_GetModelInfoByPO(Nullable<int> companyID, Nullable<int> purchaseID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetModelInfoByPO", companyIDParameter, purchaseIDParameter);
        }
    
        public virtual int sp_GetOpenCellChangeReport(Nullable<int> companyID, Nullable<System.DateTime> endDate, string p_Search)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetOpenCellChangeReport", companyIDParameter, endDateParameter, p_SearchParameter);
        }
    
        public virtual int sp_GetOpenCellDataProduction(Nullable<int> companyID, Nullable<System.DateTime> date, Nullable<int> typeOfWork, string search)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var typeOfWorkParameter = typeOfWork.HasValue ?
                new ObjectParameter("TypeOfWork", typeOfWork) :
                new ObjectParameter("TypeOfWork", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetOpenCellDataProduction", companyIDParameter, dateParameter, typeOfWorkParameter, searchParameter);
        }
    
        public virtual ObjectResult<sp_GetOpenCellImportData_Result> sp_GetOpenCellImportData(Nullable<int> companyID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOpenCellImportData_Result>("sp_GetOpenCellImportData", companyIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetOpenCellPartsData_Result> sp_GetOpenCellPartsData(Nullable<int> companyID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string p_Search, Nullable<int> p_WorkCenterID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            var p_WorkCenterIDParameter = p_WorkCenterID.HasValue ?
                new ObjectParameter("P_WorkCenterID", p_WorkCenterID) :
                new ObjectParameter("P_WorkCenterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOpenCellPartsData_Result>("sp_GetOpenCellPartsData", companyIDParameter, startDateParameter, endDateParameter, p_SearchParameter, p_WorkCenterIDParameter);
        }
    
        public virtual ObjectResult<sp_GetOpenCellPartsDataDetails_Result> sp_GetOpenCellPartsDataDetails(Nullable<int> companyID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string p_Search, Nullable<int> p_WorkCenterID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            var p_WorkCenterIDParameter = p_WorkCenterID.HasValue ?
                new ObjectParameter("P_WorkCenterID", p_WorkCenterID) :
                new ObjectParameter("P_WorkCenterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOpenCellPartsDataDetails_Result>("sp_GetOpenCellPartsDataDetails", companyIDParameter, startDateParameter, endDateParameter, p_SearchParameter, p_WorkCenterIDParameter);
        }
    
        public virtual ObjectResult<sp_GetOpenCellSupportInfo_Result> sp_GetOpenCellSupportInfo(Nullable<int> companyID, Nullable<int> typeOfWork, string brand, string model, string partNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var typeOfWorkParameter = typeOfWork.HasValue ?
                new ObjectParameter("TypeOfWork", typeOfWork) :
                new ObjectParameter("TypeOfWork", typeof(int));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOpenCellSupportInfo_Result>("sp_GetOpenCellSupportInfo", companyIDParameter, typeOfWorkParameter, brandParameter, modelParameter, partNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetPackageCondition_Result> sp_GetPackageCondition(Nullable<int> companyID, Nullable<int> packageID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPackageCondition_Result>("sp_GetPackageCondition", companyIDParameter, packageIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPhotoKeyNumber_Result> sp_GetPhotoKeyNumber(Nullable<int> companyID, Nullable<int> purchaseID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPhotoKeyNumber_Result>("sp_GetPhotoKeyNumber", companyIDParameter, purchaseIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPOSerialNumber_Result> sp_GetPOSerialNumber(Nullable<int> companyID, string tRGID, string userID, Nullable<int> workOrderID, string mFModel)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var mFModelParameter = mFModel != null ?
                new ObjectParameter("MFModel", mFModel) :
                new ObjectParameter("MFModel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPOSerialNumber_Result>("sp_GetPOSerialNumber", companyIDParameter, tRGIDParameter, userIDParameter, workOrderIDParameter, mFModelParameter);
        }
    
        public virtual ObjectResult<sp_GetPrintLicensePlateNumber_Result> sp_GetPrintLicensePlateNumber(Nullable<int> companyID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPrintLicensePlateNumber_Result>("sp_GetPrintLicensePlateNumber", companyIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetProductConditions_Result> sp_GetProductConditions(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProductConditions_Result>("sp_GetProductConditions", companyIDParameter);
        }
    
        public virtual int sp_GetProductionWorkOrderPlanDashboard1(Nullable<int> companyID, Nullable<int> workOrderID, string wOType)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetProductionWorkOrderPlanDashboard1", companyIDParameter, workOrderIDParameter, wOTypeParameter);
        }
    
        public virtual int sp_GetPurchasesReceived(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetPurchasesReceived", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GetQtyProceesUser(string p_User, string p_DateStart, string p_DateEnd)
        {
            var p_UserParameter = p_User != null ?
                new ObjectParameter("P_User", p_User) :
                new ObjectParameter("P_User", typeof(string));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetQtyProceesUser", p_UserParameter, p_DateStartParameter, p_DateEndParameter);
        }
    
        public virtual ObjectResult<sp_GetRepairLicensePlateNumber_Result> sp_GetRepairLicensePlateNumber(Nullable<int> companyID, Nullable<int> workCenterID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetRepairLicensePlateNumber_Result>("sp_GetRepairLicensePlateNumber", companyIDParameter, workCenterIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetReprintKitLabel_Result> sp_GetReprintKitLabel(Nullable<int> companyID, string licensePlateNumber, string sKU, string model, string brand)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReprintKitLabel_Result>("sp_GetReprintKitLabel", companyIDParameter, licensePlateNumberParameter, sKUParameter, modelParameter, brandParameter);
        }
    
        public virtual ObjectResult<sp_GetReprintQRBoxLabel_Result> sp_GetReprintQRBoxLabel(Nullable<int> companyID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReprintQRBoxLabel_Result>("sp_GetReprintQRBoxLabel", companyIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetReprintQRLabel_Result> sp_GetReprintQRLabel(Nullable<int> companyID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReprintQRLabel_Result>("sp_GetReprintQRLabel", companyIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetReviewLicensePlateNumber_Result> sp_GetReviewLicensePlateNumber(Nullable<int> companyID, Nullable<int> workCenterID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReviewLicensePlateNumber_Result>("sp_GetReviewLicensePlateNumber", companyIDParameter, workCenterIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetUPCGeneral_Result> sp_GetUPCGeneral(Nullable<int> companyID, string uPC)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var uPCParameter = uPC != null ?
                new ObjectParameter("UPC", uPC) :
                new ObjectParameter("UPC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUPCGeneral_Result>("sp_GetUPCGeneral", companyIDParameter, uPCParameter);
        }
    
        public virtual int sp_GetUploadTRGDetail(Nullable<int> companyID, string tRG_Detail)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var tRG_DetailParameter = tRG_Detail != null ?
                new ObjectParameter("TRG_Detail", tRG_Detail) :
                new ObjectParameter("TRG_Detail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetUploadTRGDetail", companyIDParameter, tRG_DetailParameter);
        }
    
        public virtual ObjectResult<sp_GetValidLicensePlateNumberPalletInfo_Result> sp_GetValidLicensePlateNumberPalletInfo(Nullable<int> companyID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetValidLicensePlateNumberPalletInfo_Result>("sp_GetValidLicensePlateNumberPalletInfo", companyIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetValidModelBySearch_Result> sp_GetValidModelBySearch(Nullable<int> companyID, string p_SEARCH)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var p_SEARCHParameter = p_SEARCH != null ?
                new ObjectParameter("P_SEARCH", p_SEARCH) :
                new ObjectParameter("P_SEARCH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetValidModelBySearch_Result>("sp_GetValidModelBySearch", companyIDParameter, p_SEARCHParameter);
        }
    
        public virtual ObjectResult<sp_GetValidPalletInfo_Result> sp_GetValidPalletInfo(Nullable<int> companyID, Nullable<int> purchaseID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetValidPalletInfo_Result>("sp_GetValidPalletInfo", companyIDParameter, purchaseIDParameter);
        }
    
        public virtual ObjectResult<sp_GetValidTRGIDUPCinfo_Result> sp_GetValidTRGIDUPCinfo(Nullable<int> companyID, Nullable<int> purchaseID, Nullable<bool> needTRG, string sEARCH)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var needTRGParameter = needTRG.HasValue ?
                new ObjectParameter("NeedTRG", needTRG) :
                new ObjectParameter("NeedTRG", typeof(bool));
    
            var sEARCHParameter = sEARCH != null ?
                new ObjectParameter("SEARCH", sEARCH) :
                new ObjectParameter("SEARCH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetValidTRGIDUPCinfo_Result>("sp_GetValidTRGIDUPCinfo", companyIDParameter, purchaseIDParameter, needTRGParameter, sEARCHParameter);
        }
    
        public virtual int sp_GetWorkCenterPalletReport(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetWorkCenterPalletReport", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkCenters_Result> sp_GetWorkCenters(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkCenters_Result>("sp_GetWorkCenters", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkOrdersReport_Result> sp_GetWorkOrdersReport(Nullable<int> companyID, string wOType, string dateRange1, string dateRange2)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var dateRange1Parameter = dateRange1 != null ?
                new ObjectParameter("DateRange1", dateRange1) :
                new ObjectParameter("DateRange1", typeof(string));
    
            var dateRange2Parameter = dateRange2 != null ?
                new ObjectParameter("DateRange2", dateRange2) :
                new ObjectParameter("DateRange2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkOrdersReport_Result>("sp_GetWorkOrdersReport", companyIDParameter, wOTypeParameter, dateRange1Parameter, dateRange2Parameter);
        }
    
        public virtual ObjectResult<sp_GetWorkOrderStatusReport_Result> sp_GetWorkOrderStatusReport(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkOrderStatusReport_Result>("sp_GetWorkOrderStatusReport", companyIDParameter);
        }
    
        public virtual int sp_GetWorkplan_CompatibilityOCByPacking(Nullable<int> p_CompanyID, Nullable<int> p_PackagingID)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_PackagingIDParameter = p_PackagingID.HasValue ?
                new ObjectParameter("P_PackagingID", p_PackagingID) :
                new ObjectParameter("P_PackagingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetWorkplan_CompatibilityOCByPacking", p_CompanyIDParameter, p_PackagingIDParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkPlanByPO_Result> sp_GetWorkPlanByPO(Nullable<int> companyID, Nullable<int> workOrderID, string wOType)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkPlanByPO_Result>("sp_GetWorkPlanByPO", companyIDParameter, workOrderIDParameter, wOTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkPlanDetailByPO_Result> sp_GetWorkPlanDetailByPO(Nullable<int> companyID, Nullable<int> workOrderID, string wOType, string tRGID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkPlanDetailByPO_Result>("sp_GetWorkPlanDetailByPO", companyIDParameter, workOrderIDParameter, wOTypeParameter, tRGIDParameter);
        }
    
        public virtual int sp_GetWorkPlanIncomplete(Nullable<int> companyID, Nullable<bool> groupSKU)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var groupSKUParameter = groupSKU.HasValue ?
                new ObjectParameter("GroupSKU", groupSKU) :
                new ObjectParameter("GroupSKU", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetWorkPlanIncomplete", companyIDParameter, groupSKUParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkPlanLicensePlateNumber_Result> sp_GetWorkPlanLicensePlateNumber(Nullable<int> companyID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkPlanLicensePlateNumber_Result>("sp_GetWorkPlanLicensePlateNumber", companyIDParameter, licensePlateNumberParameter);
        }
    
        public virtual int sp_GetWorkPlanPackaging(Nullable<int> companyID, Nullable<int> packagingID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var packagingIDParameter = packagingID.HasValue ?
                new ObjectParameter("PackagingID", packagingID) :
                new ObjectParameter("PackagingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetWorkPlanPackaging", companyIDParameter, packagingIDParameter);
        }
    
        public virtual int sp_GetWorkPlanPackaging2(Nullable<int> p_CompanyID, Nullable<int> p_PackagingID)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_PackagingIDParameter = p_PackagingID.HasValue ?
                new ObjectParameter("P_PackagingID", p_PackagingID) :
                new ObjectParameter("P_PackagingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetWorkPlanPackaging2", p_CompanyIDParameter, p_PackagingIDParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkPlanPackagingReport_Result> sp_GetWorkPlanPackagingReport(Nullable<int> companyID, string startDate, string endDate, string search)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkPlanPackagingReport_Result>("sp_GetWorkPlanPackagingReport", companyIDParameter, startDateParameter, endDateParameter, searchParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkPlanRepairFailures_Result> sp_GetWorkPlanRepairFailures(Nullable<int> companyID, Nullable<int> statusID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkPlanRepairFailures_Result>("sp_GetWorkPlanRepairFailures", companyIDParameter, statusIDParameter);
        }
    
        public virtual int sp_GetWorkPlanRepairsReport(Nullable<int> companyID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetWorkPlanRepairsReport", companyIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkPlanRepairStatus_Result> sp_GetWorkPlanRepairStatus(Nullable<int> companyID, Nullable<int> sequence)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkPlanRepairStatus_Result>("sp_GetWorkPlanRepairStatus", companyIDParameter, sequenceParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkPlanRepairTechnicians_Result> sp_GetWorkPlanRepairTechnicians(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkPlanRepairTechnicians_Result>("sp_GetWorkPlanRepairTechnicians", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkPlanTRGIDsByWorkOrderID_Result> sp_GetWorkPlanTRGIDsByWorkOrderID(Nullable<int> p_CompanyID, Nullable<int> p_WorkOrderID, string p_WOType, string p_Model)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_WorkOrderIDParameter = p_WorkOrderID.HasValue ?
                new ObjectParameter("P_WorkOrderID", p_WorkOrderID) :
                new ObjectParameter("P_WorkOrderID", typeof(int));
    
            var p_WOTypeParameter = p_WOType != null ?
                new ObjectParameter("P_WOType", p_WOType) :
                new ObjectParameter("P_WOType", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkPlanTRGIDsByWorkOrderID_Result>("sp_GetWorkPlanTRGIDsByWorkOrderID", p_CompanyIDParameter, p_WorkOrderIDParameter, p_WOTypeParameter, p_ModelParameter);
        }
    
        public virtual ObjectResult<sp_InsertLicensePlateNumbersPlanPackagingByWorkCenter_Result> sp_InsertLicensePlateNumbersPlanPackagingByWorkCenter(Nullable<int> companyID, Nullable<int> workCenterID, Nullable<int> packagingID, string itemClassifications, string licensePlateNumbers, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var packagingIDParameter = packagingID.HasValue ?
                new ObjectParameter("PackagingID", packagingID) :
                new ObjectParameter("PackagingID", typeof(int));
    
            var itemClassificationsParameter = itemClassifications != null ?
                new ObjectParameter("ItemClassifications", itemClassifications) :
                new ObjectParameter("ItemClassifications", typeof(string));
    
            var licensePlateNumbersParameter = licensePlateNumbers != null ?
                new ObjectParameter("LicensePlateNumbers", licensePlateNumbers) :
                new ObjectParameter("LicensePlateNumbers", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertLicensePlateNumbersPlanPackagingByWorkCenter_Result>("sp_InsertLicensePlateNumbersPlanPackagingByWorkCenter", companyIDParameter, workCenterIDParameter, packagingIDParameter, itemClassificationsParameter, licensePlateNumbersParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_InsertOpenCellChange_Result> sp_InsertOpenCellChange(Nullable<int> companyID, string licensePlateNumber, string openCellPartNumber, Nullable<bool> isCompatible, string userID, string brand, string model, string tVVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var openCellPartNumberParameter = openCellPartNumber != null ?
                new ObjectParameter("OpenCellPartNumber", openCellPartNumber) :
                new ObjectParameter("OpenCellPartNumber", typeof(string));
    
            var isCompatibleParameter = isCompatible.HasValue ?
                new ObjectParameter("isCompatible", isCompatible) :
                new ObjectParameter("isCompatible", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var tVVersionParameter = tVVersion != null ?
                new ObjectParameter("TVVersion", tVVersion) :
                new ObjectParameter("TVVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertOpenCellChange_Result>("sp_InsertOpenCellChange", companyIDParameter, licensePlateNumberParameter, openCellPartNumberParameter, isCompatibleParameter, userIDParameter, brandParameter, modelParameter, tVVersionParameter);
        }
    
        public virtual int sp_InsertOpenCellData(Nullable<int> companyID, string licensePlateNumber, string brand, string model, string serialNumber, string countryOrigin, Nullable<System.DateTime> manufactureDate, Nullable<int> screenSize, Nullable<int> typeOfWork, string openCellPartNumber, string openCellVersion, string openCellSerialNumber, string openCellCountryOrigin, string openCellImages, string openCellDetail, string userID, Nullable<int> workCenterID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var countryOriginParameter = countryOrigin != null ?
                new ObjectParameter("CountryOrigin", countryOrigin) :
                new ObjectParameter("CountryOrigin", typeof(string));
    
            var manufactureDateParameter = manufactureDate.HasValue ?
                new ObjectParameter("ManufactureDate", manufactureDate) :
                new ObjectParameter("ManufactureDate", typeof(System.DateTime));
    
            var screenSizeParameter = screenSize.HasValue ?
                new ObjectParameter("ScreenSize", screenSize) :
                new ObjectParameter("ScreenSize", typeof(int));
    
            var typeOfWorkParameter = typeOfWork.HasValue ?
                new ObjectParameter("TypeOfWork", typeOfWork) :
                new ObjectParameter("TypeOfWork", typeof(int));
    
            var openCellPartNumberParameter = openCellPartNumber != null ?
                new ObjectParameter("OpenCellPartNumber", openCellPartNumber) :
                new ObjectParameter("OpenCellPartNumber", typeof(string));
    
            var openCellVersionParameter = openCellVersion != null ?
                new ObjectParameter("OpenCellVersion", openCellVersion) :
                new ObjectParameter("OpenCellVersion", typeof(string));
    
            var openCellSerialNumberParameter = openCellSerialNumber != null ?
                new ObjectParameter("OpenCellSerialNumber", openCellSerialNumber) :
                new ObjectParameter("OpenCellSerialNumber", typeof(string));
    
            var openCellCountryOriginParameter = openCellCountryOrigin != null ?
                new ObjectParameter("OpenCellCountryOrigin", openCellCountryOrigin) :
                new ObjectParameter("OpenCellCountryOrigin", typeof(string));
    
            var openCellImagesParameter = openCellImages != null ?
                new ObjectParameter("OpenCellImages", openCellImages) :
                new ObjectParameter("OpenCellImages", typeof(string));
    
            var openCellDetailParameter = openCellDetail != null ?
                new ObjectParameter("OpenCellDetail", openCellDetail) :
                new ObjectParameter("OpenCellDetail", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertOpenCellData", companyIDParameter, licensePlateNumberParameter, brandParameter, modelParameter, serialNumberParameter, countryOriginParameter, manufactureDateParameter, screenSizeParameter, typeOfWorkParameter, openCellPartNumberParameter, openCellVersionParameter, openCellSerialNumberParameter, openCellCountryOriginParameter, openCellImagesParameter, openCellDetailParameter, userIDParameter, workCenterIDParameter);
        }
    
        public virtual ObjectResult<sp_InsertOpenCellDefects_Result> sp_InsertOpenCellDefects(Nullable<int> companyID, string licensePlateNumber, string defects, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var defectsParameter = defects != null ?
                new ObjectParameter("Defects", defects) :
                new ObjectParameter("Defects", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertOpenCellDefects_Result>("sp_InsertOpenCellDefects", companyIDParameter, licensePlateNumberParameter, defectsParameter, userIDParameter);
        }
    
        public virtual int sp_InsertTRGbyClassifications(Nullable<int> companyID, string tRG_Detail, Nullable<int> classificationID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var tRG_DetailParameter = tRG_Detail != null ?
                new ObjectParameter("TRG_Detail", tRG_Detail) :
                new ObjectParameter("TRG_Detail", typeof(string));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertTRGbyClassifications", companyIDParameter, tRG_DetailParameter, classificationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SP_InsertWorkCenter(Nullable<int> companyId, string workCenterName, string entedBy)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var workCenterNameParameter = workCenterName != null ?
                new ObjectParameter("WorkCenterName", workCenterName) :
                new ObjectParameter("WorkCenterName", typeof(string));
    
            var entedByParameter = entedBy != null ?
                new ObjectParameter("EntedBy", entedBy) :
                new ObjectParameter("EntedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SP_InsertWorkCenter", companyIdParameter, workCenterNameParameter, entedByParameter);
        }
    
        public virtual ObjectResult<sp_PinWorkPlanRepairs_Result> sp_PinWorkPlanRepairs(Nullable<int> companyID, string licensePlateNumber, Nullable<bool> removePinned, Nullable<int> repairID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var removePinnedParameter = removePinned.HasValue ?
                new ObjectParameter("RemovePinned", removePinned) :
                new ObjectParameter("RemovePinned", typeof(bool));
    
            var repairIDParameter = repairID.HasValue ?
                new ObjectParameter("RepairID", repairID) :
                new ObjectParameter("RepairID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PinWorkPlanRepairs_Result>("sp_PinWorkPlanRepairs", companyIDParameter, licensePlateNumberParameter, removePinnedParameter, repairIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_PrintWorkPlanLicensePlateNumber_Result> sp_PrintWorkPlanLicensePlateNumber(Nullable<int> companyID, Nullable<int> workOrderID, string wOType, Nullable<int> workOrderDetailID, string sKU, string mFRModel, Nullable<int> quantity, string tRGID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var workOrderDetailIDParameter = workOrderDetailID.HasValue ?
                new ObjectParameter("WorkOrderDetailID", workOrderDetailID) :
                new ObjectParameter("WorkOrderDetailID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var mFRModelParameter = mFRModel != null ?
                new ObjectParameter("MFRModel", mFRModel) :
                new ObjectParameter("MFRModel", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrintWorkPlanLicensePlateNumber_Result>("sp_PrintWorkPlanLicensePlateNumber", companyIDParameter, workOrderIDParameter, wOTypeParameter, workOrderDetailIDParameter, sKUParameter, mFRModelParameter, quantityParameter, tRGIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_ProcessingLicensePlateNumber_Result> sp_ProcessingLicensePlateNumber(Nullable<int> companyID, Nullable<int> purchaseID, Nullable<int> purchasePalletID, Nullable<int> workCenterID, string tRGID, string uPC, string serialNumber, string modelVersion, Nullable<int> classificationID, string itemPacking, string comments, string itemAccessories, string itemPhotoKey, string itemPhotos, Nullable<int> categoryID, string model, Nullable<bool> needTRGID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var purchasePalletIDParameter = purchasePalletID.HasValue ?
                new ObjectParameter("PurchasePalletID", purchasePalletID) :
                new ObjectParameter("PurchasePalletID", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            var uPCParameter = uPC != null ?
                new ObjectParameter("UPC", uPC) :
                new ObjectParameter("UPC", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var modelVersionParameter = modelVersion != null ?
                new ObjectParameter("ModelVersion", modelVersion) :
                new ObjectParameter("ModelVersion", typeof(string));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            var itemPackingParameter = itemPacking != null ?
                new ObjectParameter("ItemPacking", itemPacking) :
                new ObjectParameter("ItemPacking", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var itemAccessoriesParameter = itemAccessories != null ?
                new ObjectParameter("ItemAccessories", itemAccessories) :
                new ObjectParameter("ItemAccessories", typeof(string));
    
            var itemPhotoKeyParameter = itemPhotoKey != null ?
                new ObjectParameter("ItemPhotoKey", itemPhotoKey) :
                new ObjectParameter("ItemPhotoKey", typeof(string));
    
            var itemPhotosParameter = itemPhotos != null ?
                new ObjectParameter("ItemPhotos", itemPhotos) :
                new ObjectParameter("ItemPhotos", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var needTRGIDParameter = needTRGID.HasValue ?
                new ObjectParameter("needTRGID", needTRGID) :
                new ObjectParameter("needTRGID", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProcessingLicensePlateNumber_Result>("sp_ProcessingLicensePlateNumber", companyIDParameter, purchaseIDParameter, purchasePalletIDParameter, workCenterIDParameter, tRGIDParameter, uPCParameter, serialNumberParameter, modelVersionParameter, classificationIDParameter, itemPackingParameter, commentsParameter, itemAccessoriesParameter, itemPhotoKeyParameter, itemPhotosParameter, categoryIDParameter, modelParameter, needTRGIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_ProcessingLicensePlateNumber_V2_PT_Result> sp_ProcessingLicensePlateNumber_V2_PT(Nullable<int> companyID, Nullable<int> purchaseID, Nullable<int> purchasePalletID, Nullable<int> workCenterID, string tRGID, string uPC, string serialNumber, string modelVersion, Nullable<int> classificationID, string itemPacking, string comments, string itemAccessories, string itemPhotoKey, string itemPhotos, Nullable<int> categoryID, string model, Nullable<bool> needTRGID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var purchasePalletIDParameter = purchasePalletID.HasValue ?
                new ObjectParameter("PurchasePalletID", purchasePalletID) :
                new ObjectParameter("PurchasePalletID", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            var uPCParameter = uPC != null ?
                new ObjectParameter("UPC", uPC) :
                new ObjectParameter("UPC", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var modelVersionParameter = modelVersion != null ?
                new ObjectParameter("ModelVersion", modelVersion) :
                new ObjectParameter("ModelVersion", typeof(string));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            var itemPackingParameter = itemPacking != null ?
                new ObjectParameter("ItemPacking", itemPacking) :
                new ObjectParameter("ItemPacking", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var itemAccessoriesParameter = itemAccessories != null ?
                new ObjectParameter("ItemAccessories", itemAccessories) :
                new ObjectParameter("ItemAccessories", typeof(string));
    
            var itemPhotoKeyParameter = itemPhotoKey != null ?
                new ObjectParameter("ItemPhotoKey", itemPhotoKey) :
                new ObjectParameter("ItemPhotoKey", typeof(string));
    
            var itemPhotosParameter = itemPhotos != null ?
                new ObjectParameter("ItemPhotos", itemPhotos) :
                new ObjectParameter("ItemPhotos", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var needTRGIDParameter = needTRGID.HasValue ?
                new ObjectParameter("needTRGID", needTRGID) :
                new ObjectParameter("needTRGID", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProcessingLicensePlateNumber_V2_PT_Result>("sp_ProcessingLicensePlateNumber_V2_PT", companyIDParameter, purchaseIDParameter, purchasePalletIDParameter, workCenterIDParameter, tRGIDParameter, uPCParameter, serialNumberParameter, modelVersionParameter, classificationIDParameter, itemPackingParameter, commentsParameter, itemAccessoriesParameter, itemPhotoKeyParameter, itemPhotosParameter, categoryIDParameter, modelParameter, needTRGIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_ProcessingLicensePlateNumber_V2_TEST_Result> sp_ProcessingLicensePlateNumber_V2_TEST(Nullable<int> companyID, Nullable<int> purchaseID, Nullable<int> purchasePalletID, Nullable<int> workCenterID, string tRGID, string uPC, string serialNumber, string modelVersion, Nullable<int> classificationID, string itemPacking, string comments, string itemAccessories, string itemPhotoKey, string itemPhotos, Nullable<int> categoryID, string model, Nullable<bool> needTRGID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var purchasePalletIDParameter = purchasePalletID.HasValue ?
                new ObjectParameter("PurchasePalletID", purchasePalletID) :
                new ObjectParameter("PurchasePalletID", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            var uPCParameter = uPC != null ?
                new ObjectParameter("UPC", uPC) :
                new ObjectParameter("UPC", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var modelVersionParameter = modelVersion != null ?
                new ObjectParameter("ModelVersion", modelVersion) :
                new ObjectParameter("ModelVersion", typeof(string));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            var itemPackingParameter = itemPacking != null ?
                new ObjectParameter("ItemPacking", itemPacking) :
                new ObjectParameter("ItemPacking", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var itemAccessoriesParameter = itemAccessories != null ?
                new ObjectParameter("ItemAccessories", itemAccessories) :
                new ObjectParameter("ItemAccessories", typeof(string));
    
            var itemPhotoKeyParameter = itemPhotoKey != null ?
                new ObjectParameter("ItemPhotoKey", itemPhotoKey) :
                new ObjectParameter("ItemPhotoKey", typeof(string));
    
            var itemPhotosParameter = itemPhotos != null ?
                new ObjectParameter("ItemPhotos", itemPhotos) :
                new ObjectParameter("ItemPhotos", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var needTRGIDParameter = needTRGID.HasValue ?
                new ObjectParameter("needTRGID", needTRGID) :
                new ObjectParameter("needTRGID", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProcessingLicensePlateNumber_V2_TEST_Result>("sp_ProcessingLicensePlateNumber_V2_TEST", companyIDParameter, purchaseIDParameter, purchasePalletIDParameter, workCenterIDParameter, tRGIDParameter, uPCParameter, serialNumberParameter, modelVersionParameter, classificationIDParameter, itemPackingParameter, commentsParameter, itemAccessoriesParameter, itemPhotoKeyParameter, itemPhotosParameter, categoryIDParameter, modelParameter, needTRGIDParameter, userIDParameter);
        }
    
        public virtual int sp_SavePackagingData(Nullable<int> companyID, Nullable<int> packagingTypeID, Nullable<int> itemTypeID, string packagingData, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var packagingTypeIDParameter = packagingTypeID.HasValue ?
                new ObjectParameter("PackagingTypeID", packagingTypeID) :
                new ObjectParameter("PackagingTypeID", typeof(int));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(int));
    
            var packagingDataParameter = packagingData != null ?
                new ObjectParameter("PackagingData", packagingData) :
                new ObjectParameter("PackagingData", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SavePackagingData", companyIDParameter, packagingTypeIDParameter, itemTypeIDParameter, packagingDataParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_SavePlanPackagingByWorkCenter_Result> sp_SavePlanPackagingByWorkCenter(Nullable<int> companyID, Nullable<int> workCenterID, string itemClassifications, string licensePlateNumbers, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var itemClassificationsParameter = itemClassifications != null ?
                new ObjectParameter("ItemClassifications", itemClassifications) :
                new ObjectParameter("ItemClassifications", typeof(string));
    
            var licensePlateNumbersParameter = licensePlateNumbers != null ?
                new ObjectParameter("LicensePlateNumbers", licensePlateNumbers) :
                new ObjectParameter("LicensePlateNumbers", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SavePlanPackagingByWorkCenter_Result>("sp_SavePlanPackagingByWorkCenter", companyIDParameter, workCenterIDParameter, itemClassificationsParameter, licensePlateNumbersParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_SaveReviewLicensePlateData_Result> sp_SaveReviewLicensePlateData(Nullable<int> companyID, string licensePlateNumber, string uPC, Nullable<int> classificationID, string comment, string itemAccessories, string itemPhotos, string itemPacking, Nullable<int> workCenterID, string userID, string modelVersion, Nullable<int> categoryID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var uPCParameter = uPC != null ?
                new ObjectParameter("UPC", uPC) :
                new ObjectParameter("UPC", typeof(string));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var itemAccessoriesParameter = itemAccessories != null ?
                new ObjectParameter("ItemAccessories", itemAccessories) :
                new ObjectParameter("ItemAccessories", typeof(string));
    
            var itemPhotosParameter = itemPhotos != null ?
                new ObjectParameter("ItemPhotos", itemPhotos) :
                new ObjectParameter("ItemPhotos", typeof(string));
    
            var itemPackingParameter = itemPacking != null ?
                new ObjectParameter("ItemPacking", itemPacking) :
                new ObjectParameter("ItemPacking", typeof(string));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var modelVersionParameter = modelVersion != null ?
                new ObjectParameter("ModelVersion", modelVersion) :
                new ObjectParameter("ModelVersion", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaveReviewLicensePlateData_Result>("sp_SaveReviewLicensePlateData", companyIDParameter, licensePlateNumberParameter, uPCParameter, classificationIDParameter, commentParameter, itemAccessoriesParameter, itemPhotosParameter, itemPackingParameter, workCenterIDParameter, userIDParameter, modelVersionParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<sp_SaveWorkPlanPackagingDetail_Result> sp_SaveWorkPlanPackagingDetail(Nullable<int> companyID, Nullable<int> packagingID, string licensePlateNumber, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var packagingIDParameter = packagingID.HasValue ?
                new ObjectParameter("PackagingID", packagingID) :
                new ObjectParameter("PackagingID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaveWorkPlanPackagingDetail_Result>("sp_SaveWorkPlanPackagingDetail", companyIDParameter, packagingIDParameter, licensePlateNumberParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_Update_WorkPlanPackaging_Status_Result> sp_Update_WorkPlanPackaging_Status(Nullable<int> p_CompanyID, Nullable<int> p_PackagingID, Nullable<bool> p_Status)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_PackagingIDParameter = p_PackagingID.HasValue ?
                new ObjectParameter("P_PackagingID", p_PackagingID) :
                new ObjectParameter("P_PackagingID", typeof(int));
    
            var p_StatusParameter = p_Status.HasValue ?
                new ObjectParameter("P_Status", p_Status) :
                new ObjectParameter("P_Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Update_WorkPlanPackaging_Status_Result>("sp_Update_WorkPlanPackaging_Status", p_CompanyIDParameter, p_PackagingIDParameter, p_StatusParameter);
        }
    
        public virtual ObjectResult<sp_UpdateClassificationLicensePlate_Result> sp_UpdateClassificationLicensePlate(Nullable<int> companyID, string licensePlateNumber, string uPC, Nullable<int> classificationID, string comment, string itemAccessories, string itemPhotos, string itemPacking, Nullable<int> workCenterID, string userID, Nullable<int> categoryID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var uPCParameter = uPC != null ?
                new ObjectParameter("UPC", uPC) :
                new ObjectParameter("UPC", typeof(string));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var itemAccessoriesParameter = itemAccessories != null ?
                new ObjectParameter("ItemAccessories", itemAccessories) :
                new ObjectParameter("ItemAccessories", typeof(string));
    
            var itemPhotosParameter = itemPhotos != null ?
                new ObjectParameter("ItemPhotos", itemPhotos) :
                new ObjectParameter("ItemPhotos", typeof(string));
    
            var itemPackingParameter = itemPacking != null ?
                new ObjectParameter("ItemPacking", itemPacking) :
                new ObjectParameter("ItemPacking", typeof(string));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateClassificationLicensePlate_Result>("sp_UpdateClassificationLicensePlate", companyIDParameter, licensePlateNumberParameter, uPCParameter, classificationIDParameter, commentParameter, itemAccessoriesParameter, itemPhotosParameter, itemPackingParameter, workCenterIDParameter, userIDParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateIsNotReceived_Result> sp_UpdateIsNotReceived(Nullable<int> companyID, string sKU, string licensePlateNumber, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateIsNotReceived_Result>("sp_UpdateIsNotReceived", companyIDParameter, sKUParameter, licensePlateNumberParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateLicensePlateNumber_Result> sp_UpdateLicensePlateNumber(Nullable<int> companyID, string licensePlateNumber, Nullable<int> workCenterID, Nullable<int> classificationID, string itemPacking, string comments, string itemAccessories, string itemPhotoKey, string itemPhotos, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            var itemPackingParameter = itemPacking != null ?
                new ObjectParameter("ItemPacking", itemPacking) :
                new ObjectParameter("ItemPacking", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var itemAccessoriesParameter = itemAccessories != null ?
                new ObjectParameter("ItemAccessories", itemAccessories) :
                new ObjectParameter("ItemAccessories", typeof(string));
    
            var itemPhotoKeyParameter = itemPhotoKey != null ?
                new ObjectParameter("ItemPhotoKey", itemPhotoKey) :
                new ObjectParameter("ItemPhotoKey", typeof(string));
    
            var itemPhotosParameter = itemPhotos != null ?
                new ObjectParameter("ItemPhotos", itemPhotos) :
                new ObjectParameter("ItemPhotos", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateLicensePlateNumber_Result>("sp_UpdateLicensePlateNumber", companyIDParameter, licensePlateNumberParameter, workCenterIDParameter, classificationIDParameter, itemPackingParameter, commentsParameter, itemAccessoriesParameter, itemPhotoKeyParameter, itemPhotosParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateLicensePlateNumber_V2_Result> sp_UpdateLicensePlateNumber_V2(Nullable<int> companyID, string licensePlateNumber, Nullable<int> workCenterID, Nullable<int> classificationID, string itemPacking, string comments, string itemAccessories, string itemPhotoKey, string itemPhotos, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var classificationIDParameter = classificationID.HasValue ?
                new ObjectParameter("ClassificationID", classificationID) :
                new ObjectParameter("ClassificationID", typeof(int));
    
            var itemPackingParameter = itemPacking != null ?
                new ObjectParameter("ItemPacking", itemPacking) :
                new ObjectParameter("ItemPacking", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var itemAccessoriesParameter = itemAccessories != null ?
                new ObjectParameter("ItemAccessories", itemAccessories) :
                new ObjectParameter("ItemAccessories", typeof(string));
    
            var itemPhotoKeyParameter = itemPhotoKey != null ?
                new ObjectParameter("ItemPhotoKey", itemPhotoKey) :
                new ObjectParameter("ItemPhotoKey", typeof(string));
    
            var itemPhotosParameter = itemPhotos != null ?
                new ObjectParameter("ItemPhotos", itemPhotos) :
                new ObjectParameter("ItemPhotos", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateLicensePlateNumber_V2_Result>("sp_UpdateLicensePlateNumber_V2", companyIDParameter, licensePlateNumberParameter, workCenterIDParameter, classificationIDParameter, itemPackingParameter, commentsParameter, itemAccessoriesParameter, itemPhotoKeyParameter, itemPhotosParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateOpenCellData_Result> sp_UpdateOpenCellData(Nullable<int> companyID, Nullable<int> openCellID, Nullable<int> typeOfWork, string licensePlateNumber, string brand, string model, string serialNumber, string countryOrigin, Nullable<System.DateTime> manufactureDate, Nullable<int> screenSize, string sKU, string openCellPartNumber, string openCellVersion, string openCellSerialNumber, string openCellCountryOrigin, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var openCellIDParameter = openCellID.HasValue ?
                new ObjectParameter("OpenCellID", openCellID) :
                new ObjectParameter("OpenCellID", typeof(int));
    
            var typeOfWorkParameter = typeOfWork.HasValue ?
                new ObjectParameter("TypeOfWork", typeOfWork) :
                new ObjectParameter("TypeOfWork", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var countryOriginParameter = countryOrigin != null ?
                new ObjectParameter("CountryOrigin", countryOrigin) :
                new ObjectParameter("CountryOrigin", typeof(string));
    
            var manufactureDateParameter = manufactureDate.HasValue ?
                new ObjectParameter("ManufactureDate", manufactureDate) :
                new ObjectParameter("ManufactureDate", typeof(System.DateTime));
    
            var screenSizeParameter = screenSize.HasValue ?
                new ObjectParameter("ScreenSize", screenSize) :
                new ObjectParameter("ScreenSize", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var openCellPartNumberParameter = openCellPartNumber != null ?
                new ObjectParameter("OpenCellPartNumber", openCellPartNumber) :
                new ObjectParameter("OpenCellPartNumber", typeof(string));
    
            var openCellVersionParameter = openCellVersion != null ?
                new ObjectParameter("OpenCellVersion", openCellVersion) :
                new ObjectParameter("OpenCellVersion", typeof(string));
    
            var openCellSerialNumberParameter = openCellSerialNumber != null ?
                new ObjectParameter("OpenCellSerialNumber", openCellSerialNumber) :
                new ObjectParameter("OpenCellSerialNumber", typeof(string));
    
            var openCellCountryOriginParameter = openCellCountryOrigin != null ?
                new ObjectParameter("OpenCellCountryOrigin", openCellCountryOrigin) :
                new ObjectParameter("OpenCellCountryOrigin", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateOpenCellData_Result>("sp_UpdateOpenCellData", companyIDParameter, openCellIDParameter, typeOfWorkParameter, licensePlateNumberParameter, brandParameter, modelParameter, serialNumberParameter, countryOriginParameter, manufactureDateParameter, screenSizeParameter, sKUParameter, openCellPartNumberParameter, openCellVersionParameter, openCellSerialNumberParameter, openCellCountryOriginParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateOpenCellDetail_Result> sp_UpdateOpenCellDetail(Nullable<int> companyID, Nullable<int> openCellDetailID, Nullable<int> openCellID, string licensePlateNumber, string partNumber, string partVersion, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var openCellDetailIDParameter = openCellDetailID.HasValue ?
                new ObjectParameter("OpenCellDetailID", openCellDetailID) :
                new ObjectParameter("OpenCellDetailID", typeof(int));
    
            var openCellIDParameter = openCellID.HasValue ?
                new ObjectParameter("OpenCellID", openCellID) :
                new ObjectParameter("OpenCellID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var partVersionParameter = partVersion != null ?
                new ObjectParameter("PartVersion", partVersion) :
                new ObjectParameter("PartVersion", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateOpenCellDetail_Result>("sp_UpdateOpenCellDetail", companyIDParameter, openCellDetailIDParameter, openCellIDParameter, licensePlateNumberParameter, partNumberParameter, partVersionParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateOpenChangeReport_Result> sp_UpdateOpenChangeReport(Nullable<int> companyID, Nullable<int> openCellChangeID, string licensePlateNumber, string openCellPartNumber, string newOpenCelPartNumber, string newTvVersion)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var openCellChangeIDParameter = openCellChangeID.HasValue ?
                new ObjectParameter("OpenCellChangeID", openCellChangeID) :
                new ObjectParameter("OpenCellChangeID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var openCellPartNumberParameter = openCellPartNumber != null ?
                new ObjectParameter("OpenCellPartNumber", openCellPartNumber) :
                new ObjectParameter("OpenCellPartNumber", typeof(string));
    
            var newOpenCelPartNumberParameter = newOpenCelPartNumber != null ?
                new ObjectParameter("NewOpenCelPartNumber", newOpenCelPartNumber) :
                new ObjectParameter("NewOpenCelPartNumber", typeof(string));
    
            var newTvVersionParameter = newTvVersion != null ?
                new ObjectParameter("NewTvVersion", newTvVersion) :
                new ObjectParameter("NewTvVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateOpenChangeReport_Result>("sp_UpdateOpenChangeReport", companyIDParameter, openCellChangeIDParameter, licensePlateNumberParameter, openCellPartNumberParameter, newOpenCelPartNumberParameter, newTvVersionParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_UpdateWorkCenter(Nullable<int> companyID, Nullable<int> id, Nullable<bool> isActive, string enteredBy)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var enteredByParameter = enteredBy != null ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_UpdateWorkCenter", companyIDParameter, idParameter, isActiveParameter, enteredByParameter);
        }
    
        public virtual ObjectResult<sp_UpdateWorkPlanNotReceived_Result> sp_UpdateWorkPlanNotReceived(Nullable<int> companyID, string licensePlateNumber, Nullable<int> workOrderID, string wOType, Nullable<int> workOrderDetailID, string sKU, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var workOrderDetailIDParameter = workOrderDetailID.HasValue ?
                new ObjectParameter("WorkOrderDetailID", workOrderDetailID) :
                new ObjectParameter("WorkOrderDetailID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateWorkPlanNotReceived_Result>("sp_UpdateWorkPlanNotReceived", companyIDParameter, licensePlateNumberParameter, workOrderIDParameter, wOTypeParameter, workOrderDetailIDParameter, sKUParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateWorkPlanTRGID_Result> sp_UpdateWorkPlanTRGID(Nullable<int> companyID, Nullable<int> workOrderID, string wOType, Nullable<int> workOrderDetailID, string sKU, string licensePlateNumber, string tRGID, string mFRModel, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var workOrderDetailIDParameter = workOrderDetailID.HasValue ?
                new ObjectParameter("WorkOrderDetailID", workOrderDetailID) :
                new ObjectParameter("WorkOrderDetailID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            var mFRModelParameter = mFRModel != null ?
                new ObjectParameter("MFRModel", mFRModel) :
                new ObjectParameter("MFRModel", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateWorkPlanTRGID_Result>("sp_UpdateWorkPlanTRGID", companyIDParameter, workOrderIDParameter, wOTypeParameter, workOrderDetailIDParameter, sKUParameter, licensePlateNumberParameter, tRGIDParameter, mFRModelParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_ValidarLisencePlateTimeByPO_Result> sp_ValidarLisencePlateTimeByPO(Nullable<int> p_PurchaseID)
        {
            var p_PurchaseIDParameter = p_PurchaseID.HasValue ?
                new ObjectParameter("P_PurchaseID", p_PurchaseID) :
                new ObjectParameter("P_PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ValidarLisencePlateTimeByPO_Result>("sp_ValidarLisencePlateTimeByPO", p_PurchaseIDParameter);
        }
    
        public virtual ObjectResult<sp_ValidateLicensePlateNumberForPallet_Result> sp_ValidateLicensePlateNumberForPallet(Nullable<int> companyID, string itemClassifications, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var itemClassificationsParameter = itemClassifications != null ?
                new ObjectParameter("ItemClassifications", itemClassifications) :
                new ObjectParameter("ItemClassifications", typeof(string));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ValidateLicensePlateNumberForPallet_Result>("sp_ValidateLicensePlateNumberForPallet", companyIDParameter, itemClassificationsParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_ValidLicensePlateNumber(Nullable<int> companyID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_ValidLicensePlateNumber", companyIDParameter, licensePlateNumberParameter);
        }
    
        public virtual ObjectResult<sp_ValidSerialNumber_Result> sp_ValidSerialNumber(Nullable<int> p_COMPANYID, Nullable<int> p_POID, string p_SERIALNUMBER)
        {
            var p_COMPANYIDParameter = p_COMPANYID.HasValue ?
                new ObjectParameter("P_COMPANYID", p_COMPANYID) :
                new ObjectParameter("P_COMPANYID", typeof(int));
    
            var p_POIDParameter = p_POID.HasValue ?
                new ObjectParameter("P_POID", p_POID) :
                new ObjectParameter("P_POID", typeof(int));
    
            var p_SERIALNUMBERParameter = p_SERIALNUMBER != null ?
                new ObjectParameter("P_SERIALNUMBER", p_SERIALNUMBER) :
                new ObjectParameter("P_SERIALNUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ValidSerialNumber_Result>("sp_ValidSerialNumber", p_COMPANYIDParameter, p_POIDParameter, p_SERIALNUMBERParameter);
        }
    
        public virtual ObjectResult<spr_GetLicensePlateNumberData_Result> spr_GetLicensePlateNumberData(Nullable<int> p_CompanyID, string p_LicensePlateNumber)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_LicensePlateNumberParameter = p_LicensePlateNumber != null ?
                new ObjectParameter("P_LicensePlateNumber", p_LicensePlateNumber) :
                new ObjectParameter("P_LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_GetLicensePlateNumberData_Result>("spr_GetLicensePlateNumberData", p_CompanyIDParameter, p_LicensePlateNumberParameter);
        }
    
        public virtual ObjectResult<spr_GetPurchasesPalletDetailD_Result> spr_GetPurchasesPalletDetailD(Nullable<int> p_PURCHASEID, Nullable<int> p_PURCHASEPALLETID)
        {
            var p_PURCHASEIDParameter = p_PURCHASEID.HasValue ?
                new ObjectParameter("P_PURCHASEID", p_PURCHASEID) :
                new ObjectParameter("P_PURCHASEID", typeof(int));
    
            var p_PURCHASEPALLETIDParameter = p_PURCHASEPALLETID.HasValue ?
                new ObjectParameter("P_PURCHASEPALLETID", p_PURCHASEPALLETID) :
                new ObjectParameter("P_PURCHASEPALLETID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_GetPurchasesPalletDetailD_Result>("spr_GetPurchasesPalletDetailD", p_PURCHASEIDParameter, p_PURCHASEPALLETIDParameter);
        }
    
        public virtual ObjectResult<spr_Insert_OpenCellPartsData_Result> spr_Insert_OpenCellPartsData(Nullable<int> p_CompanyId, Nullable<int> p_WorkCenterId, Nullable<int> p_CategoryId, string p_LCN, string p_Brand, string p_Model, string p_SKU, Nullable<int> p_ScreenSize, string p_SerialNumber, string p_Version, string p_Opencell, string p_Main, string p_TCon, string p_EnteredBy)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_WorkCenterIdParameter = p_WorkCenterId.HasValue ?
                new ObjectParameter("P_WorkCenterId", p_WorkCenterId) :
                new ObjectParameter("P_WorkCenterId", typeof(int));
    
            var p_CategoryIdParameter = p_CategoryId.HasValue ?
                new ObjectParameter("P_CategoryId", p_CategoryId) :
                new ObjectParameter("P_CategoryId", typeof(int));
    
            var p_LCNParameter = p_LCN != null ?
                new ObjectParameter("P_LCN", p_LCN) :
                new ObjectParameter("P_LCN", typeof(string));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            var p_ScreenSizeParameter = p_ScreenSize.HasValue ?
                new ObjectParameter("P_ScreenSize", p_ScreenSize) :
                new ObjectParameter("P_ScreenSize", typeof(int));
    
            var p_SerialNumberParameter = p_SerialNumber != null ?
                new ObjectParameter("P_SerialNumber", p_SerialNumber) :
                new ObjectParameter("P_SerialNumber", typeof(string));
    
            var p_VersionParameter = p_Version != null ?
                new ObjectParameter("P_Version", p_Version) :
                new ObjectParameter("P_Version", typeof(string));
    
            var p_OpencellParameter = p_Opencell != null ?
                new ObjectParameter("P_Opencell", p_Opencell) :
                new ObjectParameter("P_Opencell", typeof(string));
    
            var p_MainParameter = p_Main != null ?
                new ObjectParameter("P_Main", p_Main) :
                new ObjectParameter("P_Main", typeof(string));
    
            var p_TConParameter = p_TCon != null ?
                new ObjectParameter("P_TCon", p_TCon) :
                new ObjectParameter("P_TCon", typeof(string));
    
            var p_EnteredByParameter = p_EnteredBy != null ?
                new ObjectParameter("P_EnteredBy", p_EnteredBy) :
                new ObjectParameter("P_EnteredBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_Insert_OpenCellPartsData_Result>("spr_Insert_OpenCellPartsData", p_CompanyIdParameter, p_WorkCenterIdParameter, p_CategoryIdParameter, p_LCNParameter, p_BrandParameter, p_ModelParameter, p_SKUParameter, p_ScreenSizeParameter, p_SerialNumberParameter, p_VersionParameter, p_OpencellParameter, p_MainParameter, p_TConParameter, p_EnteredByParameter);
        }
    
        public virtual int spr_Insert_PartsData(Nullable<int> p_CompanyId, Nullable<int> p_WorkCenterId, Nullable<int> p_CategoryId, string p_LCN, string p_Brand, string p_Model, string p_SKU, Nullable<int> p_ScreenSize, string p_SerialNumber, string p_Version, string p_Opencell, string p_Main, string p_TCon, string p_EnteredBy)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_WorkCenterIdParameter = p_WorkCenterId.HasValue ?
                new ObjectParameter("P_WorkCenterId", p_WorkCenterId) :
                new ObjectParameter("P_WorkCenterId", typeof(int));
    
            var p_CategoryIdParameter = p_CategoryId.HasValue ?
                new ObjectParameter("P_CategoryId", p_CategoryId) :
                new ObjectParameter("P_CategoryId", typeof(int));
    
            var p_LCNParameter = p_LCN != null ?
                new ObjectParameter("P_LCN", p_LCN) :
                new ObjectParameter("P_LCN", typeof(string));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            var p_SKUParameter = p_SKU != null ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(string));
    
            var p_ScreenSizeParameter = p_ScreenSize.HasValue ?
                new ObjectParameter("P_ScreenSize", p_ScreenSize) :
                new ObjectParameter("P_ScreenSize", typeof(int));
    
            var p_SerialNumberParameter = p_SerialNumber != null ?
                new ObjectParameter("P_SerialNumber", p_SerialNumber) :
                new ObjectParameter("P_SerialNumber", typeof(string));
    
            var p_VersionParameter = p_Version != null ?
                new ObjectParameter("P_Version", p_Version) :
                new ObjectParameter("P_Version", typeof(string));
    
            var p_OpencellParameter = p_Opencell != null ?
                new ObjectParameter("P_Opencell", p_Opencell) :
                new ObjectParameter("P_Opencell", typeof(string));
    
            var p_MainParameter = p_Main != null ?
                new ObjectParameter("P_Main", p_Main) :
                new ObjectParameter("P_Main", typeof(string));
    
            var p_TConParameter = p_TCon != null ?
                new ObjectParameter("P_TCon", p_TCon) :
                new ObjectParameter("P_TCon", typeof(string));
    
            var p_EnteredByParameter = p_EnteredBy != null ?
                new ObjectParameter("P_EnteredBy", p_EnteredBy) :
                new ObjectParameter("P_EnteredBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_Insert_PartsData", p_CompanyIdParameter, p_WorkCenterIdParameter, p_CategoryIdParameter, p_LCNParameter, p_BrandParameter, p_ModelParameter, p_SKUParameter, p_ScreenSizeParameter, p_SerialNumberParameter, p_VersionParameter, p_OpencellParameter, p_MainParameter, p_TConParameter, p_EnteredByParameter);
        }
    
        public virtual ObjectResult<spr_Insert_PartsdataDetailID_Result> spr_Insert_PartsdataDetailID(string p_LicensePlateNumber, Nullable<int> p_CompanyID, Nullable<int> p_PartsDataID, Nullable<int> p_WorkCenterID, string p_SerialNumber, string p_Opencell, string p_EnteredBy, string p_Bin, Nullable<int> p_SKU, Nullable<int> p_Qty, Nullable<int> p_Flow, string p_ScanCode, string p_Comments)
        {
            var p_LicensePlateNumberParameter = p_LicensePlateNumber != null ?
                new ObjectParameter("P_LicensePlateNumber", p_LicensePlateNumber) :
                new ObjectParameter("P_LicensePlateNumber", typeof(string));
    
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_PartsDataIDParameter = p_PartsDataID.HasValue ?
                new ObjectParameter("P_PartsDataID", p_PartsDataID) :
                new ObjectParameter("P_PartsDataID", typeof(int));
    
            var p_WorkCenterIDParameter = p_WorkCenterID.HasValue ?
                new ObjectParameter("P_WorkCenterID", p_WorkCenterID) :
                new ObjectParameter("P_WorkCenterID", typeof(int));
    
            var p_SerialNumberParameter = p_SerialNumber != null ?
                new ObjectParameter("P_SerialNumber", p_SerialNumber) :
                new ObjectParameter("P_SerialNumber", typeof(string));
    
            var p_OpencellParameter = p_Opencell != null ?
                new ObjectParameter("P_Opencell", p_Opencell) :
                new ObjectParameter("P_Opencell", typeof(string));
    
            var p_EnteredByParameter = p_EnteredBy != null ?
                new ObjectParameter("P_EnteredBy", p_EnteredBy) :
                new ObjectParameter("P_EnteredBy", typeof(string));
    
            var p_BinParameter = p_Bin != null ?
                new ObjectParameter("P_Bin", p_Bin) :
                new ObjectParameter("P_Bin", typeof(string));
    
            var p_SKUParameter = p_SKU.HasValue ?
                new ObjectParameter("P_SKU", p_SKU) :
                new ObjectParameter("P_SKU", typeof(int));
    
            var p_QtyParameter = p_Qty.HasValue ?
                new ObjectParameter("P_Qty", p_Qty) :
                new ObjectParameter("P_Qty", typeof(int));
    
            var p_FlowParameter = p_Flow.HasValue ?
                new ObjectParameter("P_Flow", p_Flow) :
                new ObjectParameter("P_Flow", typeof(int));
    
            var p_ScanCodeParameter = p_ScanCode != null ?
                new ObjectParameter("P_ScanCode", p_ScanCode) :
                new ObjectParameter("P_ScanCode", typeof(string));
    
            var p_CommentsParameter = p_Comments != null ?
                new ObjectParameter("P_Comments", p_Comments) :
                new ObjectParameter("P_Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_Insert_PartsdataDetailID_Result>("spr_Insert_PartsdataDetailID", p_LicensePlateNumberParameter, p_CompanyIDParameter, p_PartsDataIDParameter, p_WorkCenterIDParameter, p_SerialNumberParameter, p_OpencellParameter, p_EnteredByParameter, p_BinParameter, p_SKUParameter, p_QtyParameter, p_FlowParameter, p_ScanCodeParameter, p_CommentsParameter);
        }
    
        public virtual ObjectResult<spr_InsertWorkOrderDetailsNewModelandSku_Result> spr_InsertWorkOrderDetailsNewModelandSku(Nullable<int> pCompanyID, Nullable<int> pPurchaseId, string bTSSKU, string brand, string pMFRModel, string p_TRGID, Nullable<int> screenSize, string itemDescription, Nullable<decimal> estimatedRetail, Nullable<decimal> price, Nullable<int> bTSCategoryID, string pUserID)
        {
            var pCompanyIDParameter = pCompanyID.HasValue ?
                new ObjectParameter("PCompanyID", pCompanyID) :
                new ObjectParameter("PCompanyID", typeof(int));
    
            var pPurchaseIdParameter = pPurchaseId.HasValue ?
                new ObjectParameter("PPurchaseId", pPurchaseId) :
                new ObjectParameter("PPurchaseId", typeof(int));
    
            var bTSSKUParameter = bTSSKU != null ?
                new ObjectParameter("BTSSKU", bTSSKU) :
                new ObjectParameter("BTSSKU", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var pMFRModelParameter = pMFRModel != null ?
                new ObjectParameter("PMFRModel", pMFRModel) :
                new ObjectParameter("PMFRModel", typeof(string));
    
            var p_TRGIDParameter = p_TRGID != null ?
                new ObjectParameter("P_TRGID", p_TRGID) :
                new ObjectParameter("P_TRGID", typeof(string));
    
            var screenSizeParameter = screenSize.HasValue ?
                new ObjectParameter("ScreenSize", screenSize) :
                new ObjectParameter("ScreenSize", typeof(int));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var estimatedRetailParameter = estimatedRetail.HasValue ?
                new ObjectParameter("EstimatedRetail", estimatedRetail) :
                new ObjectParameter("EstimatedRetail", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var bTSCategoryIDParameter = bTSCategoryID.HasValue ?
                new ObjectParameter("BTSCategoryID", bTSCategoryID) :
                new ObjectParameter("BTSCategoryID", typeof(int));
    
            var pUserIDParameter = pUserID != null ?
                new ObjectParameter("PUserID", pUserID) :
                new ObjectParameter("PUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_InsertWorkOrderDetailsNewModelandSku_Result>("spr_InsertWorkOrderDetailsNewModelandSku", pCompanyIDParameter, pPurchaseIdParameter, bTSSKUParameter, brandParameter, pMFRModelParameter, p_TRGIDParameter, screenSizeParameter, itemDescriptionParameter, estimatedRetailParameter, priceParameter, bTSCategoryIDParameter, pUserIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spr_IsNeed_SerialNumber_Brand(Nullable<int> p_CompanyID, string p_Brand)
        {
            var p_CompanyIDParameter = p_CompanyID.HasValue ?
                new ObjectParameter("P_CompanyID", p_CompanyID) :
                new ObjectParameter("P_CompanyID", typeof(int));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spr_IsNeed_SerialNumber_Brand", p_CompanyIDParameter, p_BrandParameter);
        }
    
        public virtual int spr_ReportAlbertos(Nullable<int> p_CompanyId, Nullable<int> p_PurchaseID, string p_DateStart, string p_DateEnd)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_PurchaseIDParameter = p_PurchaseID.HasValue ?
                new ObjectParameter("P_PurchaseID", p_PurchaseID) :
                new ObjectParameter("P_PurchaseID", typeof(int));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_ReportAlbertos", p_CompanyIdParameter, p_PurchaseIDParameter, p_DateStartParameter, p_DateEndParameter);
        }
    
        public virtual ObjectResult<spr_ReportClassificationByRangeDateAndWorkCenter_Result> spr_ReportClassificationByRangeDateAndWorkCenter(Nullable<System.DateTime> p_Start_dt, Nullable<System.DateTime> p_End_dt, Nullable<int> p_WorkCenter_Id)
        {
            var p_Start_dtParameter = p_Start_dt.HasValue ?
                new ObjectParameter("P_Start_dt", p_Start_dt) :
                new ObjectParameter("P_Start_dt", typeof(System.DateTime));
    
            var p_End_dtParameter = p_End_dt.HasValue ?
                new ObjectParameter("P_End_dt", p_End_dt) :
                new ObjectParameter("P_End_dt", typeof(System.DateTime));
    
            var p_WorkCenter_IdParameter = p_WorkCenter_Id.HasValue ?
                new ObjectParameter("P_WorkCenter_Id", p_WorkCenter_Id) :
                new ObjectParameter("P_WorkCenter_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_ReportClassificationByRangeDateAndWorkCenter_Result>("spr_ReportClassificationByRangeDateAndWorkCenter", p_Start_dtParameter, p_End_dtParameter, p_WorkCenter_IdParameter);
        }
    
        public virtual ObjectResult<spr_ReportClassificationByRangeDateAndWorkCenter2_Result> spr_ReportClassificationByRangeDateAndWorkCenter2(Nullable<System.DateTime> p_Start_dt, Nullable<System.DateTime> p_End_dt, Nullable<int> p_WorkCenter_Id)
        {
            var p_Start_dtParameter = p_Start_dt.HasValue ?
                new ObjectParameter("P_Start_dt", p_Start_dt) :
                new ObjectParameter("P_Start_dt", typeof(System.DateTime));
    
            var p_End_dtParameter = p_End_dt.HasValue ?
                new ObjectParameter("P_End_dt", p_End_dt) :
                new ObjectParameter("P_End_dt", typeof(System.DateTime));
    
            var p_WorkCenter_IdParameter = p_WorkCenter_Id.HasValue ?
                new ObjectParameter("P_WorkCenter_Id", p_WorkCenter_Id) :
                new ObjectParameter("P_WorkCenter_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_ReportClassificationByRangeDateAndWorkCenter2_Result>("spr_ReportClassificationByRangeDateAndWorkCenter2", p_Start_dtParameter, p_End_dtParameter, p_WorkCenter_IdParameter);
        }
    
        public virtual int spr_ReportPOProcessClassification(Nullable<int> p_CompanyId, Nullable<int> p_PurchaseID, string p_DateStart, string p_DateEnd)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_PurchaseIDParameter = p_PurchaseID.HasValue ?
                new ObjectParameter("P_PurchaseID", p_PurchaseID) :
                new ObjectParameter("P_PurchaseID", typeof(int));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_ReportPOProcessClassification", p_CompanyIdParameter, p_PurchaseIDParameter, p_DateStartParameter, p_DateEndParameter);
        }
    
        public virtual int spr_ReportPOProcessClassification2(Nullable<int> p_CompanyId, Nullable<int> p_PurchaseID, string p_DateStart, string p_DateEnd)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_PurchaseIDParameter = p_PurchaseID.HasValue ?
                new ObjectParameter("P_PurchaseID", p_PurchaseID) :
                new ObjectParameter("P_PurchaseID", typeof(int));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_ReportPOProcessClassification2", p_CompanyIdParameter, p_PurchaseIDParameter, p_DateStartParameter, p_DateEndParameter);
        }
    
        public virtual int spr_ReportPOProcessClassification3(Nullable<int> p_CompanyId, Nullable<int> p_PurchaseID, string p_DateStart, string p_DateEnd)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_PurchaseIDParameter = p_PurchaseID.HasValue ?
                new ObjectParameter("P_PurchaseID", p_PurchaseID) :
                new ObjectParameter("P_PurchaseID", typeof(int));
    
            var p_DateStartParameter = p_DateStart != null ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(string));
    
            var p_DateEndParameter = p_DateEnd != null ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_ReportPOProcessClassification3", p_CompanyIdParameter, p_PurchaseIDParameter, p_DateStartParameter, p_DateEndParameter);
        }
    
        public virtual ObjectResult<spr_ReportPOProcessClassificationDetailProduct_Result> spr_ReportPOProcessClassificationDetailProduct(Nullable<int> p_CompanyId, Nullable<int> p_PurchaseID)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_PurchaseIDParameter = p_PurchaseID.HasValue ?
                new ObjectParameter("P_PurchaseID", p_PurchaseID) :
                new ObjectParameter("P_PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_ReportPOProcessClassificationDetailProduct_Result>("spr_ReportPOProcessClassificationDetailProduct", p_CompanyIdParameter, p_PurchaseIDParameter);
        }
    
        public virtual ObjectResult<spr_TVRequiredVersionByBrandAndModel_Result> spr_TVRequiredVersionByBrandAndModel(Nullable<int> p_Category_id, string p_Brand, string p_Model)
        {
            var p_Category_idParameter = p_Category_id.HasValue ?
                new ObjectParameter("P_Category_id", p_Category_id) :
                new ObjectParameter("P_Category_id", typeof(int));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_TVRequiredVersionByBrandAndModel_Result>("spr_TVRequiredVersionByBrandAndModel", p_Category_idParameter, p_BrandParameter, p_ModelParameter);
        }
    
        public virtual ObjectResult<spr_Update_LicensePlateNumber_ChangeBrandAndModel_Result> spr_Update_LicensePlateNumber_ChangeBrandAndModel(Nullable<int> p_CompanyId, Nullable<int> p_CategoryId, string p_LicensePlateNumber, string p_Brand, string p_Model, Nullable<int> p_ScreenSize, string p_User)
        {
            var p_CompanyIdParameter = p_CompanyId.HasValue ?
                new ObjectParameter("P_CompanyId", p_CompanyId) :
                new ObjectParameter("P_CompanyId", typeof(int));
    
            var p_CategoryIdParameter = p_CategoryId.HasValue ?
                new ObjectParameter("P_CategoryId", p_CategoryId) :
                new ObjectParameter("P_CategoryId", typeof(int));
    
            var p_LicensePlateNumberParameter = p_LicensePlateNumber != null ?
                new ObjectParameter("P_LicensePlateNumber", p_LicensePlateNumber) :
                new ObjectParameter("P_LicensePlateNumber", typeof(string));
    
            var p_BrandParameter = p_Brand != null ?
                new ObjectParameter("P_Brand", p_Brand) :
                new ObjectParameter("P_Brand", typeof(string));
    
            var p_ModelParameter = p_Model != null ?
                new ObjectParameter("P_Model", p_Model) :
                new ObjectParameter("P_Model", typeof(string));
    
            var p_ScreenSizeParameter = p_ScreenSize.HasValue ?
                new ObjectParameter("P_ScreenSize", p_ScreenSize) :
                new ObjectParameter("P_ScreenSize", typeof(int));
    
            var p_UserParameter = p_User != null ?
                new ObjectParameter("P_User", p_User) :
                new ObjectParameter("P_User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_Update_LicensePlateNumber_ChangeBrandAndModel_Result>("spr_Update_LicensePlateNumber_ChangeBrandAndModel", p_CompanyIdParameter, p_CategoryIdParameter, p_LicensePlateNumberParameter, p_BrandParameter, p_ModelParameter, p_ScreenSizeParameter, p_UserParameter);
        }
    
        public virtual ObjectResult<spr_ValidIsInsertedTRGID_Result> spr_ValidIsInsertedTRGID(Nullable<int> companyID, string tRG_Detail)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var tRG_DetailParameter = tRG_Detail != null ?
                new ObjectParameter("TRG_Detail", tRG_Detail) :
                new ObjectParameter("TRG_Detail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spr_ValidIsInsertedTRGID_Result>("spr_ValidIsInsertedTRGID", companyIDParameter, tRG_DetailParameter);
        }
    
        public virtual int ValidateUPC1(string uPC)
        {
            var uPCParameter = uPC != null ?
                new ObjectParameter("UPC", uPC) :
                new ObjectParameter("UPC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidateUPC1", uPCParameter);
        }
    
        public virtual ObjectResult<dailyPurchaseOrdersCreate_Result> dailyPurchaseOrdersCreate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dailyPurchaseOrdersCreate_Result>("dailyPurchaseOrdersCreate");
        }
    
        public virtual int dailyPurchaseOrdersDelete()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dailyPurchaseOrdersDelete");
        }
    
        public virtual ObjectResult<Nullable<int>> getPurchaseId(Nullable<int> workCenterIDIn)
        {
            var workCenterIDInParameter = workCenterIDIn.HasValue ?
                new ObjectParameter("WorkCenterIDIn", workCenterIDIn) :
                new ObjectParameter("WorkCenterIDIn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getPurchaseId", workCenterIDInParameter);
        }
    
        public virtual ObjectResult<sp_AddBulkPurchaseDetails_Result> sp_AddBulkPurchaseDetails(Nullable<int> companyID, Nullable<int> workOrderID, string wOType, string pDetails, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var pDetailsParameter = pDetails != null ?
                new ObjectParameter("PDetails", pDetails) :
                new ObjectParameter("PDetails", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddBulkPurchaseDetails_Result>("sp_AddBulkPurchaseDetails", companyIDParameter, workOrderIDParameter, wOTypeParameter, pDetailsParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_AddPurchaseDetails_Result> sp_AddPurchaseDetails(Nullable<int> companyID, Nullable<int> workOrderID, string wOType, string brand, Nullable<int> screenSize, string mFGSKU, string itemDescription, Nullable<int> qty, Nullable<decimal> estimatedRetail, Nullable<decimal> price, Nullable<int> categoryID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var screenSizeParameter = screenSize.HasValue ?
                new ObjectParameter("ScreenSize", screenSize) :
                new ObjectParameter("ScreenSize", typeof(int));
    
            var mFGSKUParameter = mFGSKU != null ?
                new ObjectParameter("MFGSKU", mFGSKU) :
                new ObjectParameter("MFGSKU", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var estimatedRetailParameter = estimatedRetail.HasValue ?
                new ObjectParameter("EstimatedRetail", estimatedRetail) :
                new ObjectParameter("EstimatedRetail", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddPurchaseDetails_Result>("sp_AddPurchaseDetails", companyIDParameter, workOrderIDParameter, wOTypeParameter, brandParameter, screenSizeParameter, mFGSKUParameter, itemDescriptionParameter, qtyParameter, estimatedRetailParameter, priceParameter, categoryIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_AddPurchasePallet_Result> sp_AddPurchasePallet(Nullable<int> companyID, Nullable<int> purchaseID, Nullable<int> palletQty, Nullable<int> workCenterID, string sKU, Nullable<int> condition, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var palletQtyParameter = palletQty.HasValue ?
                new ObjectParameter("PalletQty", palletQty) :
                new ObjectParameter("PalletQty", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddPurchasePallet_Result>("sp_AddPurchasePallet", companyIDParameter, purchaseIDParameter, palletQtyParameter, workCenterIDParameter, sKUParameter, conditionParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_AddPurchasePalletAndReceivedPallet(Nullable<int> companyID, Nullable<int> purchaseID, Nullable<int> palletQty, Nullable<int> workCenterID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var palletQtyParameter = palletQty.HasValue ?
                new ObjectParameter("PalletQty", palletQty) :
                new ObjectParameter("PalletQty", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AddPurchasePalletAndReceivedPallet", companyIDParameter, purchaseIDParameter, palletQtyParameter, workCenterIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_AddWorkOrderDetail_Result> sp_AddWorkOrderDetail(Nullable<int> companyID, Nullable<int> purchaseID, string mFGSKU, Nullable<int> qty, string brand, Nullable<int> screenSize, string itemDescription, Nullable<decimal> estimatedRetail, Nullable<decimal> price, string bTSSKU, Nullable<int> bTSCategoryID, string tRGID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var mFGSKUParameter = mFGSKU != null ?
                new ObjectParameter("MFGSKU", mFGSKU) :
                new ObjectParameter("MFGSKU", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var screenSizeParameter = screenSize.HasValue ?
                new ObjectParameter("ScreenSize", screenSize) :
                new ObjectParameter("ScreenSize", typeof(int));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var estimatedRetailParameter = estimatedRetail.HasValue ?
                new ObjectParameter("EstimatedRetail", estimatedRetail) :
                new ObjectParameter("EstimatedRetail", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var bTSSKUParameter = bTSSKU != null ?
                new ObjectParameter("BTSSKU", bTSSKU) :
                new ObjectParameter("BTSSKU", typeof(string));
    
            var bTSCategoryIDParameter = bTSCategoryID.HasValue ?
                new ObjectParameter("BTSCategoryID", bTSCategoryID) :
                new ObjectParameter("BTSCategoryID", typeof(int));
    
            var tRGIDParameter = tRGID != null ?
                new ObjectParameter("TRGID", tRGID) :
                new ObjectParameter("TRGID", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddWorkOrderDetail_Result>("sp_AddWorkOrderDetail", companyIDParameter, purchaseIDParameter, mFGSKUParameter, qtyParameter, brandParameter, screenSizeParameter, itemDescriptionParameter, estimatedRetailParameter, priceParameter, bTSSKUParameter, bTSCategoryIDParameter, tRGIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_CreatePalletOneStep_Result> sp_CreatePalletOneStep(Nullable<int> p_COMPANYID, Nullable<int> p_PURCHASEID, Nullable<int> p_WORKCENTERID, string p_USERID)
        {
            var p_COMPANYIDParameter = p_COMPANYID.HasValue ?
                new ObjectParameter("P_COMPANYID", p_COMPANYID) :
                new ObjectParameter("P_COMPANYID", typeof(int));
    
            var p_PURCHASEIDParameter = p_PURCHASEID.HasValue ?
                new ObjectParameter("P_PURCHASEID", p_PURCHASEID) :
                new ObjectParameter("P_PURCHASEID", typeof(int));
    
            var p_WORKCENTERIDParameter = p_WORKCENTERID.HasValue ?
                new ObjectParameter("P_WORKCENTERID", p_WORKCENTERID) :
                new ObjectParameter("P_WORKCENTERID", typeof(int));
    
            var p_USERIDParameter = p_USERID != null ?
                new ObjectParameter("P_USERID", p_USERID) :
                new ObjectParameter("P_USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CreatePalletOneStep_Result>("sp_CreatePalletOneStep", p_COMPANYIDParameter, p_PURCHASEIDParameter, p_WORKCENTERIDParameter, p_USERIDParameter);
        }
    
        public virtual ObjectResult<sp_CreateWorkOrderPlan_Result> sp_CreateWorkOrderPlan(Nullable<int> companyID, string wOType, Nullable<int> workOrderID, Nullable<int> statusID, string sourceOrderID, string comment, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var sourceOrderIDParameter = sourceOrderID != null ?
                new ObjectParameter("SourceOrderID", sourceOrderID) :
                new ObjectParameter("SourceOrderID", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CreateWorkOrderPlan_Result>("sp_CreateWorkOrderPlan", companyIDParameter, wOTypeParameter, workOrderIDParameter, statusIDParameter, sourceOrderIDParameter, commentParameter, userIDParameter);
        }
    
        public virtual int sp_CreateWorkOrderPlanByPallet(Nullable<int> companyID, string wOType, Nullable<int> workOrderID, Nullable<int> statusID, string sourceOrderID, string comment, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var sourceOrderIDParameter = sourceOrderID != null ?
                new ObjectParameter("SourceOrderID", sourceOrderID) :
                new ObjectParameter("SourceOrderID", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateWorkOrderPlanByPallet", companyIDParameter, wOTypeParameter, workOrderIDParameter, statusIDParameter, sourceOrderIDParameter, commentParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_DeleteSupplierCode_Result> sp_DeleteSupplierCode(Nullable<int> companyID, Nullable<int> supplierID, Nullable<int> supplierCodeID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierCodeIDParameter = supplierCodeID.HasValue ?
                new ObjectParameter("SupplierCodeID", supplierCodeID) :
                new ObjectParameter("SupplierCodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeleteSupplierCode_Result>("sp_DeleteSupplierCode", companyIDParameter, supplierIDParameter, supplierCodeIDParameter);
        }
    
        public virtual int sp_GetInventoryClassificationReport(Nullable<int> companyID, Nullable<int> categoryID, string search)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetInventoryClassificationReport", companyIDParameter, categoryIDParameter, searchParameter);
        }
    
        public virtual int sp_GetModelPurchaseDetail(Nullable<int> companyID, Nullable<int> purchaseID, string mFGSKU)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var mFGSKUParameter = mFGSKU != null ?
                new ObjectParameter("MFGSKU", mFGSKU) :
                new ObjectParameter("MFGSKU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetModelPurchaseDetail", companyIDParameter, purchaseIDParameter, mFGSKUParameter);
        }
    
        public virtual ObjectResult<sp_GetPalletForInspection_Result> sp_GetPalletForInspection(Nullable<int> companyID, Nullable<int> purchaseID, Nullable<int> purchasePalletID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var purchasePalletIDParameter = purchasePalletID.HasValue ?
                new ObjectParameter("PurchasePalletID", purchasePalletID) :
                new ObjectParameter("PurchasePalletID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPalletForInspection_Result>("sp_GetPalletForInspection", companyIDParameter, purchaseIDParameter, purchasePalletIDParameter);
        }
    
        public virtual int sp_GetPortalInventoryClassificationReport(Nullable<int> companyID, Nullable<int> categoryID, Nullable<int> userID, string search)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetPortalInventoryClassificationReport", companyIDParameter, categoryIDParameter, userIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<sp_GetPurchaseDetailsReport_Result> sp_GetPurchaseDetailsReport(Nullable<int> companyID, Nullable<int> purchaseID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPurchaseDetailsReport_Result>("sp_GetPurchaseDetailsReport", companyIDParameter, purchaseIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPurchasePalletQtyReceived_Result> sp_GetPurchasePalletQtyReceived(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPurchasePalletQtyReceived_Result>("sp_GetPurchasePalletQtyReceived", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPurchasePallets_Result> sp_GetPurchasePallets(Nullable<int> companyID, Nullable<int> purchaseID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPurchasePallets_Result>("sp_GetPurchasePallets", companyIDParameter, purchaseIDParameter);
        }
    
        public virtual int sp_GetPurchaseReport(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetPurchaseReport", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSupplierCodes_Result> sp_GetSupplierCodes(Nullable<int> companyID, Nullable<int> supplierID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSupplierCodes_Result>("sp_GetSupplierCodes", companyIDParameter, supplierIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSupplierReport_Result> sp_GetSupplierReport(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSupplierReport_Result>("sp_GetSupplierReport", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSuppliers_Result> sp_GetSuppliers(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSuppliers_Result>("sp_GetSuppliers", companyIDParameter);
        }
    
        public virtual int sp_GetSuppliersCategoriesCodes(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetSuppliersCategoriesCodes", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GetValidLicensePlateNumber_Result> sp_GetValidLicensePlateNumber(Nullable<int> companyID, string licensePlateNumber)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var licensePlateNumberParameter = licensePlateNumber != null ?
                new ObjectParameter("LicensePlateNumber", licensePlateNumber) :
                new ObjectParameter("LicensePlateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetValidLicensePlateNumber_Result>("sp_GetValidLicensePlateNumber", companyIDParameter, licensePlateNumberParameter);
        }
    
        public virtual int sp_InsertEditPurchasePallet(Nullable<int> companyID, Nullable<int> purchaseID, string purchasePallets, Nullable<bool> haveVendorInformation, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var purchasePalletsParameter = purchasePallets != null ?
                new ObjectParameter("PurchasePallets", purchasePallets) :
                new ObjectParameter("PurchasePallets", typeof(string));
    
            var haveVendorInformationParameter = haveVendorInformation.HasValue ?
                new ObjectParameter("haveVendorInformation", haveVendorInformation) :
                new ObjectParameter("haveVendorInformation", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertEditPurchasePallet", companyIDParameter, purchaseIDParameter, purchasePalletsParameter, haveVendorInformationParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_SavePalletDetailbyLicensePlateNumber_Result> sp_SavePalletDetailbyLicensePlateNumber(Nullable<int> companyID, Nullable<int> purchaseID, Nullable<int> purchasePalletID, Nullable<int> workCenterID, Nullable<int> qtyInspection, Nullable<bool> needTRGID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var purchasePalletIDParameter = purchasePalletID.HasValue ?
                new ObjectParameter("PurchasePalletID", purchasePalletID) :
                new ObjectParameter("PurchasePalletID", typeof(int));
    
            var workCenterIDParameter = workCenterID.HasValue ?
                new ObjectParameter("WorkCenterID", workCenterID) :
                new ObjectParameter("WorkCenterID", typeof(int));
    
            var qtyInspectionParameter = qtyInspection.HasValue ?
                new ObjectParameter("QtyInspection", qtyInspection) :
                new ObjectParameter("QtyInspection", typeof(int));
    
            var needTRGIDParameter = needTRGID.HasValue ?
                new ObjectParameter("NeedTRGID", needTRGID) :
                new ObjectParameter("NeedTRGID", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SavePalletDetailbyLicensePlateNumber_Result>("sp_SavePalletDetailbyLicensePlateNumber", companyIDParameter, purchaseIDParameter, purchasePalletIDParameter, workCenterIDParameter, qtyInspectionParameter, needTRGIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_SaveSupplierCodes_Result> sp_SaveSupplierCodes(Nullable<int> companyID, Nullable<int> supplierID, Nullable<int> categoryID, string supplierCode, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaveSupplierCodes_Result>("sp_SaveSupplierCodes", companyIDParameter, supplierIDParameter, categoryIDParameter, supplierCodeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateActiveSupplier_Result> sp_UpdateActiveSupplier(Nullable<int> companyID, Nullable<int> supplierID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateActiveSupplier_Result>("sp_UpdateActiveSupplier", companyIDParameter, supplierIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdatePurchaseDetails_Result> sp_UpdatePurchaseDetails(Nullable<int> companyID, Nullable<int> purchaseID, Nullable<int> purchaseDetailID, Nullable<int> screenSize, string itemDescription, Nullable<int> qty, Nullable<decimal> estimatedRetail, Nullable<decimal> price, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var purchaseDetailIDParameter = purchaseDetailID.HasValue ?
                new ObjectParameter("PurchaseDetailID", purchaseDetailID) :
                new ObjectParameter("PurchaseDetailID", typeof(int));
    
            var screenSizeParameter = screenSize.HasValue ?
                new ObjectParameter("ScreenSize", screenSize) :
                new ObjectParameter("ScreenSize", typeof(int));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var estimatedRetailParameter = estimatedRetail.HasValue ?
                new ObjectParameter("EstimatedRetail", estimatedRetail) :
                new ObjectParameter("EstimatedRetail", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdatePurchaseDetails_Result>("sp_UpdatePurchaseDetails", companyIDParameter, purchaseIDParameter, purchaseDetailIDParameter, screenSizeParameter, itemDescriptionParameter, qtyParameter, estimatedRetailParameter, priceParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdatePurchasePallets_Result> sp_UpdatePurchasePallets(Nullable<int> companyID, Nullable<int> purchasePalletID, Nullable<int> purchaseID, Nullable<int> quantityInspection, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchasePalletIDParameter = purchasePalletID.HasValue ?
                new ObjectParameter("PurchasePalletID", purchasePalletID) :
                new ObjectParameter("PurchasePalletID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var quantityInspectionParameter = quantityInspection.HasValue ?
                new ObjectParameter("QuantityInspection", quantityInspection) :
                new ObjectParameter("QuantityInspection", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdatePurchasePallets_Result>("sp_UpdatePurchasePallets", companyIDParameter, purchasePalletIDParameter, purchaseIDParameter, quantityInspectionParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateTRGIDPurchases_Result> sp_UpdateTRGIDPurchases(Nullable<int> companyID, Nullable<int> purchaseID, Nullable<bool> needTRGID, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var needTRGIDParameter = needTRGID.HasValue ?
                new ObjectParameter("NeedTRGID", needTRGID) :
                new ObjectParameter("NeedTRGID", typeof(bool));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateTRGIDPurchases_Result>("sp_UpdateTRGIDPurchases", companyIDParameter, purchaseIDParameter, needTRGIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UploadPurchaseFile_Result> sp_UploadPurchaseFile(Nullable<int> companyID, Nullable<int> supplierID, string loadID, string bTSLoadID, string loadDate, string orderNumber, Nullable<bool> needTRGID, string pDetails, string userID, Nullable<bool> hasProduct)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var loadIDParameter = loadID != null ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(string));
    
            var bTSLoadIDParameter = bTSLoadID != null ?
                new ObjectParameter("BTSLoadID", bTSLoadID) :
                new ObjectParameter("BTSLoadID", typeof(string));
    
            var loadDateParameter = loadDate != null ?
                new ObjectParameter("LoadDate", loadDate) :
                new ObjectParameter("LoadDate", typeof(string));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(string));
    
            var needTRGIDParameter = needTRGID.HasValue ?
                new ObjectParameter("NeedTRGID", needTRGID) :
                new ObjectParameter("NeedTRGID", typeof(bool));
    
            var pDetailsParameter = pDetails != null ?
                new ObjectParameter("PDetails", pDetails) :
                new ObjectParameter("PDetails", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var hasProductParameter = hasProduct.HasValue ?
                new ObjectParameter("hasProduct", hasProduct) :
                new ObjectParameter("hasProduct", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UploadPurchaseFile_Result>("sp_UploadPurchaseFile", companyIDParameter, supplierIDParameter, loadIDParameter, bTSLoadIDParameter, loadDateParameter, orderNumberParameter, needTRGIDParameter, pDetailsParameter, userIDParameter, hasProductParameter);
        }
    
        public virtual ObjectResult<sp_UploadTemplateTRGIDFile_Result> sp_UploadTemplateTRGIDFile(Nullable<int> companyID, string pDetails, Nullable<int> workOrderID, string wOType, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var pDetailsParameter = pDetails != null ?
                new ObjectParameter("PDetails", pDetails) :
                new ObjectParameter("PDetails", typeof(string));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UploadTemplateTRGIDFile_Result>("sp_UploadTemplateTRGIDFile", companyIDParameter, pDetailsParameter, workOrderIDParameter, wOTypeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UploadTRGIDFile_Result> sp_UploadTRGIDFile(Nullable<int> companyID, string pDetails, Nullable<int> workOrderID, string wOType, string userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var pDetailsParameter = pDetails != null ?
                new ObjectParameter("PDetails", pDetails) :
                new ObjectParameter("PDetails", typeof(string));
    
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            var wOTypeParameter = wOType != null ?
                new ObjectParameter("WOType", wOType) :
                new ObjectParameter("WOType", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UploadTRGIDFile_Result>("sp_UploadTRGIDFile", companyIDParameter, pDetailsParameter, workOrderIDParameter, wOTypeParameter, userIDParameter);
        }
    
        public virtual int spr_GetCategoriesBrandsModelsInfo(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_GetCategoriesBrandsModelsInfo", companyIDParameter);
        }
    
        public virtual int GetRetailRetailPricePreviousBySKU()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRetailRetailPricePreviousBySKU");
        }
    
        public virtual ObjectResult<sp_UploadLinks_Result> sp_UploadLinks(string sKU, string walmart, string amazon, string target, string bestbuy, string amazonMx, string mercadoLibreMx, string userID)
        {
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var walmartParameter = walmart != null ?
                new ObjectParameter("Walmart", walmart) :
                new ObjectParameter("Walmart", typeof(string));
    
            var amazonParameter = amazon != null ?
                new ObjectParameter("Amazon", amazon) :
                new ObjectParameter("Amazon", typeof(string));
    
            var targetParameter = target != null ?
                new ObjectParameter("Target", target) :
                new ObjectParameter("Target", typeof(string));
    
            var bestbuyParameter = bestbuy != null ?
                new ObjectParameter("Bestbuy", bestbuy) :
                new ObjectParameter("Bestbuy", typeof(string));
    
            var amazonMxParameter = amazonMx != null ?
                new ObjectParameter("AmazonMx", amazonMx) :
                new ObjectParameter("AmazonMx", typeof(string));
    
            var mercadoLibreMxParameter = mercadoLibreMx != null ?
                new ObjectParameter("MercadoLibreMx", mercadoLibreMx) :
                new ObjectParameter("MercadoLibreMx", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UploadLinks_Result>("sp_UploadLinks", sKUParameter, walmartParameter, amazonParameter, targetParameter, bestbuyParameter, amazonMxParameter, mercadoLibreMxParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_UploadLinksV_2_Result> sp_UploadLinksV_2(string sKU, string walmart, string amazon, string target, string bestbuy, string amazonMx, string mercadoLibreMx, string userID)
        {
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var walmartParameter = walmart != null ?
                new ObjectParameter("Walmart", walmart) :
                new ObjectParameter("Walmart", typeof(string));
    
            var amazonParameter = amazon != null ?
                new ObjectParameter("Amazon", amazon) :
                new ObjectParameter("Amazon", typeof(string));
    
            var targetParameter = target != null ?
                new ObjectParameter("Target", target) :
                new ObjectParameter("Target", typeof(string));
    
            var bestbuyParameter = bestbuy != null ?
                new ObjectParameter("Bestbuy", bestbuy) :
                new ObjectParameter("Bestbuy", typeof(string));
    
            var amazonMxParameter = amazonMx != null ?
                new ObjectParameter("AmazonMx", amazonMx) :
                new ObjectParameter("AmazonMx", typeof(string));
    
            var mercadoLibreMxParameter = mercadoLibreMx != null ?
                new ObjectParameter("MercadoLibreMx", mercadoLibreMx) :
                new ObjectParameter("MercadoLibreMx", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UploadLinksV_2_Result>("sp_UploadLinksV_2", sKUParameter, walmartParameter, amazonParameter, targetParameter, bestbuyParameter, amazonMxParameter, mercadoLibreMxParameter, userIDParameter);
        }
    
        public virtual int sp_GetAllMessages(string startDate, string endDate)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAllMessages", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetMessagesByFilter_Result> sp_GetMessagesByFilter(Nullable<System.DateTime> p_DateStart, Nullable<System.DateTime> p_DateEnd, string p_Search)
        {
            var p_DateStartParameter = p_DateStart.HasValue ?
                new ObjectParameter("P_DateStart", p_DateStart) :
                new ObjectParameter("P_DateStart", typeof(System.DateTime));
    
            var p_DateEndParameter = p_DateEnd.HasValue ?
                new ObjectParameter("P_DateEnd", p_DateEnd) :
                new ObjectParameter("P_DateEnd", typeof(System.DateTime));
    
            var p_SearchParameter = p_Search != null ?
                new ObjectParameter("P_Search", p_Search) :
                new ObjectParameter("P_Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMessagesByFilter_Result>("sp_GetMessagesByFilter", p_DateStartParameter, p_DateEndParameter, p_SearchParameter);
        }
    
        public virtual int sp_GetReportMessages(string startDate, string endDate, string priority, string status)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetReportMessages", startDateParameter, endDateParameter, priorityParameter, statusParameter);
        }
    
        public virtual ObjectResult<sp_InsertMessage_Result> sp_InsertMessage(string p_CreateBy, Nullable<int> p_Priority, string p_Message, Nullable<int> p_DepartmentID)
        {
            var p_CreateByParameter = p_CreateBy != null ?
                new ObjectParameter("P_CreateBy", p_CreateBy) :
                new ObjectParameter("P_CreateBy", typeof(string));
    
            var p_PriorityParameter = p_Priority.HasValue ?
                new ObjectParameter("P_Priority", p_Priority) :
                new ObjectParameter("P_Priority", typeof(int));
    
            var p_MessageParameter = p_Message != null ?
                new ObjectParameter("P_Message", p_Message) :
                new ObjectParameter("P_Message", typeof(string));
    
            var p_DepartmentIDParameter = p_DepartmentID.HasValue ?
                new ObjectParameter("P_DepartmentID", p_DepartmentID) :
                new ObjectParameter("P_DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertMessage_Result>("sp_InsertMessage", p_CreateByParameter, p_PriorityParameter, p_MessageParameter, p_DepartmentIDParameter);
        }
    
        public virtual ObjectResult<sp_UpdateMessage_Result> sp_UpdateMessage(string p_CREATEBY, Nullable<int> p_IDMESSAGE, Nullable<int> p_STATUS, Nullable<int> p_Priority, string p_Message)
        {
            var p_CREATEBYParameter = p_CREATEBY != null ?
                new ObjectParameter("P_CREATEBY", p_CREATEBY) :
                new ObjectParameter("P_CREATEBY", typeof(string));
    
            var p_IDMESSAGEParameter = p_IDMESSAGE.HasValue ?
                new ObjectParameter("P_IDMESSAGE", p_IDMESSAGE) :
                new ObjectParameter("P_IDMESSAGE", typeof(int));
    
            var p_STATUSParameter = p_STATUS.HasValue ?
                new ObjectParameter("P_STATUS", p_STATUS) :
                new ObjectParameter("P_STATUS", typeof(int));
    
            var p_PriorityParameter = p_Priority.HasValue ?
                new ObjectParameter("P_Priority", p_Priority) :
                new ObjectParameter("P_Priority", typeof(int));
    
            var p_MessageParameter = p_Message != null ?
                new ObjectParameter("P_Message", p_Message) :
                new ObjectParameter("P_Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateMessage_Result>("sp_UpdateMessage", p_CREATEBYParameter, p_IDMESSAGEParameter, p_STATUSParameter, p_PriorityParameter, p_MessageParameter);
        }
    
        public virtual ObjectResult<sp_GetTicketByCompanyAndUser_Result> sp_GetTicketByCompanyAndUser(Nullable<int> company_Id, Nullable<int> userEmployeeID)
        {
            var company_IdParameter = company_Id.HasValue ?
                new ObjectParameter("Company_Id", company_Id) :
                new ObjectParameter("Company_Id", typeof(int));
    
            var userEmployeeIDParameter = userEmployeeID.HasValue ?
                new ObjectParameter("UserEmployeeID", userEmployeeID) :
                new ObjectParameter("UserEmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTicketByCompanyAndUser_Result>("sp_GetTicketByCompanyAndUser", company_IdParameter, userEmployeeIDParameter);
        }
    
        public virtual ObjectResult<sp_InsertTicket_Result> sp_InsertTicket(Nullable<int> company_Id, string createUser, string title, string description, Nullable<int> requieredByUser_Id, Nullable<int> requieredByDepartament_Id, Nullable<int> forApartament_Id, Nullable<int> priority_Id, Nullable<int> weight, Nullable<int> tagByTicket_Id, Nullable<System.DateTime> deliverDate)
        {
            var company_IdParameter = company_Id.HasValue ?
                new ObjectParameter("Company_Id", company_Id) :
                new ObjectParameter("Company_Id", typeof(int));
    
            var createUserParameter = createUser != null ?
                new ObjectParameter("CreateUser", createUser) :
                new ObjectParameter("CreateUser", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var requieredByUser_IdParameter = requieredByUser_Id.HasValue ?
                new ObjectParameter("RequieredByUser_Id", requieredByUser_Id) :
                new ObjectParameter("RequieredByUser_Id", typeof(int));
    
            var requieredByDepartament_IdParameter = requieredByDepartament_Id.HasValue ?
                new ObjectParameter("RequieredByDepartament_Id", requieredByDepartament_Id) :
                new ObjectParameter("RequieredByDepartament_Id", typeof(int));
    
            var forApartament_IdParameter = forApartament_Id.HasValue ?
                new ObjectParameter("ForApartament_Id", forApartament_Id) :
                new ObjectParameter("ForApartament_Id", typeof(int));
    
            var priority_IdParameter = priority_Id.HasValue ?
                new ObjectParameter("Priority_Id", priority_Id) :
                new ObjectParameter("Priority_Id", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var tagByTicket_IdParameter = tagByTicket_Id.HasValue ?
                new ObjectParameter("TagByTicket_Id", tagByTicket_Id) :
                new ObjectParameter("TagByTicket_Id", typeof(int));
    
            var deliverDateParameter = deliverDate.HasValue ?
                new ObjectParameter("DeliverDate", deliverDate) :
                new ObjectParameter("DeliverDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertTicket_Result>("sp_InsertTicket", company_IdParameter, createUserParameter, titleParameter, descriptionParameter, requieredByUser_IdParameter, requieredByDepartament_IdParameter, forApartament_IdParameter, priority_IdParameter, weightParameter, tagByTicket_IdParameter, deliverDateParameter);
        }
    }
}
